{"version":3,"sources":["component/moviesbot_gpt3.js","App.js","reportWebVitals.js","index.js"],"names":["CONFIDENTIAL","speech","Speech","require","config","_require","Configuration","OpenAIApi","neo4j","session","driver","process","auth","basic","database","REACT_APP_NEO4JDATABASE","openai","apiKey","REACT_APP_API_KEY","init","voices","console","log","MoviesBot","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","loading","result","triggetNext","bind","_assertThisInitialized","_createClass","key","value","self","this","search","steps","user","_callAsync","_asyncToGenerator","_regeneratorRuntime","mark","_callee","query","textToSpeak","response","cypher","records","isConfidential","wrap","_context","prev","next","createCompletion","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","stop","sent","data","choices","text","run","forEach","element","get","slice","finish","t0","error","startsWith","setState","length","speak","then","catch","e","apply","arguments","callAsync","_this2","triggerNextStep","callMoviesBot","_step","_this$state","lines","split","elements","_iterator","_createForOfIteratorHelper","entries","s","n","done","_step$value","_slicedToArray","index","push","_jsxs","children","_jsx","err","f","className","Loading","Component","defaultProps","undefined","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","id","message","trigger","component","waitAction","asMessage","end","App","chatbot","ChatBot","headerTitle","botAvatar","userAvatar","recognitionEnable","width","speechSynthesis","enable","lang","style","display","justifyContent","ThemeProvider","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffb385f9.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Loading } from 'react-simple-chatbot';\n\nimport Speech from 'speak-tts'\n\n\nconst CONFIDENTIAL = \"[CONFIDENTIAL]\";\nconst speech = new Speech()\nrequire('dotenv').config()\n\n\nconst { Configuration, OpenAIApi } = require(\"openai\");\nconst neo4j = require('neo4j-driver')\n\nconst driver = neo4j.driver(process.env.REACT_APP_NEO4JURI, neo4j.auth.basic(process.env.REACT_APP_NEO4JUSER, process.env.REACT_APP_NEO4JPASSWORD))\n\nconst session = driver.session({database:process.env.REACT_APP_NEO4JDATABASE || 'neo4j'})\n\n\n\n\nconst configuration = new Configuration({\n  apiKey: process.env.REACT_APP_API_KEY\n});\n\nconst openai = new OpenAIApi(configuration);\n\n\nspeech.init({\n  'volume': 1,\n  'lang': 'en-GB',\n  'rate': 1,\n  'pitch': 1,\n  'voice': 'Google UK English Male',\n  'splitSentences': true,\n  'listeners': {\n    'onvoiceschanged': (voices) => {\n      console.log(\"Event voiceschanged\", voices)\n    }\n  }\n})\n\nclass MoviesBot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      result: ''\n    };\n\n    this.triggetNext = this.triggetNext.bind(this);\n  }\n\n  callMoviesBot() {\n\n    const self = this;\n    const { steps } = this.props;\n    const search = steps.user.value;\n\n    async function callAsync() {\n      let training = `\n      #Which library collections are included in this archive?\n      MATCH(n:\\`Library Collection\\`)\n      RETURN n.Title;\n      \n      #Who is interviewed most often in the archive?\n      MATCH (n)-[r:interviewee]->()\n      RETURN n, COUNT(r) AS numRels\n      ORDER BY numRels DESC\n      LIMIT 1\n      \n      #How many issues of The Real News are in this archive?\n      MATCH (n:Collection_items)\n      WHERE n.Title CONTAINS \"The Real News\"\n      RETURN count(n)\n      #`;\n\n\n\n      let query = training + search + \"\\n\"\n\n      let textToSpeak = ''\n      try {\n        console.log(\"query\", query)\n        if (search) {\n\n          const response = await openai.createCompletion(\"davinci\", {\n            prompt: query,\n            temperature: 0,\n            max_tokens: 150,\n            top_p: 1.0,\n            frequency_penalty: 0.0,\n            presence_penalty: 0.0,\n            stop: [\"#\", \";\"],\n          });\n\n          console.log('response:', response);\n          let cypher = response.data.choices[0].text;\n          console.log('MoviesBot:' + cypher);\n\n          try {\n            const result = await session.run(cypher)\n\n            //const singleRecord = result.records[0]\n\n            const records = result.records\n\n            records.forEach(element => {\n              textToSpeak += element.get(0) + \", \"\n            });\n\n            //textToSpeak = singleRecord.get(0)\n            textToSpeak = textToSpeak.slice(0, -2)\n\n            console.log(\"records\", records)\n          } finally {\n            //await session.close()\n          }\n\n          // on application exit:\n          //await driver.close()\n        }\n      }\n      catch (error) {\n        //console.log(process.env);\n        console.error(error)\n        console.log('MoviesBot:' + textToSpeak);\n        textToSpeak = \"Sorry I can't answer that. Could you please try again?\"\n      }\n\n      let isConfidential = false;\n      if (textToSpeak.startsWith(CONFIDENTIAL)) {\n        isConfidential = true;\n        // textToSpeak = textToSpeak.substring(CONFIDENTIAL.length)\n      }\n\n      self.setState({ loading: false, result: textToSpeak });\n\n      if (isConfidential || textToSpeak.length > 115) {\n        speech.speak({ text: \"Please find the information below\" })\n          .then(() => { console.log(\"Success !\") })\n          .catch(e => { console.error(\"An error occurred :\", e) })\n      } else {\n        speech.speak({ text: textToSpeak })\n          .then(() => { console.log(\"Success !\") })\n          .catch(e => { console.error(\"An error occurred :\", e) })\n      }\n\n    }\n    callAsync();\n  }\n\n  triggetNext() {\n    this.setState({}, () => {\n      this.props.triggerNextStep();\n    });\n  }\n\n  componentDidMount() {\n    this.callMoviesBot();\n    this.triggetNext();\n  }\n\n  render() {\n    const { loading, result } = this.state;\n    const lines = result.split(\"\\n\");\n    const elements = [];\n    for (const [index, value] of lines.entries()) {\n      elements.push(<span key={index}>{value}<br /></span>)\n    }\n\n    return (\n      <div className=\"bot-response\">\n        {loading ? <Loading /> : elements}\n      </div>\n    );\n  }\n}\n\nMoviesBot.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nMoviesBot.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\nexport default MoviesBot;\n","import './App.css';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport MoviesBot from './component/moviesbot_gpt3';\n\n\nconst ENABLE_THEME = true\n\nconst theme_red = {\n  background: '#f5f8fb',\n  fontFamily: 'Tahoma',\n  headerBgColor: '#0066ff',\n  headerFontColor: '#fff',\n  headerFontSize: '15px',\n  botBubbleColor: '#3399ff',\n  botFontColor: '#fff',\n  userBubbleColor: '#fff',\n  userFontColor: '#4a4a4a',\n};\n\nconst theme = ENABLE_THEME ? theme_red : ''\n\nconst steps = [\n  {\n    id: 'bot-welcome',\n    message: 'Welcome to Digital Traces bot, how can I help?',\n    trigger: 'user'\n  },\n  {\n    id: 'user',\n    user: true,\n    trigger: 'bot-response'\n  },\n  {\n    id: 'bot-response',\n    component: <MoviesBot />,\n    waitAction: true,\n    asMessage: true,\n    trigger: 'user'\n  },\n  {\n    id: 'not-bye',\n    message: 'Thank you. Have a great day!',\n    end: true\n  },\n];\n\nfunction App() {\n  let chatbot = <ChatBot\n    steps={steps}\n    headerTitle=\"Digital Traces Bot\"\n    botAvatar=\"ai_trans.png\"\n    userAvatar=\"user.png\"\n    recognitionEnable={true}\n    width=\"450px\"\n    speechSynthesis={{ enable: false, lang: 'en' }}\n  />\n\n  return (\n    <div className=\"App\" style={{display: 'flex', justifyContent: 'center'}}>\n      {\n         (theme !== '') ? <ThemeProvider theme={theme}> {chatbot} </ThemeProvider> : chatbot\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}