{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.canRetryOn = void 0;\nvar error_1 = require(\"../error\");\n/**\n * Verified error and returns if it could be retried or not\n *\n * @param _error The error\n * @returns If the transaction could be retried.\n */\nfunction canRetryOn(_error) {\n  return _error && _error instanceof error_1.Neo4jError && _error.code && (_error.code === error_1.SERVICE_UNAVAILABLE || _error.code === error_1.SESSION_EXPIRED || _isAuthorizationExpired(_error) || _isTransientError(_error));\n}\nexports.canRetryOn = canRetryOn;\nfunction _isTransientError(error) {\n  // Retries should not happen when transaction was explicitly terminated by the user.\n  // Termination of transaction might result in two different error codes depending on where it was\n  // terminated. These are really client errors but classification on the server is not entirely correct and\n  // they are classified as transient.\n  var code = error.code;\n  if (code.indexOf('TransientError') >= 0) {\n    if (code === 'Neo.TransientError.Transaction.Terminated' || code === 'Neo.TransientError.Transaction.LockClientStopped') {\n      return false;\n    }\n    return true;\n  }\n  return false;\n}\nfunction _isAuthorizationExpired(error) {\n  return error.code === 'Neo.ClientError.Security.AuthorizationExpired';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","canRetryOn","error_1","require","_error","Neo4jError","code","SERVICE_UNAVAILABLE","SESSION_EXPIRED","_isAuthorizationExpired","_isTransientError","error","indexOf"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-core/lib/internal/retry-strategy.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.canRetryOn = void 0;\nvar error_1 = require(\"../error\");\n/**\n * Verified error and returns if it could be retried or not\n *\n * @param _error The error\n * @returns If the transaction could be retried.\n */\nfunction canRetryOn(_error) {\n    return (_error &&\n        _error instanceof error_1.Neo4jError &&\n        _error.code &&\n        (_error.code === error_1.SERVICE_UNAVAILABLE ||\n            _error.code === error_1.SESSION_EXPIRED ||\n            _isAuthorizationExpired(_error) ||\n            _isTransientError(_error)));\n}\nexports.canRetryOn = canRetryOn;\nfunction _isTransientError(error) {\n    // Retries should not happen when transaction was explicitly terminated by the user.\n    // Termination of transaction might result in two different error codes depending on where it was\n    // terminated. These are really client errors but classification on the server is not entirely correct and\n    // they are classified as transient.\n    var code = error.code;\n    if (code.indexOf('TransientError') >= 0) {\n        if (code === 'Neo.TransientError.Transaction.Terminated' ||\n            code === 'Neo.TransientError.Transaction.LockClientStopped') {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\nfunction _isAuthorizationExpired(error) {\n    return error.code === 'Neo.ClientError.Security.AuthorizationExpired';\n}\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,UAAUA,CAACG,MAAM,EAAE;EACxB,OAAQA,MAAM,IACVA,MAAM,YAAYF,OAAO,CAACG,UAAU,IACpCD,MAAM,CAACE,IAAI,KACVF,MAAM,CAACE,IAAI,KAAKJ,OAAO,CAACK,mBAAmB,IACxCH,MAAM,CAACE,IAAI,KAAKJ,OAAO,CAACM,eAAe,IACvCC,uBAAuB,CAACL,MAAM,CAAC,IAC/BM,iBAAiB,CAACN,MAAM,CAAC,CAAC;AACtC;AACAL,OAAO,CAACE,UAAU,GAAGA,UAAU;AAC/B,SAASS,iBAAiBA,CAACC,KAAK,EAAE;EAC9B;EACA;EACA;EACA;EACA,IAAIL,IAAI,GAAGK,KAAK,CAACL,IAAI;EACrB,IAAIA,IAAI,CAACM,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;IACrC,IAAIN,IAAI,KAAK,2CAA2C,IACpDA,IAAI,KAAK,kDAAkD,EAAE;MAC7D,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;AACA,SAASG,uBAAuBA,CAACE,KAAK,EAAE;EACpC,OAAOA,KAAK,CAACL,IAAI,KAAK,+CAA+C;AACzE"},"metadata":{},"sourceType":"script"}