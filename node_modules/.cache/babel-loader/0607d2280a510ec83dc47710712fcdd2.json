{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectivityVerifier = void 0;\nvar connection_holder_1 = require(\"./connection-holder\");\nvar constants_1 = require(\"./constants\");\nvar error_1 = require(\"../error\");\n/**\n * Verifies connectivity using the given connection provider.\n */\nvar ConnectivityVerifier = /** @class */function () {\n  /**\n   * @constructor\n   * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\n   */\n  function ConnectivityVerifier(connectionProvider) {\n    this._connectionProvider = connectionProvider;\n  }\n  /**\n   * Try to obtain a working connection from the connection provider.\n   * @returns {Promise<object>} promise resolved with server info or rejected with error.\n   */\n  ConnectivityVerifier.prototype.verify = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.database,\n      database = _c === void 0 ? '' : _c;\n    return acquireAndReleaseDummyConnection(this._connectionProvider, database);\n  };\n  return ConnectivityVerifier;\n}();\nexports.ConnectivityVerifier = ConnectivityVerifier;\n/**\n * @private\n * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\n * @param {string|undefined} database The database name\n * @return {Promise<object>} promise resolved with server info or rejected with error.\n */\nfunction acquireAndReleaseDummyConnection(connectionProvider, database) {\n  var connectionHolder = new connection_holder_1.ConnectionHolder({\n    mode: constants_1.ACCESS_MODE_READ,\n    database: database,\n    connectionProvider: connectionProvider\n  });\n  connectionHolder.initializeConnection();\n  return connectionHolder.getConnection().then(function (connection) {\n    // able to establish a connection\n    if (!connection) {\n      throw (0, error_1.newError)('Unexpected error acquiring transaction');\n    }\n    return connectionHolder.close().then(function () {\n      return connection.server;\n    });\n  }).catch(function (error) {\n    // failed to establish a connection\n    return connectionHolder.close().catch(function (ignoredError) {\n      // ignore connection release error\n    }).then(function () {\n      return Promise.reject(error);\n    });\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","ConnectivityVerifier","connection_holder_1","require","constants_1","error_1","connectionProvider","_connectionProvider","prototype","verify","_a","_b","_c","database","acquireAndReleaseDummyConnection","connectionHolder","ConnectionHolder","mode","ACCESS_MODE_READ","initializeConnection","getConnection","then","connection","newError","close","server","catch","error","ignoredError","Promise","reject"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-core/lib/internal/connectivity-verifier.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectivityVerifier = void 0;\nvar connection_holder_1 = require(\"./connection-holder\");\nvar constants_1 = require(\"./constants\");\nvar error_1 = require(\"../error\");\n/**\n * Verifies connectivity using the given connection provider.\n */\nvar ConnectivityVerifier = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\n     */\n    function ConnectivityVerifier(connectionProvider) {\n        this._connectionProvider = connectionProvider;\n    }\n    /**\n     * Try to obtain a working connection from the connection provider.\n     * @returns {Promise<object>} promise resolved with server info or rejected with error.\n     */\n    ConnectivityVerifier.prototype.verify = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;\n        return acquireAndReleaseDummyConnection(this._connectionProvider, database);\n    };\n    return ConnectivityVerifier;\n}());\nexports.ConnectivityVerifier = ConnectivityVerifier;\n/**\n * @private\n * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\n * @param {string|undefined} database The database name\n * @return {Promise<object>} promise resolved with server info or rejected with error.\n */\nfunction acquireAndReleaseDummyConnection(connectionProvider, database) {\n    var connectionHolder = new connection_holder_1.ConnectionHolder({\n        mode: constants_1.ACCESS_MODE_READ,\n        database: database,\n        connectionProvider: connectionProvider\n    });\n    connectionHolder.initializeConnection();\n    return connectionHolder\n        .getConnection()\n        .then(function (connection) {\n        // able to establish a connection\n        if (!connection) {\n            throw (0, error_1.newError)('Unexpected error acquiring transaction');\n        }\n        return connectionHolder.close().then(function () { return connection.server; });\n    })\n        .catch(function (error) {\n        // failed to establish a connection\n        return connectionHolder\n            .close()\n            .catch(function (ignoredError) {\n            // ignore connection release error\n        })\n            .then(function () {\n            return Promise.reject(error);\n        });\n    });\n}\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAG,KAAK,CAAC;AACrC,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACxD,IAAIC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAU,CAAC;AACjC;AACA;AACA;AACA,IAAIF,oBAAoB,GAAG,aAAe,YAAY;EAClD;AACJ;AACA;AACA;EACI,SAASA,oBAAoBA,CAACK,kBAAkB,EAAE;IAC9C,IAAI,CAACC,mBAAmB,GAAGD,kBAAkB;EACjD;EACA;AACJ;AACA;AACA;EACIL,oBAAoB,CAACO,SAAS,CAACC,MAAM,GAAG,UAAUC,EAAE,EAAE;IAClD,IAAIC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEE,EAAE,GAAGD,EAAE,CAACE,QAAQ;MAAEA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,EAAE;IACtF,OAAOE,gCAAgC,CAAC,IAAI,CAACP,mBAAmB,EAAEM,QAAQ,CAAC;EAC/E,CAAC;EACD,OAAOZ,oBAAoB;AAC/B,CAAC,EAAG;AACJF,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,gCAAgCA,CAACR,kBAAkB,EAAEO,QAAQ,EAAE;EACpE,IAAIE,gBAAgB,GAAG,IAAIb,mBAAmB,CAACc,gBAAgB,CAAC;IAC5DC,IAAI,EAAEb,WAAW,CAACc,gBAAgB;IAClCL,QAAQ,EAAEA,QAAQ;IAClBP,kBAAkB,EAAEA;EACxB,CAAC,CAAC;EACFS,gBAAgB,CAACI,oBAAoB,EAAE;EACvC,OAAOJ,gBAAgB,CAClBK,aAAa,EAAE,CACfC,IAAI,CAAC,UAAUC,UAAU,EAAE;IAC5B;IACA,IAAI,CAACA,UAAU,EAAE;MACb,MAAM,CAAC,CAAC,EAAEjB,OAAO,CAACkB,QAAQ,EAAE,wCAAwC,CAAC;IACzE;IACA,OAAOR,gBAAgB,CAACS,KAAK,EAAE,CAACH,IAAI,CAAC,YAAY;MAAE,OAAOC,UAAU,CAACG,MAAM;IAAE,CAAC,CAAC;EACnF,CAAC,CAAC,CACGC,KAAK,CAAC,UAAUC,KAAK,EAAE;IACxB;IACA,OAAOZ,gBAAgB,CAClBS,KAAK,EAAE,CACPE,KAAK,CAAC,UAAUE,YAAY,EAAE;MAC/B;IAAA,CACH,CAAC,CACGP,IAAI,CAAC,YAAY;MAClB,OAAOQ,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;IAChC,CAAC,CAAC;EACN,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"script"}