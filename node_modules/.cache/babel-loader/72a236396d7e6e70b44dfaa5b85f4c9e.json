{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;\nvar error_1 = require(\"../error\");\nvar util_1 = require(\"./util\");\nvar constants_1 = require(\"./constants\");\nvar bookmark_1 = require(\"./bookmark\");\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n * @private\n */\nvar ConnectionHolder = /** @class */function () {\n  /**\n   * @constructor\n   * @param {object} params\n   * @property {string} params.mode - the access mode for new connection holder.\n   * @property {string} params.database - the target database name.\n   * @property {Bookmark} params.bookmark - the last bookmark\n   * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.\n   * @property {string?} params.impersonatedUser - the user which will be impersonated\n   * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved\n   */\n  function ConnectionHolder(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.mode,\n      mode = _c === void 0 ? constants_1.ACCESS_MODE_WRITE : _c,\n      _d = _b.database,\n      database = _d === void 0 ? '' : _d,\n      bookmark = _b.bookmark,\n      connectionProvider = _b.connectionProvider,\n      impersonatedUser = _b.impersonatedUser,\n      onDatabaseNameResolved = _b.onDatabaseNameResolved;\n    this._mode = mode;\n    this._database = database ? (0, util_1.assertString)(database, 'database') : '';\n    this._bookmark = bookmark || bookmark_1.Bookmark.empty();\n    this._connectionProvider = connectionProvider;\n    this._impersonatedUser = impersonatedUser;\n    this._referenceCount = 0;\n    this._connectionPromise = Promise.resolve();\n    this._onDatabaseNameResolved = onDatabaseNameResolved;\n  }\n  ConnectionHolder.prototype.mode = function () {\n    return this._mode;\n  };\n  ConnectionHolder.prototype.database = function () {\n    return this._database;\n  };\n  ConnectionHolder.prototype.setDatabase = function (database) {\n    this._database = database;\n  };\n  ConnectionHolder.prototype.bookmark = function () {\n    return this._bookmark;\n  };\n  ConnectionHolder.prototype.connectionProvider = function () {\n    return this._connectionProvider;\n  };\n  ConnectionHolder.prototype.referenceCount = function () {\n    return this._referenceCount;\n  };\n  ConnectionHolder.prototype.initializeConnection = function () {\n    if (this._referenceCount === 0 && this._connectionProvider) {\n      this._connectionPromise = this._connectionProvider.acquireConnection({\n        accessMode: this._mode,\n        database: this._database,\n        bookmarks: this._bookmark,\n        impersonatedUser: this._impersonatedUser,\n        onDatabaseNameResolved: this._onDatabaseNameResolved\n      });\n    } else {\n      this._referenceCount++;\n      return false;\n    }\n    this._referenceCount++;\n    return true;\n  };\n  ConnectionHolder.prototype.getConnection = function () {\n    return this._connectionPromise;\n  };\n  ConnectionHolder.prototype.releaseConnection = function () {\n    if (this._referenceCount === 0) {\n      return this._connectionPromise;\n    }\n    this._referenceCount--;\n    if (this._referenceCount === 0) {\n      return this._releaseConnection();\n    }\n    return this._connectionPromise;\n  };\n  ConnectionHolder.prototype.close = function () {\n    if (this._referenceCount === 0) {\n      return this._connectionPromise;\n    }\n    this._referenceCount = 0;\n    return this._releaseConnection();\n  };\n  /**\n   * Return the current pooled connection instance to the connection pool.\n   * We don't pool Session instances, to avoid users using the Session after they've called close.\n   * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n   * @return {Promise} - promise resolved then connection is returned to the pool.\n   * @private\n   */\n  ConnectionHolder.prototype._releaseConnection = function () {\n    this._connectionPromise = this._connectionPromise.then(function (connection) {\n      if (connection) {\n        if (connection.isOpen()) {\n          return connection.resetAndFlush().catch(ignoreError).then(function () {\n            return connection._release();\n          });\n        }\n        return connection._release();\n      } else {\n        return Promise.resolve();\n      }\n    }).catch(ignoreError);\n    return this._connectionPromise;\n  };\n  return ConnectionHolder;\n}();\nexports.ConnectionHolder = ConnectionHolder;\n/**\n * Provides a interaction with a ConnectionHolder without change it state by\n * releasing or initilizing\n */\nvar ReadOnlyConnectionHolder = /** @class */function (_super) {\n  __extends(ReadOnlyConnectionHolder, _super);\n  /**\n   * Contructor\n   * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests\n   */\n  function ReadOnlyConnectionHolder(connectionHolder) {\n    var _this = _super.call(this, {\n      mode: connectionHolder.mode(),\n      database: connectionHolder.database(),\n      bookmark: connectionHolder.bookmark(),\n      connectionProvider: connectionHolder.connectionProvider()\n    }) || this;\n    _this._connectionHolder = connectionHolder;\n    return _this;\n  }\n  /**\n   * Return the true if the connection is suppose to be initilized with the command.\n   *\n   * @return {boolean}\n   */\n  ReadOnlyConnectionHolder.prototype.initializeConnection = function () {\n    if (this._connectionHolder.referenceCount() === 0) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Get the current connection promise.\n   * @return {Promise<Connection>} promise resolved with the current connection.\n   */\n  ReadOnlyConnectionHolder.prototype.getConnection = function () {\n    return this._connectionHolder.getConnection();\n  };\n  /**\n   * Get the current connection promise, doesn't performs the release\n   * @return {Promise<Connection>} promise with the resolved current connection\n   */\n  ReadOnlyConnectionHolder.prototype.releaseConnection = function () {\n    return this._connectionHolder.getConnection().catch(function () {\n      return Promise.resolve();\n    });\n  };\n  /**\n   * Get the current connection promise, doesn't performs the connection close\n   * @return {Promise<Connection>} promise with the resolved current connection\n   */\n  ReadOnlyConnectionHolder.prototype.close = function () {\n    return this._connectionHolder.getConnection().catch(function () {\n      return Promise.resolve();\n    });\n  };\n  return ReadOnlyConnectionHolder;\n}(ConnectionHolder);\nexports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;\nexports.default = ReadOnlyConnectionHolder;\nvar EmptyConnectionHolder = /** @class */function (_super) {\n  __extends(EmptyConnectionHolder, _super);\n  function EmptyConnectionHolder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  EmptyConnectionHolder.prototype.mode = function () {\n    return undefined;\n  };\n  EmptyConnectionHolder.prototype.database = function () {\n    return undefined;\n  };\n  EmptyConnectionHolder.prototype.initializeConnection = function () {\n    // nothing to initialize\n    return true;\n  };\n  EmptyConnectionHolder.prototype.getConnection = function () {\n    return Promise.reject((0, error_1.newError)('This connection holder does not serve connections'));\n  };\n  EmptyConnectionHolder.prototype.releaseConnection = function () {\n    return Promise.resolve();\n  };\n  EmptyConnectionHolder.prototype.close = function () {\n    return Promise.resolve();\n  };\n  return EmptyConnectionHolder;\n}(ConnectionHolder);\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n * @private\n */\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;\n// eslint-disable-next-line handle-callback-err\nfunction ignoreError(error) {}","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","EMPTY_CONNECTION_HOLDER","ReadOnlyConnectionHolder","ConnectionHolder","error_1","require","util_1","constants_1","bookmark_1","_a","_b","_c","mode","ACCESS_MODE_WRITE","_d","database","bookmark","connectionProvider","impersonatedUser","onDatabaseNameResolved","_mode","_database","assertString","_bookmark","Bookmark","empty","_connectionProvider","_impersonatedUser","_referenceCount","_connectionPromise","Promise","resolve","_onDatabaseNameResolved","setDatabase","referenceCount","initializeConnection","acquireConnection","accessMode","bookmarks","getConnection","releaseConnection","_releaseConnection","close","then","connection","isOpen","resetAndFlush","catch","ignoreError","_release","_super","connectionHolder","_this","_connectionHolder","default","EmptyConnectionHolder","apply","arguments","undefined","reject","newError","error"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-core/lib/internal/connection-holder.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;\nvar error_1 = require(\"../error\");\nvar util_1 = require(\"./util\");\nvar constants_1 = require(\"./constants\");\nvar bookmark_1 = require(\"./bookmark\");\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n * @private\n */\nvar ConnectionHolder = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {object} params\n     * @property {string} params.mode - the access mode for new connection holder.\n     * @property {string} params.database - the target database name.\n     * @property {Bookmark} params.bookmark - the last bookmark\n     * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.\n     * @property {string?} params.impersonatedUser - the user which will be impersonated\n     * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved\n     */\n    function ConnectionHolder(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.mode, mode = _c === void 0 ? constants_1.ACCESS_MODE_WRITE : _c, _d = _b.database, database = _d === void 0 ? '' : _d, bookmark = _b.bookmark, connectionProvider = _b.connectionProvider, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved;\n        this._mode = mode;\n        this._database = database ? (0, util_1.assertString)(database, 'database') : '';\n        this._bookmark = bookmark || bookmark_1.Bookmark.empty();\n        this._connectionProvider = connectionProvider;\n        this._impersonatedUser = impersonatedUser;\n        this._referenceCount = 0;\n        this._connectionPromise = Promise.resolve();\n        this._onDatabaseNameResolved = onDatabaseNameResolved;\n    }\n    ConnectionHolder.prototype.mode = function () {\n        return this._mode;\n    };\n    ConnectionHolder.prototype.database = function () {\n        return this._database;\n    };\n    ConnectionHolder.prototype.setDatabase = function (database) {\n        this._database = database;\n    };\n    ConnectionHolder.prototype.bookmark = function () {\n        return this._bookmark;\n    };\n    ConnectionHolder.prototype.connectionProvider = function () {\n        return this._connectionProvider;\n    };\n    ConnectionHolder.prototype.referenceCount = function () {\n        return this._referenceCount;\n    };\n    ConnectionHolder.prototype.initializeConnection = function () {\n        if (this._referenceCount === 0 && this._connectionProvider) {\n            this._connectionPromise = this._connectionProvider.acquireConnection({\n                accessMode: this._mode,\n                database: this._database,\n                bookmarks: this._bookmark,\n                impersonatedUser: this._impersonatedUser,\n                onDatabaseNameResolved: this._onDatabaseNameResolved\n            });\n        }\n        else {\n            this._referenceCount++;\n            return false;\n        }\n        this._referenceCount++;\n        return true;\n    };\n    ConnectionHolder.prototype.getConnection = function () {\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype.releaseConnection = function () {\n        if (this._referenceCount === 0) {\n            return this._connectionPromise;\n        }\n        this._referenceCount--;\n        if (this._referenceCount === 0) {\n            return this._releaseConnection();\n        }\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype.close = function () {\n        if (this._referenceCount === 0) {\n            return this._connectionPromise;\n        }\n        this._referenceCount = 0;\n        return this._releaseConnection();\n    };\n    /**\n     * Return the current pooled connection instance to the connection pool.\n     * We don't pool Session instances, to avoid users using the Session after they've called close.\n     * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n     * @return {Promise} - promise resolved then connection is returned to the pool.\n     * @private\n     */\n    ConnectionHolder.prototype._releaseConnection = function () {\n        this._connectionPromise = this._connectionPromise\n            .then(function (connection) {\n            if (connection) {\n                if (connection.isOpen()) {\n                    return connection\n                        .resetAndFlush()\n                        .catch(ignoreError)\n                        .then(function () { return connection._release(); });\n                }\n                return connection._release();\n            }\n            else {\n                return Promise.resolve();\n            }\n        })\n            .catch(ignoreError);\n        return this._connectionPromise;\n    };\n    return ConnectionHolder;\n}());\nexports.ConnectionHolder = ConnectionHolder;\n/**\n * Provides a interaction with a ConnectionHolder without change it state by\n * releasing or initilizing\n */\nvar ReadOnlyConnectionHolder = /** @class */ (function (_super) {\n    __extends(ReadOnlyConnectionHolder, _super);\n    /**\n     * Contructor\n     * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests\n     */\n    function ReadOnlyConnectionHolder(connectionHolder) {\n        var _this = _super.call(this, {\n            mode: connectionHolder.mode(),\n            database: connectionHolder.database(),\n            bookmark: connectionHolder.bookmark(),\n            connectionProvider: connectionHolder.connectionProvider()\n        }) || this;\n        _this._connectionHolder = connectionHolder;\n        return _this;\n    }\n    /**\n     * Return the true if the connection is suppose to be initilized with the command.\n     *\n     * @return {boolean}\n     */\n    ReadOnlyConnectionHolder.prototype.initializeConnection = function () {\n        if (this._connectionHolder.referenceCount() === 0) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Get the current connection promise.\n     * @return {Promise<Connection>} promise resolved with the current connection.\n     */\n    ReadOnlyConnectionHolder.prototype.getConnection = function () {\n        return this._connectionHolder.getConnection();\n    };\n    /**\n     * Get the current connection promise, doesn't performs the release\n     * @return {Promise<Connection>} promise with the resolved current connection\n     */\n    ReadOnlyConnectionHolder.prototype.releaseConnection = function () {\n        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(); });\n    };\n    /**\n     * Get the current connection promise, doesn't performs the connection close\n     * @return {Promise<Connection>} promise with the resolved current connection\n     */\n    ReadOnlyConnectionHolder.prototype.close = function () {\n        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(); });\n    };\n    return ReadOnlyConnectionHolder;\n}(ConnectionHolder));\nexports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;\nexports.default = ReadOnlyConnectionHolder;\nvar EmptyConnectionHolder = /** @class */ (function (_super) {\n    __extends(EmptyConnectionHolder, _super);\n    function EmptyConnectionHolder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EmptyConnectionHolder.prototype.mode = function () {\n        return undefined;\n    };\n    EmptyConnectionHolder.prototype.database = function () {\n        return undefined;\n    };\n    EmptyConnectionHolder.prototype.initializeConnection = function () {\n        // nothing to initialize\n        return true;\n    };\n    EmptyConnectionHolder.prototype.getConnection = function () {\n        return Promise.reject((0, error_1.newError)('This connection holder does not serve connections'));\n    };\n    EmptyConnectionHolder.prototype.releaseConnection = function () {\n        return Promise.resolve();\n    };\n    EmptyConnectionHolder.prototype.close = function () {\n        return Promise.resolve();\n    };\n    return EmptyConnectionHolder;\n}(ConnectionHolder));\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n * @private\n */\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;\n// eslint-disable-next-line handle-callback-err\nfunction ignoreError(error) { }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}