{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.constants,\n  ACCESS_MODE_READ = _a.ACCESS_MODE_READ,\n  FETCH_ALL = _a.FETCH_ALL,\n  assertString = neo4j_driver_core_1.internal.util.assertString;\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\nvar RESET = 0x0f; // 0000 1111 // RESET\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\nvar ROUTE = 0x66; // 0110 0110 // ROUTE\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\nvar PULL = 0x3f; // 0011 1111 // PULL\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\nvar NO_STATEMENT_ID = -1;\nvar RequestMessage = /** @class */function () {\n  function RequestMessage(signature, fields, toString) {\n    this.signature = signature;\n    this.fields = fields;\n    this.toString = toString;\n  }\n  /**\n   * Create a new INIT message.\n   * @param {string} clientName the client name.\n   * @param {Object} authToken the authentication token.\n   * @return {RequestMessage} new INIT message.\n   */\n  RequestMessage.init = function (clientName, authToken) {\n    return new RequestMessage(INIT, [clientName, authToken], function () {\n      return \"INIT \" + clientName + \" {...}\";\n    });\n  };\n  /**\n   * Create a new RUN message.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @return {RequestMessage} new RUN message.\n   */\n  RequestMessage.run = function (query, parameters) {\n    return new RequestMessage(RUN, [query, parameters], function () {\n      return \"RUN \" + query + \" \" + neo4j_driver_core_1.json.stringify(parameters);\n    });\n  };\n  /**\n   * Get a PULL_ALL message.\n   * @return {RequestMessage} the PULL_ALL message.\n   */\n  RequestMessage.pullAll = function () {\n    return PULL_ALL_MESSAGE;\n  };\n  /**\n   * Get a RESET message.\n   * @return {RequestMessage} the RESET message.\n   */\n  RequestMessage.reset = function () {\n    return RESET_MESSAGE;\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {Object} authToken the authentication token.\n   * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n  RequestMessage.hello = function (userAgent, authToken, routing) {\n    if (routing === void 0) {\n      routing = null;\n    }\n    var metadata = Object.assign({\n      user_agent: userAgent\n    }, authToken);\n    if (routing) {\n      metadata.routing = routing;\n    }\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO {user_agent: '\" + userAgent + \"', ...}\";\n    });\n  };\n  /**\n   * Create a new BEGIN message.\n   * @param {Bookmark} bookmark the bookmark.\n   * @param {TxConfig} txConfig the configuration.\n   * @param {string} database the database name.\n   * @param {string} mode the access mode.\n   * @param {string} impersonatedUser the impersonated user.\n   * @return {RequestMessage} new BEGIN message.\n   */\n  RequestMessage.begin = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmark = _b.bookmark,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser;\n    var metadata = buildTxMetadata(bookmark, txConfig, database, mode, impersonatedUser);\n    return new RequestMessage(BEGIN, [metadata], function () {\n      return \"BEGIN \" + neo4j_driver_core_1.json.stringify(metadata);\n    });\n  };\n  /**\n   * Get a COMMIT message.\n   * @return {RequestMessage} the COMMIT message.\n   */\n  RequestMessage.commit = function () {\n    return COMMIT_MESSAGE;\n  };\n  /**\n   * Get a ROLLBACK message.\n   * @return {RequestMessage} the ROLLBACK message.\n   */\n  RequestMessage.rollback = function () {\n    return ROLLBACK_MESSAGE;\n  };\n  /**\n   * Create a new RUN message with additional metadata.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @param {Bookmark} bookmark the bookmark.\n   * @param {TxConfig} txConfig the configuration.\n   * @param {string} database the database name.\n   * @param {string} mode the access mode.\n   * @param {string} impersonatedUser the impersonated user.\n   * @return {RequestMessage} new RUN message with additional metadata.\n   */\n  RequestMessage.runWithMetadata = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmark = _b.bookmark,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser;\n    var metadata = buildTxMetadata(bookmark, txConfig, database, mode, impersonatedUser);\n    return new RequestMessage(RUN, [query, parameters, metadata], function () {\n      return \"RUN \" + query + \" \" + neo4j_driver_core_1.json.stringify(parameters) + \" \" + neo4j_driver_core_1.json.stringify(metadata);\n    });\n  };\n  /**\n   * Get a GOODBYE message.\n   * @return {RequestMessage} the GOODBYE message.\n   */\n  RequestMessage.goodbye = function () {\n    return GOODBYE_MESSAGE;\n  };\n  /**\n   * Generates a new PULL message with additional metadata.\n   * @param {Integer|number} stmtId\n   * @param {Integer|number} n\n   * @return {RequestMessage} the PULL message.\n   */\n  RequestMessage.pull = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.stmtId,\n      stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,\n      _d = _b.n,\n      n = _d === void 0 ? FETCH_ALL : _d;\n    var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n    return new RequestMessage(PULL, [metadata], function () {\n      return \"PULL \" + neo4j_driver_core_1.json.stringify(metadata);\n    });\n  };\n  /**\n   * Generates a new DISCARD message with additional metadata.\n   * @param {Integer|number} stmtId\n   * @param {Integer|number} n\n   * @return {RequestMessage} the PULL message.\n   */\n  RequestMessage.discard = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.stmtId,\n      stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,\n      _d = _b.n,\n      n = _d === void 0 ? FETCH_ALL : _d;\n    var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n    return new RequestMessage(DISCARD, [metadata], function () {\n      return \"DISCARD \" + neo4j_driver_core_1.json.stringify(metadata);\n    });\n  };\n  /**\n   * Generate the ROUTE message, this message is used to fetch the routing table from the server\n   *\n   * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n   * @param {string[]} bookmarks The list of the bookmark should be used\n   * @param {string} databaseName The name of the database to get the routing table for.\n   * @return {RequestMessage} the ROUTE message.\n   */\n  RequestMessage.route = function (routingContext, bookmarks, databaseName) {\n    if (routingContext === void 0) {\n      routingContext = {};\n    }\n    if (bookmarks === void 0) {\n      bookmarks = [];\n    }\n    if (databaseName === void 0) {\n      databaseName = null;\n    }\n    return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {\n      return \"ROUTE \" + neo4j_driver_core_1.json.stringify(routingContext) + \" \" + neo4j_driver_core_1.json.stringify(bookmarks) + \" \" + databaseName;\n    });\n  };\n  /**\n   * Generate the ROUTE message, this message is used to fetch the routing table from the server\n   *\n   * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n   * @param {string[]} bookmarks The list of the bookmark should be used\n   * @param {object} databaseContext The context inforamtion of the database to get the routing table for.\n   * @param {string} databaseContext.databaseName The name of the database to get the routing table.\n   * @param {string} databaseContext.impersonatedUser The name of the user to impersonation when getting the routing table.\n   * @return {RequestMessage} the ROUTE message.\n   */\n  RequestMessage.routeV4x4 = function (routingContext, bookmarks, databaseContext) {\n    if (routingContext === void 0) {\n      routingContext = {};\n    }\n    if (bookmarks === void 0) {\n      bookmarks = [];\n    }\n    if (databaseContext === void 0) {\n      databaseContext = {};\n    }\n    var dbContext = {};\n    if (databaseContext.databaseName) {\n      dbContext.db = databaseContext.databaseName;\n    }\n    if (databaseContext.impersonatedUser) {\n      dbContext.imp_user = databaseContext.impersonatedUser;\n    }\n    return new RequestMessage(ROUTE, [routingContext, bookmarks, dbContext], function () {\n      return \"ROUTE \" + neo4j_driver_core_1.json.stringify(routingContext) + \" \" + neo4j_driver_core_1.json.stringify(bookmarks) + \" \" + neo4j_driver_core_1.json.stringify(dbContext);\n    });\n  };\n  return RequestMessage;\n}();\nexports.default = RequestMessage;\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmark} bookmark the bookmark.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} database the database name.\n * @param {string} mode the access mode.\n * @param {string} impersonatedUser the impersonated user mode.\n * @return {Object} a metadata object.\n */\nfunction buildTxMetadata(bookmark, txConfig, database, mode, impersonatedUser) {\n  var metadata = {};\n  if (!bookmark.isEmpty()) {\n    metadata.bookmarks = bookmark.values();\n  }\n  if (txConfig.timeout) {\n    metadata.tx_timeout = txConfig.timeout;\n  }\n  if (txConfig.metadata) {\n    metadata.tx_metadata = txConfig.metadata;\n  }\n  if (database) {\n    metadata.db = assertString(database, 'database');\n  }\n  if (impersonatedUser) {\n    metadata.imp_user = assertString(impersonatedUser, 'impersonatedUser');\n  }\n  if (mode === ACCESS_MODE_READ) {\n    metadata.mode = READ_MODE;\n  }\n  return metadata;\n}\n/**\n * Create an object that represents streaming metadata.\n * @param {Integer|number} stmtId The query id to stream its results.\n * @param {Integer|number} n The number of records to stream.\n * @returns {Object} a metadata object.\n */\nfunction buildStreamMetadata(stmtId, n) {\n  var metadata = {\n    n: (0, neo4j_driver_core_1.int)(n)\n  };\n  if (stmtId !== NO_STATEMENT_ID) {\n    metadata.qid = (0, neo4j_driver_core_1.int)(stmtId);\n  }\n  return metadata;\n}\n// constants for messages that never change\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () {\n  return 'PULL_ALL';\n});\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () {\n  return 'RESET';\n});\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () {\n  return 'COMMIT';\n});\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () {\n  return 'ROLLBACK';\n});\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () {\n  return 'GOODBYE';\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","neo4j_driver_core_1","require","_a","internal","constants","ACCESS_MODE_READ","FETCH_ALL","assertString","util","INIT","ACK_FAILURE","RESET","RUN","DISCARD_ALL","PULL_ALL","HELLO","GOODBYE","BEGIN","COMMIT","ROLLBACK","ROUTE","DISCARD","PULL","READ_MODE","NO_STATEMENT_ID","RequestMessage","signature","fields","toString","init","clientName","authToken","run","query","parameters","json","stringify","pullAll","PULL_ALL_MESSAGE","reset","RESET_MESSAGE","hello","userAgent","routing","metadata","assign","user_agent","begin","_b","bookmark","txConfig","database","mode","impersonatedUser","buildTxMetadata","commit","COMMIT_MESSAGE","rollback","ROLLBACK_MESSAGE","runWithMetadata","goodbye","GOODBYE_MESSAGE","pull","_c","stmtId","_d","n","buildStreamMetadata","undefined","discard","route","routingContext","bookmarks","databaseName","routeV4x4","databaseContext","dbContext","db","imp_user","default","isEmpty","values","timeout","tx_timeout","tx_metadata","int","qid"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-bolt-connection/lib/bolt/request-message.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_READ = _a.ACCESS_MODE_READ, FETCH_ALL = _a.FETCH_ALL, assertString = neo4j_driver_core_1.internal.util.assertString;\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\nvar RESET = 0x0f; // 0000 1111 // RESET\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\nvar ROUTE = 0x66; // 0110 0110 // ROUTE\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\nvar PULL = 0x3f; // 0011 1111 // PULL\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\nvar NO_STATEMENT_ID = -1;\nvar RequestMessage = /** @class */ (function () {\n    function RequestMessage(signature, fields, toString) {\n        this.signature = signature;\n        this.fields = fields;\n        this.toString = toString;\n    }\n    /**\n     * Create a new INIT message.\n     * @param {string} clientName the client name.\n     * @param {Object} authToken the authentication token.\n     * @return {RequestMessage} new INIT message.\n     */\n    RequestMessage.init = function (clientName, authToken) {\n        return new RequestMessage(INIT, [clientName, authToken], function () { return \"INIT \" + clientName + \" {...}\"; });\n    };\n    /**\n     * Create a new RUN message.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @return {RequestMessage} new RUN message.\n     */\n    RequestMessage.run = function (query, parameters) {\n        return new RequestMessage(RUN, [query, parameters], function () { return \"RUN \" + query + \" \" + neo4j_driver_core_1.json.stringify(parameters); });\n    };\n    /**\n     * Get a PULL_ALL message.\n     * @return {RequestMessage} the PULL_ALL message.\n     */\n    RequestMessage.pullAll = function () {\n        return PULL_ALL_MESSAGE;\n    };\n    /**\n     * Get a RESET message.\n     * @return {RequestMessage} the RESET message.\n     */\n    RequestMessage.reset = function () {\n        return RESET_MESSAGE;\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {Object} authToken the authentication token.\n     * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello = function (userAgent, authToken, routing) {\n        if (routing === void 0) { routing = null; }\n        var metadata = Object.assign({ user_agent: userAgent }, authToken);\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO {user_agent: '\" + userAgent + \"', ...}\"; });\n    };\n    /**\n     * Create a new BEGIN message.\n     * @param {Bookmark} bookmark the bookmark.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} database the database name.\n     * @param {string} mode the access mode.\n     * @param {string} impersonatedUser the impersonated user.\n     * @return {RequestMessage} new BEGIN message.\n     */\n    RequestMessage.begin = function (_a) {\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser;\n        var metadata = buildTxMetadata(bookmark, txConfig, database, mode, impersonatedUser);\n        return new RequestMessage(BEGIN, [metadata], function () { return \"BEGIN \" + neo4j_driver_core_1.json.stringify(metadata); });\n    };\n    /**\n     * Get a COMMIT message.\n     * @return {RequestMessage} the COMMIT message.\n     */\n    RequestMessage.commit = function () {\n        return COMMIT_MESSAGE;\n    };\n    /**\n     * Get a ROLLBACK message.\n     * @return {RequestMessage} the ROLLBACK message.\n     */\n    RequestMessage.rollback = function () {\n        return ROLLBACK_MESSAGE;\n    };\n    /**\n     * Create a new RUN message with additional metadata.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Bookmark} bookmark the bookmark.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} database the database name.\n     * @param {string} mode the access mode.\n     * @param {string} impersonatedUser the impersonated user.\n     * @return {RequestMessage} new RUN message with additional metadata.\n     */\n    RequestMessage.runWithMetadata = function (query, parameters, _a) {\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser;\n        var metadata = buildTxMetadata(bookmark, txConfig, database, mode, impersonatedUser);\n        return new RequestMessage(RUN, [query, parameters, metadata], function () {\n            return \"RUN \" + query + \" \" + neo4j_driver_core_1.json.stringify(parameters) + \" \" + neo4j_driver_core_1.json.stringify(metadata);\n        });\n    };\n    /**\n     * Get a GOODBYE message.\n     * @return {RequestMessage} the GOODBYE message.\n     */\n    RequestMessage.goodbye = function () {\n        return GOODBYE_MESSAGE;\n    };\n    /**\n     * Generates a new PULL message with additional metadata.\n     * @param {Integer|number} stmtId\n     * @param {Integer|number} n\n     * @return {RequestMessage} the PULL message.\n     */\n    RequestMessage.pull = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;\n        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n        return new RequestMessage(PULL, [metadata], function () { return \"PULL \" + neo4j_driver_core_1.json.stringify(metadata); });\n    };\n    /**\n     * Generates a new DISCARD message with additional metadata.\n     * @param {Integer|number} stmtId\n     * @param {Integer|number} n\n     * @return {RequestMessage} the PULL message.\n     */\n    RequestMessage.discard = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;\n        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n        return new RequestMessage(DISCARD, [metadata], function () { return \"DISCARD \" + neo4j_driver_core_1.json.stringify(metadata); });\n    };\n    /**\n     * Generate the ROUTE message, this message is used to fetch the routing table from the server\n     *\n     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n     * @param {string[]} bookmarks The list of the bookmark should be used\n     * @param {string} databaseName The name of the database to get the routing table for.\n     * @return {RequestMessage} the ROUTE message.\n     */\n    RequestMessage.route = function (routingContext, bookmarks, databaseName) {\n        if (routingContext === void 0) { routingContext = {}; }\n        if (bookmarks === void 0) { bookmarks = []; }\n        if (databaseName === void 0) { databaseName = null; }\n        return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {\n            return \"ROUTE \" + neo4j_driver_core_1.json.stringify(routingContext) + \" \" + neo4j_driver_core_1.json.stringify(bookmarks) + \" \" + databaseName;\n        });\n    };\n    /**\n     * Generate the ROUTE message, this message is used to fetch the routing table from the server\n     *\n     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n     * @param {string[]} bookmarks The list of the bookmark should be used\n     * @param {object} databaseContext The context inforamtion of the database to get the routing table for.\n     * @param {string} databaseContext.databaseName The name of the database to get the routing table.\n     * @param {string} databaseContext.impersonatedUser The name of the user to impersonation when getting the routing table.\n     * @return {RequestMessage} the ROUTE message.\n     */\n    RequestMessage.routeV4x4 = function (routingContext, bookmarks, databaseContext) {\n        if (routingContext === void 0) { routingContext = {}; }\n        if (bookmarks === void 0) { bookmarks = []; }\n        if (databaseContext === void 0) { databaseContext = {}; }\n        var dbContext = {};\n        if (databaseContext.databaseName) {\n            dbContext.db = databaseContext.databaseName;\n        }\n        if (databaseContext.impersonatedUser) {\n            dbContext.imp_user = databaseContext.impersonatedUser;\n        }\n        return new RequestMessage(ROUTE, [routingContext, bookmarks, dbContext], function () {\n            return \"ROUTE \" + neo4j_driver_core_1.json.stringify(routingContext) + \" \" + neo4j_driver_core_1.json.stringify(bookmarks) + \" \" + neo4j_driver_core_1.json.stringify(dbContext);\n        });\n    };\n    return RequestMessage;\n}());\nexports.default = RequestMessage;\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmark} bookmark the bookmark.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} database the database name.\n * @param {string} mode the access mode.\n * @param {string} impersonatedUser the impersonated user mode.\n * @return {Object} a metadata object.\n */\nfunction buildTxMetadata(bookmark, txConfig, database, mode, impersonatedUser) {\n    var metadata = {};\n    if (!bookmark.isEmpty()) {\n        metadata.bookmarks = bookmark.values();\n    }\n    if (txConfig.timeout) {\n        metadata.tx_timeout = txConfig.timeout;\n    }\n    if (txConfig.metadata) {\n        metadata.tx_metadata = txConfig.metadata;\n    }\n    if (database) {\n        metadata.db = assertString(database, 'database');\n    }\n    if (impersonatedUser) {\n        metadata.imp_user = assertString(impersonatedUser, 'impersonatedUser');\n    }\n    if (mode === ACCESS_MODE_READ) {\n        metadata.mode = READ_MODE;\n    }\n    return metadata;\n}\n/**\n * Create an object that represents streaming metadata.\n * @param {Integer|number} stmtId The query id to stream its results.\n * @param {Integer|number} n The number of records to stream.\n * @returns {Object} a metadata object.\n */\nfunction buildStreamMetadata(stmtId, n) {\n    var metadata = { n: (0, neo4j_driver_core_1.int)(n) };\n    if (stmtId !== NO_STATEMENT_ID) {\n        metadata.qid = (0, neo4j_driver_core_1.int)(stmtId);\n    }\n    return metadata;\n}\n// constants for messages that never change\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () { return 'PULL_ALL'; });\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () { return 'RESET'; });\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () { return 'COMMIT'; });\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () { return 'ROLLBACK'; });\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () { return 'GOODBYE'; });\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}