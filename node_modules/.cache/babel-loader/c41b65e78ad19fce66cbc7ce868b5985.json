{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar pool_config_1 = __importDefault(require(\"./pool-config\"));\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar Logger = neo4j_driver_core_1.internal.logger.Logger;\nvar Pool = /** @class */function () {\n  /**\n   * @param {function(address: ServerAddress, function(address: ServerAddress, resource: object): Promise<object>): Promise<object>} create\n   *                an allocation function that creates a promise with a new resource. It's given an address for which to\n   *                allocate the connection and a function that will return the resource to the pool if invoked, which is\n   *                meant to be called on .dispose or .close or whatever mechanism the resource uses to finalize.\n   * @param {function(resource: object): Promise<void>} destroy\n   *                called with the resource when it is evicted from this pool\n   * @param {function(resource: object): boolean} validate\n   *                called at various times (like when an instance is acquired and when it is returned.\n   *                If this returns false, the resource will be evicted\n   * @param {function(resource: object, observer: { onError }): void} installIdleObserver\n   *                called when the resource is released back to pool\n   * @param {function(resource: object): void} removeIdleObserver\n   *                called when the resource is acquired from the pool\n   * @param {PoolConfig} config configuration for the new driver.\n   * @param {Logger} log the driver logger.\n   */\n  function Pool(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.create,\n      create = _c === void 0 ? function (address, release) {\n        return Promise.resolve();\n      } : _c,\n      _d = _b.destroy,\n      destroy = _d === void 0 ? function (conn) {\n        return Promise.resolve();\n      } : _d,\n      _e = _b.validate,\n      validate = _e === void 0 ? function (conn) {\n        return true;\n      } : _e,\n      _f = _b.installIdleObserver,\n      installIdleObserver = _f === void 0 ? function (conn, observer) {} : _f,\n      _g = _b.removeIdleObserver,\n      removeIdleObserver = _g === void 0 ? function (conn) {} : _g,\n      _h = _b.config,\n      config = _h === void 0 ? pool_config_1.default.defaultConfig() : _h,\n      _j = _b.log,\n      log = _j === void 0 ? Logger.noOp() : _j;\n    this._create = create;\n    this._destroy = destroy;\n    this._validate = validate;\n    this._installIdleObserver = installIdleObserver;\n    this._removeIdleObserver = removeIdleObserver;\n    this._maxSize = config.maxSize;\n    this._acquisitionTimeout = config.acquisitionTimeout;\n    this._pools = {};\n    this._pendingCreates = {};\n    this._acquireRequests = {};\n    this._activeResourceCounts = {};\n    this._poolState = {};\n    this._release = this._release.bind(this);\n    this._log = log;\n    this._closed = false;\n  }\n  /**\n   * Acquire and idle resource fom the pool or create a new one.\n   * @param {ServerAddress} address the address for which we're acquiring.\n   * @return {Object} resource that is ready to use.\n   */\n  Pool.prototype.acquire = function (address) {\n    var _this = this;\n    return this._acquire(address).then(function (resource) {\n      var key = address.asKey();\n      if (resource) {\n        // New or existing resource acquired\n        return resource;\n      }\n      // We're out of resources and will try to acquire later on when an existing resource is released.\n      var allRequests = _this._acquireRequests;\n      var requests = allRequests[key];\n      if (!requests) {\n        allRequests[key] = [];\n      }\n      return new Promise(function (resolve, reject) {\n        var request;\n        var timeoutId = setTimeout(function () {\n          // acquisition timeout fired\n          // remove request from the queue of pending requests, if it's still there\n          // request might've been taken out by the release operation\n          var pendingRequests = allRequests[key];\n          if (pendingRequests) {\n            allRequests[key] = pendingRequests.filter(function (item) {\n              return item !== request;\n            });\n          }\n          if (request.isCompleted()) {\n            // request already resolved/rejected by the release operation; nothing to do\n          } else {\n            // request is still pending and needs to be failed\n            var activeCount = _this.activeResourceCount(address);\n            var idleCount = _this.has(address) ? _this._pools[key].length : 0;\n            request.reject((0, neo4j_driver_core_1.newError)(\"Connection acquisition timed out in \" + _this._acquisitionTimeout + \" ms. Pool status: Active conn count = \" + activeCount + \", Idle conn count = \" + idleCount + \".\"));\n          }\n        }, _this._acquisitionTimeout);\n        request = new PendingRequest(key, resolve, reject, timeoutId, _this._log);\n        allRequests[key].push(request);\n      });\n    });\n  };\n  /**\n   * Destroy all idle resources for the given address.\n   * @param {ServerAddress} address the address of the server to purge its pool.\n   * @returns {Promise<void>} A promise that is resolved when the resources are purged\n   */\n  Pool.prototype.purge = function (address) {\n    return this._purgeKey(address.asKey());\n  };\n  /**\n   * Destroy all idle resources in this pool.\n   * @returns {Promise<void>} A promise that is resolved when the resources are purged\n   */\n  Pool.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this._closed = true;\n            return [4 /*yield*/, Promise.all(Object.keys(this._pools).map(function (key) {\n              return _this._purgeKey(key);\n            }))];\n          case 1:\n            /**\n             * The lack of Promise consuming was making the driver do not close properly in the scenario\n             * captured at result.test.js:it('should handle missing onCompleted'). The test was timing out\n             * because while wainting for the driver close.\n             *\n             * Consuming the Promise.all or by calling then or by awaiting in the result inside this method solved\n             * the issue somehow.\n             *\n             * PS: the return of this method was already awaited at PooledConnectionProvider.close, but the await bellow\n             * seems to be need also.\n             */\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Keep the idle resources for the provided addresses and purge the rest.\n   * @returns {Promise<void>} A promise that is resolved when the other resources are purged\n   */\n  Pool.prototype.keepAll = function (addresses) {\n    var _this = this;\n    var keysToKeep = addresses.map(function (a) {\n      return a.asKey();\n    });\n    var keysPresent = Object.keys(this._pools);\n    var keysToPurge = keysPresent.filter(function (k) {\n      return keysToKeep.indexOf(k) === -1;\n    });\n    return Promise.all(keysToPurge.map(function (key) {\n      return _this._purgeKey(key);\n    }));\n  };\n  /**\n   * Check if this pool contains resources for the given address.\n   * @param {ServerAddress} address the address of the server to check.\n   * @return {boolean} `true` when pool contains entries for the given key, <code>false</code> otherwise.\n   */\n  Pool.prototype.has = function (address) {\n    return address.asKey() in this._pools;\n  };\n  /**\n   * Get count of active (checked out of the pool) resources for the given key.\n   * @param {ServerAddress} address the address of the server to check.\n   * @return {number} count of resources acquired by clients.\n   */\n  Pool.prototype.activeResourceCount = function (address) {\n    return this._activeResourceCounts[address.asKey()] || 0;\n  };\n  Pool.prototype._acquire = function (address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, pool, poolState, resource_1, numConnections, resource;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._closed) {\n              throw (0, neo4j_driver_core_1.newError)('Pool is closed, it is no more able to serve requests.');\n            }\n            key = address.asKey();\n            pool = this._pools[key];\n            poolState = this._poolState[key];\n            if (!pool) {\n              pool = [];\n              poolState = new PoolState();\n              this._pools[key] = pool;\n              this._pendingCreates[key] = 0;\n              this._poolState[key] = poolState;\n            }\n            _a.label = 1;\n          case 1:\n            if (!pool.length) return [3 /*break*/, 5];\n            resource_1 = pool.pop();\n            if (!this._validate(resource_1)) return [3 /*break*/, 2];\n            if (this._removeIdleObserver) {\n              this._removeIdleObserver(resource_1);\n            }\n            // idle resource is valid and can be acquired\n            resourceAcquired(key, this._activeResourceCounts);\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource_1 + \" acquired from the pool \" + key);\n            }\n            return [2 /*return*/, resource_1];\n          case 2:\n            return [4 /*yield*/, this._destroy(resource_1)];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            return [3 /*break*/, 1];\n          case 5:\n            // Ensure requested max pool size\n            if (this._maxSize > 0) {\n              numConnections = this.activeResourceCount(address) + this._pendingCreates[key];\n              if (numConnections >= this._maxSize) {\n                // Will put this request in queue instead since the pool is full\n                return [2 /*return*/, null];\n              }\n            }\n            // there exist no idle valid resources, create a new one for acquisition\n            // Keep track of how many pending creates there are to avoid making too many connections.\n            this._pendingCreates[key] = this._pendingCreates[key] + 1;\n            _a.label = 6;\n          case 6:\n            _a.trys.push([6,, 8, 9]);\n            return [4 /*yield*/, this._create(address, function (address, resource) {\n              return _this._release(poolState, address, resource);\n            })];\n          case 7:\n            // Invoke callback that creates actual connection\n            resource = _a.sent();\n            resourceAcquired(key, this._activeResourceCounts);\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource + \" created for the pool \" + key);\n            }\n            return [3 /*break*/, 9];\n          case 8:\n            this._pendingCreates[key] = this._pendingCreates[key] - 1;\n            return [7 /*endfinally*/];\n          case 9:\n            return [2 /*return*/, resource];\n        }\n      });\n    });\n  };\n  Pool.prototype._release = function (poolState, address, resource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, pool;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            key = address.asKey();\n            pool = this._pools[key];\n            if (!(pool && poolState.isActive())) return [3 /*break*/, 4];\n            if (!!this._validate(resource)) return [3 /*break*/, 2];\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource + \" destroyed and can't be released to the pool \" + key + \" because it is not functional\");\n            }\n            return [4 /*yield*/, this._destroy(resource)];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            if (this._installIdleObserver) {\n              this._installIdleObserver(resource, {\n                onError: function onError(error) {\n                  _this._log.debug(\"Idle connection \" + resource + \" destroyed because of error: \" + error);\n                  var pool = _this._pools[key];\n                  if (pool) {\n                    _this._pools[key] = pool.filter(function (r) {\n                      return r !== resource;\n                    });\n                  }\n                  // let's not care about background clean-ups due to errors but just trigger the destroy\n                  // process for the resource, we especially catch any errors and ignore them to avoid\n                  // unhandled promise rejection warnings\n                  _this._destroy(resource).catch(function () {});\n                }\n              });\n            }\n            pool.push(resource);\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource + \" released to the pool \" + key);\n            }\n            _a.label = 3;\n          case 3:\n            return [3 /*break*/, 6];\n          case 4:\n            // key has been purged, don't put it back, just destroy the resource\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource + \" destroyed and can't be released to the pool \" + key + \" because pool has been purged\");\n            }\n            return [4 /*yield*/, this._destroy(resource)];\n          case 5:\n            _a.sent();\n            _a.label = 6;\n          case 6:\n            resourceReleased(key, this._activeResourceCounts);\n            this._processPendingAcquireRequests(address);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Pool.prototype._purgeKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pool, poolState, resource;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            pool = this._pools[key] || [];\n            poolState = this._poolState[key] || new PoolState();\n            _a.label = 1;\n          case 1:\n            if (!pool.length) return [3 /*break*/, 3];\n            resource = pool.pop();\n            if (this._removeIdleObserver) {\n              this._removeIdleObserver(resource);\n            }\n            return [4 /*yield*/, this._destroy(resource)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 1];\n          case 3:\n            poolState.close();\n            delete this._pools[key];\n            delete this._poolState[key];\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Pool.prototype._processPendingAcquireRequests = function (address) {\n    var _this = this;\n    var key = address.asKey();\n    var requests = this._acquireRequests[key];\n    var poolState = this._poolState[key];\n    if (requests) {\n      var pendingRequest_1 = requests.shift(); // pop a pending acquire request\n      if (pendingRequest_1) {\n        this._acquire(address).catch(function (error) {\n          // failed to acquire/create a new connection to resolve the pending acquire request\n          // propagate the error by failing the pending request\n          pendingRequest_1.reject(error);\n          return null;\n        }).then(function (resource) {\n          if (resource) {\n            // managed to acquire a valid resource from the pool\n            if (pendingRequest_1.isCompleted()) {\n              // request has been completed, most likely failed by a timeout\n              // return the acquired resource back to the pool\n              _this._release(poolState, address, resource);\n            } else {\n              // request is still pending and can be resolved with the newly acquired resource\n              pendingRequest_1.resolve(resource); // resolve the pending request with the acquired resource\n            }\n          }\n        });\n      } else {\n        delete this._acquireRequests[key];\n      }\n    }\n  };\n  return Pool;\n}();\n/**\n * Increment active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\nfunction resourceAcquired(key, activeResourceCounts) {\n  var currentCount = activeResourceCounts[key] || 0;\n  activeResourceCounts[key] = currentCount + 1;\n}\n/**\n * Decrement active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\nfunction resourceReleased(key, activeResourceCounts) {\n  var currentCount = activeResourceCounts[key] || 0;\n  var nextCount = currentCount - 1;\n  if (nextCount > 0) {\n    activeResourceCounts[key] = nextCount;\n  } else {\n    delete activeResourceCounts[key];\n  }\n}\nvar PendingRequest = /** @class */function () {\n  function PendingRequest(key, resolve, reject, timeoutId, log) {\n    this._key = key;\n    this._resolve = resolve;\n    this._reject = reject;\n    this._timeoutId = timeoutId;\n    this._log = log;\n    this._completed = false;\n  }\n  PendingRequest.prototype.isCompleted = function () {\n    return this._completed;\n  };\n  PendingRequest.prototype.resolve = function (resource) {\n    if (this._completed) {\n      return;\n    }\n    this._completed = true;\n    clearTimeout(this._timeoutId);\n    if (this._log.isDebugEnabled()) {\n      this._log.debug(resource + \" acquired from the pool \" + this._key);\n    }\n    this._resolve(resource);\n  };\n  PendingRequest.prototype.reject = function (error) {\n    if (this._completed) {\n      return;\n    }\n    this._completed = true;\n    clearTimeout(this._timeoutId);\n    this._reject(error);\n  };\n  return PendingRequest;\n}();\nvar PoolState = /** @class */function () {\n  function PoolState() {\n    this._active = true;\n  }\n  PoolState.prototype.isActive = function () {\n    return this._active;\n  };\n  PoolState.prototype.close = function () {\n    this._active = false;\n  };\n  return PoolState;\n}();\nexports.default = Pool;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__importDefault","mod","__esModule","Object","defineProperty","exports","pool_config_1","require","neo4j_driver_core_1","Logger","internal","logger","Pool","_a","_b","_c","create","address","release","_d","destroy","conn","_e","validate","_f","installIdleObserver","observer","_g","removeIdleObserver","_h","config","default","defaultConfig","_j","log","noOp","_create","_destroy","_validate","_installIdleObserver","_removeIdleObserver","_maxSize","maxSize","_acquisitionTimeout","acquisitionTimeout","_pools","_pendingCreates","_acquireRequests","_activeResourceCounts","_poolState","_release","bind","_log","_closed","prototype","acquire","_this","_acquire","resource","key","asKey","allRequests","requests","request","timeoutId","setTimeout","pendingRequests","filter","item","isCompleted","activeCount","activeResourceCount","idleCount","has","newError","PendingRequest","purge","_purgeKey","close","all","keys","map","keepAll","addresses","keysToKeep","a","keysPresent","keysToPurge","k","indexOf","pool","poolState","resource_1","numConnections","PoolState","resourceAcquired","isDebugEnabled","debug","isActive","onError","error","r","catch","resourceReleased","_processPendingAcquireRequests","pendingRequest_1","shift","activeResourceCounts","currentCount","nextCount","_key","_resolve","_reject","_timeoutId","_completed","clearTimeout","_active"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-bolt-connection/lib/pool/pool.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pool_config_1 = __importDefault(require(\"./pool-config\"));\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar Logger = neo4j_driver_core_1.internal.logger.Logger;\nvar Pool = /** @class */ (function () {\n    /**\n     * @param {function(address: ServerAddress, function(address: ServerAddress, resource: object): Promise<object>): Promise<object>} create\n     *                an allocation function that creates a promise with a new resource. It's given an address for which to\n     *                allocate the connection and a function that will return the resource to the pool if invoked, which is\n     *                meant to be called on .dispose or .close or whatever mechanism the resource uses to finalize.\n     * @param {function(resource: object): Promise<void>} destroy\n     *                called with the resource when it is evicted from this pool\n     * @param {function(resource: object): boolean} validate\n     *                called at various times (like when an instance is acquired and when it is returned.\n     *                If this returns false, the resource will be evicted\n     * @param {function(resource: object, observer: { onError }): void} installIdleObserver\n     *                called when the resource is released back to pool\n     * @param {function(resource: object): void} removeIdleObserver\n     *                called when the resource is acquired from the pool\n     * @param {PoolConfig} config configuration for the new driver.\n     * @param {Logger} log the driver logger.\n     */\n    function Pool(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.create, create = _c === void 0 ? function (address, release) { return Promise.resolve(); } : _c, _d = _b.destroy, destroy = _d === void 0 ? function (conn) { return Promise.resolve(); } : _d, _e = _b.validate, validate = _e === void 0 ? function (conn) { return true; } : _e, _f = _b.installIdleObserver, installIdleObserver = _f === void 0 ? function (conn, observer) { } : _f, _g = _b.removeIdleObserver, removeIdleObserver = _g === void 0 ? function (conn) { } : _g, _h = _b.config, config = _h === void 0 ? pool_config_1.default.defaultConfig() : _h, _j = _b.log, log = _j === void 0 ? Logger.noOp() : _j;\n        this._create = create;\n        this._destroy = destroy;\n        this._validate = validate;\n        this._installIdleObserver = installIdleObserver;\n        this._removeIdleObserver = removeIdleObserver;\n        this._maxSize = config.maxSize;\n        this._acquisitionTimeout = config.acquisitionTimeout;\n        this._pools = {};\n        this._pendingCreates = {};\n        this._acquireRequests = {};\n        this._activeResourceCounts = {};\n        this._poolState = {};\n        this._release = this._release.bind(this);\n        this._log = log;\n        this._closed = false;\n    }\n    /**\n     * Acquire and idle resource fom the pool or create a new one.\n     * @param {ServerAddress} address the address for which we're acquiring.\n     * @return {Object} resource that is ready to use.\n     */\n    Pool.prototype.acquire = function (address) {\n        var _this = this;\n        return this._acquire(address).then(function (resource) {\n            var key = address.asKey();\n            if (resource) {\n                // New or existing resource acquired\n                return resource;\n            }\n            // We're out of resources and will try to acquire later on when an existing resource is released.\n            var allRequests = _this._acquireRequests;\n            var requests = allRequests[key];\n            if (!requests) {\n                allRequests[key] = [];\n            }\n            return new Promise(function (resolve, reject) {\n                var request;\n                var timeoutId = setTimeout(function () {\n                    // acquisition timeout fired\n                    // remove request from the queue of pending requests, if it's still there\n                    // request might've been taken out by the release operation\n                    var pendingRequests = allRequests[key];\n                    if (pendingRequests) {\n                        allRequests[key] = pendingRequests.filter(function (item) { return item !== request; });\n                    }\n                    if (request.isCompleted()) {\n                        // request already resolved/rejected by the release operation; nothing to do\n                    }\n                    else {\n                        // request is still pending and needs to be failed\n                        var activeCount = _this.activeResourceCount(address);\n                        var idleCount = _this.has(address) ? _this._pools[key].length : 0;\n                        request.reject((0, neo4j_driver_core_1.newError)(\"Connection acquisition timed out in \" + _this._acquisitionTimeout + \" ms. Pool status: Active conn count = \" + activeCount + \", Idle conn count = \" + idleCount + \".\"));\n                    }\n                }, _this._acquisitionTimeout);\n                request = new PendingRequest(key, resolve, reject, timeoutId, _this._log);\n                allRequests[key].push(request);\n            });\n        });\n    };\n    /**\n     * Destroy all idle resources for the given address.\n     * @param {ServerAddress} address the address of the server to purge its pool.\n     * @returns {Promise<void>} A promise that is resolved when the resources are purged\n     */\n    Pool.prototype.purge = function (address) {\n        return this._purgeKey(address.asKey());\n    };\n    /**\n     * Destroy all idle resources in this pool.\n     * @returns {Promise<void>} A promise that is resolved when the resources are purged\n     */\n    Pool.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._closed = true;\n                        return [4 /*yield*/, Promise.all(Object.keys(this._pools).map(function (key) { return _this._purgeKey(key); }))];\n                    case 1: \n                    /**\n                     * The lack of Promise consuming was making the driver do not close properly in the scenario\n                     * captured at result.test.js:it('should handle missing onCompleted'). The test was timing out\n                     * because while wainting for the driver close.\n                     *\n                     * Consuming the Promise.all or by calling then or by awaiting in the result inside this method solved\n                     * the issue somehow.\n                     *\n                     * PS: the return of this method was already awaited at PooledConnectionProvider.close, but the await bellow\n                     * seems to be need also.\n                     */\n                    return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Keep the idle resources for the provided addresses and purge the rest.\n     * @returns {Promise<void>} A promise that is resolved when the other resources are purged\n     */\n    Pool.prototype.keepAll = function (addresses) {\n        var _this = this;\n        var keysToKeep = addresses.map(function (a) { return a.asKey(); });\n        var keysPresent = Object.keys(this._pools);\n        var keysToPurge = keysPresent.filter(function (k) { return keysToKeep.indexOf(k) === -1; });\n        return Promise.all(keysToPurge.map(function (key) { return _this._purgeKey(key); }));\n    };\n    /**\n     * Check if this pool contains resources for the given address.\n     * @param {ServerAddress} address the address of the server to check.\n     * @return {boolean} `true` when pool contains entries for the given key, <code>false</code> otherwise.\n     */\n    Pool.prototype.has = function (address) {\n        return address.asKey() in this._pools;\n    };\n    /**\n     * Get count of active (checked out of the pool) resources for the given key.\n     * @param {ServerAddress} address the address of the server to check.\n     * @return {number} count of resources acquired by clients.\n     */\n    Pool.prototype.activeResourceCount = function (address) {\n        return this._activeResourceCounts[address.asKey()] || 0;\n    };\n    Pool.prototype._acquire = function (address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var key, pool, poolState, resource_1, numConnections, resource;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._closed) {\n                            throw (0, neo4j_driver_core_1.newError)('Pool is closed, it is no more able to serve requests.');\n                        }\n                        key = address.asKey();\n                        pool = this._pools[key];\n                        poolState = this._poolState[key];\n                        if (!pool) {\n                            pool = [];\n                            poolState = new PoolState();\n                            this._pools[key] = pool;\n                            this._pendingCreates[key] = 0;\n                            this._poolState[key] = poolState;\n                        }\n                        _a.label = 1;\n                    case 1:\n                        if (!pool.length) return [3 /*break*/, 5];\n                        resource_1 = pool.pop();\n                        if (!this._validate(resource_1)) return [3 /*break*/, 2];\n                        if (this._removeIdleObserver) {\n                            this._removeIdleObserver(resource_1);\n                        }\n                        // idle resource is valid and can be acquired\n                        resourceAcquired(key, this._activeResourceCounts);\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource_1 + \" acquired from the pool \" + key);\n                        }\n                        return [2 /*return*/, resource_1];\n                    case 2: return [4 /*yield*/, this._destroy(resource_1)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [3 /*break*/, 1];\n                    case 5:\n                        // Ensure requested max pool size\n                        if (this._maxSize > 0) {\n                            numConnections = this.activeResourceCount(address) + this._pendingCreates[key];\n                            if (numConnections >= this._maxSize) {\n                                // Will put this request in queue instead since the pool is full\n                                return [2 /*return*/, null];\n                            }\n                        }\n                        // there exist no idle valid resources, create a new one for acquisition\n                        // Keep track of how many pending creates there are to avoid making too many connections.\n                        this._pendingCreates[key] = this._pendingCreates[key] + 1;\n                        _a.label = 6;\n                    case 6:\n                        _a.trys.push([6, , 8, 9]);\n                        return [4 /*yield*/, this._create(address, function (address, resource) { return _this._release(poolState, address, resource); })];\n                    case 7:\n                        // Invoke callback that creates actual connection\n                        resource = _a.sent();\n                        resourceAcquired(key, this._activeResourceCounts);\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource + \" created for the pool \" + key);\n                        }\n                        return [3 /*break*/, 9];\n                    case 8:\n                        this._pendingCreates[key] = this._pendingCreates[key] - 1;\n                        return [7 /*endfinally*/];\n                    case 9: return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    Pool.prototype._release = function (poolState, address, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var key, pool;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        key = address.asKey();\n                        pool = this._pools[key];\n                        if (!(pool && poolState.isActive())) return [3 /*break*/, 4];\n                        if (!!this._validate(resource)) return [3 /*break*/, 2];\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource + \" destroyed and can't be released to the pool \" + key + \" because it is not functional\");\n                        }\n                        return [4 /*yield*/, this._destroy(resource)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        if (this._installIdleObserver) {\n                            this._installIdleObserver(resource, {\n                                onError: function (error) {\n                                    _this._log.debug(\"Idle connection \" + resource + \" destroyed because of error: \" + error);\n                                    var pool = _this._pools[key];\n                                    if (pool) {\n                                        _this._pools[key] = pool.filter(function (r) { return r !== resource; });\n                                    }\n                                    // let's not care about background clean-ups due to errors but just trigger the destroy\n                                    // process for the resource, we especially catch any errors and ignore them to avoid\n                                    // unhandled promise rejection warnings\n                                    _this._destroy(resource).catch(function () { });\n                                }\n                            });\n                        }\n                        pool.push(resource);\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource + \" released to the pool \" + key);\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 6];\n                    case 4:\n                        // key has been purged, don't put it back, just destroy the resource\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource + \" destroyed and can't be released to the pool \" + key + \" because pool has been purged\");\n                        }\n                        return [4 /*yield*/, this._destroy(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        resourceReleased(key, this._activeResourceCounts);\n                        this._processPendingAcquireRequests(address);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Pool.prototype._purgeKey = function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var pool, poolState, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        pool = this._pools[key] || [];\n                        poolState = this._poolState[key] || new PoolState();\n                        _a.label = 1;\n                    case 1:\n                        if (!pool.length) return [3 /*break*/, 3];\n                        resource = pool.pop();\n                        if (this._removeIdleObserver) {\n                            this._removeIdleObserver(resource);\n                        }\n                        return [4 /*yield*/, this._destroy(resource)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 1];\n                    case 3:\n                        poolState.close();\n                        delete this._pools[key];\n                        delete this._poolState[key];\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Pool.prototype._processPendingAcquireRequests = function (address) {\n        var _this = this;\n        var key = address.asKey();\n        var requests = this._acquireRequests[key];\n        var poolState = this._poolState[key];\n        if (requests) {\n            var pendingRequest_1 = requests.shift(); // pop a pending acquire request\n            if (pendingRequest_1) {\n                this._acquire(address)\n                    .catch(function (error) {\n                    // failed to acquire/create a new connection to resolve the pending acquire request\n                    // propagate the error by failing the pending request\n                    pendingRequest_1.reject(error);\n                    return null;\n                })\n                    .then(function (resource) {\n                    if (resource) {\n                        // managed to acquire a valid resource from the pool\n                        if (pendingRequest_1.isCompleted()) {\n                            // request has been completed, most likely failed by a timeout\n                            // return the acquired resource back to the pool\n                            _this._release(poolState, address, resource);\n                        }\n                        else {\n                            // request is still pending and can be resolved with the newly acquired resource\n                            pendingRequest_1.resolve(resource); // resolve the pending request with the acquired resource\n                        }\n                    }\n                });\n            }\n            else {\n                delete this._acquireRequests[key];\n            }\n        }\n    };\n    return Pool;\n}());\n/**\n * Increment active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\nfunction resourceAcquired(key, activeResourceCounts) {\n    var currentCount = activeResourceCounts[key] || 0;\n    activeResourceCounts[key] = currentCount + 1;\n}\n/**\n * Decrement active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\nfunction resourceReleased(key, activeResourceCounts) {\n    var currentCount = activeResourceCounts[key] || 0;\n    var nextCount = currentCount - 1;\n    if (nextCount > 0) {\n        activeResourceCounts[key] = nextCount;\n    }\n    else {\n        delete activeResourceCounts[key];\n    }\n}\nvar PendingRequest = /** @class */ (function () {\n    function PendingRequest(key, resolve, reject, timeoutId, log) {\n        this._key = key;\n        this._resolve = resolve;\n        this._reject = reject;\n        this._timeoutId = timeoutId;\n        this._log = log;\n        this._completed = false;\n    }\n    PendingRequest.prototype.isCompleted = function () {\n        return this._completed;\n    };\n    PendingRequest.prototype.resolve = function (resource) {\n        if (this._completed) {\n            return;\n        }\n        this._completed = true;\n        clearTimeout(this._timeoutId);\n        if (this._log.isDebugEnabled()) {\n            this._log.debug(resource + \" acquired from the pool \" + this._key);\n        }\n        this._resolve(resource);\n    };\n    PendingRequest.prototype.reject = function (error) {\n        if (this._completed) {\n            return;\n        }\n        this._completed = true;\n        clearTimeout(this._timeoutId);\n        this._reject(error);\n    };\n    return PendingRequest;\n}());\nvar PoolState = /** @class */ (function () {\n    function PoolState() {\n        this._active = true;\n    }\n    PoolState.prototype.isActive = function () {\n        return this._active;\n    };\n    PoolState.prototype.close = function () {\n        this._active = false;\n    };\n    return PoolState;\n}());\nexports.default = Pool;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,SAASC,KAAKA,CAACC,KAAK,EAAE;IAAE,OAAOA,KAAK,YAAYH,CAAC,GAAGG,KAAK,GAAG,IAAIH,CAAC,CAAC,UAAUI,OAAO,EAAE;MAAEA,OAAO,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;EAAE;EAC3G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;IACvD,SAASC,SAASA,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACN,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQA,CAACR,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAIA,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACT,KAAK,CAAC,GAAGD,KAAK,CAACU,MAAM,CAACT,KAAK,CAAC,CAACW,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC;IAAE;IAC7GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACjB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAEU,IAAI,EAAE,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACD,IAAIO,WAAW,GAAI,IAAI,IAAI,IAAI,CAACA,WAAW,IAAK,UAAUlB,OAAO,EAAEmB,IAAI,EAAE;EACrE,IAAIC,CAAC,GAAG;MAAEC,KAAK,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAAA,KAAA,EAAW;QAAE,IAAIC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAMA,CAAC,CAAC,CAAC,CAAC;QAAE,OAAOA,CAAC,CAAC,CAAC,CAAC;MAAE,CAAC;MAAEC,IAAI,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEJ,CAAC;IAAEK,CAAC;EAChH,OAAOA,CAAC,GAAG;IAAEjB,IAAI,EAAEkB,IAAI,CAAC,CAAC,CAAC;IAAE,OAAO,EAAEA,IAAI,CAAC,CAAC,CAAC;IAAE,QAAQ,EAAEA,IAAI,CAAC,CAAC;EAAE,CAAC,EAAE,OAAOC,MAAM,KAAK,UAAU,KAAKF,CAAC,CAACE,MAAM,CAACC,QAAQ,CAAC,GAAG,YAAW;IAAE,OAAO,IAAI;EAAE,CAAC,CAAC,EAAEH,CAAC;EACxJ,SAASC,IAAIA,CAACG,CAAC,EAAE;IAAE,OAAO,UAAUC,CAAC,EAAE;MAAE,OAAOvB,IAAI,CAAC,CAACsB,CAAC,EAAEC,CAAC,CAAC,CAAC;IAAE,CAAC;EAAE;EACjE,SAASvB,IAAIA,CAACwB,EAAE,EAAE;IACd,IAAIR,CAAC,EAAE,MAAM,IAAIS,SAAS,CAAC,iCAAiC,CAAC;IAC7D,OAAOf,CAAC;MAAE,IAAI;QACV,IAAIM,CAAC,GAAG,CAAC,EAAEC,CAAC,KAAKJ,CAAC,GAAGW,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGP,CAAC,CAAC,QAAQ,CAAC,GAAGO,EAAE,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,OAAO,CAAC,KAAK,CAACJ,CAAC,GAAGI,CAAC,CAAC,QAAQ,CAAC,KAAKJ,CAAC,CAACa,IAAI,CAACT,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGA,CAAC,CAAChB,IAAI,CAAC,IAAI,CAAC,CAACY,CAAC,GAAGA,CAAC,CAACa,IAAI,CAACT,CAAC,EAAEO,EAAE,CAAC,CAAC,CAAC,CAAC,EAAEnB,IAAI,EAAE,OAAOQ,CAAC;QAC5J,IAAII,CAAC,GAAG,CAAC,EAAEJ,CAAC,EAAEW,EAAE,GAAG,CAACA,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEX,CAAC,CAAClB,KAAK,CAAC;QACvC,QAAQ6B,EAAE,CAAC,CAAC,CAAC;UACT,KAAK,CAAC;UAAE,KAAK,CAAC;YAAEX,CAAC,GAAGW,EAAE;YAAE;UACxB,KAAK,CAAC;YAAEd,CAAC,CAACC,KAAK,EAAE;YAAE,OAAO;cAAEhB,KAAK,EAAE6B,EAAE,CAAC,CAAC,CAAC;cAAEnB,IAAI,EAAE;YAAM,CAAC;UACvD,KAAK,CAAC;YAAEK,CAAC,CAACC,KAAK,EAAE;YAAEM,CAAC,GAAGO,EAAE,CAAC,CAAC,CAAC;YAAEA,EAAE,GAAG,CAAC,CAAC,CAAC;YAAE;UACxC,KAAK,CAAC;YAAEA,EAAE,GAAGd,CAAC,CAACK,GAAG,CAACY,GAAG,EAAE;YAAEjB,CAAC,CAACI,IAAI,CAACa,GAAG,EAAE;YAAE;UACxC;YACI,IAAI,EAAEd,CAAC,GAAGH,CAAC,CAACI,IAAI,EAAED,CAAC,GAAGA,CAAC,CAACe,MAAM,GAAG,CAAC,IAAIf,CAAC,CAACA,CAAC,CAACe,MAAM,GAAG,CAAC,CAAC,CAAC,KAAKJ,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAIA,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;cAAEd,CAAC,GAAG,CAAC;cAAE;YAAU;YAC3G,IAAIc,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAACX,CAAC,IAAKW,EAAE,CAAC,CAAC,CAAC,GAAGX,CAAC,CAAC,CAAC,CAAC,IAAIW,EAAE,CAAC,CAAC,CAAC,GAAGX,CAAC,CAAC,CAAC,CAAE,CAAC,EAAE;cAAEH,CAAC,CAACC,KAAK,GAAGa,EAAE,CAAC,CAAC,CAAC;cAAE;YAAO;YACrF,IAAIA,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAId,CAAC,CAACC,KAAK,GAAGE,CAAC,CAAC,CAAC,CAAC,EAAE;cAAEH,CAAC,CAACC,KAAK,GAAGE,CAAC,CAAC,CAAC,CAAC;cAAEA,CAAC,GAAGW,EAAE;cAAE;YAAO;YACpE,IAAIX,CAAC,IAAIH,CAAC,CAACC,KAAK,GAAGE,CAAC,CAAC,CAAC,CAAC,EAAE;cAAEH,CAAC,CAACC,KAAK,GAAGE,CAAC,CAAC,CAAC,CAAC;cAAEH,CAAC,CAACK,GAAG,CAACc,IAAI,CAACL,EAAE,CAAC;cAAE;YAAO;YAClE,IAAIX,CAAC,CAAC,CAAC,CAAC,EAAEH,CAAC,CAACK,GAAG,CAACY,GAAG,EAAE;YACrBjB,CAAC,CAACI,IAAI,CAACa,GAAG,EAAE;YAAE;QAAS;QAE/BH,EAAE,GAAGf,IAAI,CAACiB,IAAI,CAACpC,OAAO,EAAEoB,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOR,CAAC,EAAE;QAAEsB,EAAE,GAAG,CAAC,CAAC,EAAEtB,CAAC,CAAC;QAAEe,CAAC,GAAG,CAAC;MAAE,CAAC,SAAS;QAAED,CAAC,GAAGH,CAAC,GAAG,CAAC;MAAE;IAAC;IAC1D,IAAIW,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAMA,EAAE,CAAC,CAAC,CAAC;IAAE,OAAO;MAAE7B,KAAK,EAAE6B,EAAE,CAAC,CAAC,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;MAAEnB,IAAI,EAAE;IAAK,CAAC;EACpF;AACJ,CAAC;AACD,IAAIyB,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAExC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIyC,aAAa,GAAGN,eAAe,CAACO,OAAO,CAAC,eAAe,CAAC,CAAC;AAC7D,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACtD,IAAIE,MAAM,GAAGD,mBAAmB,CAACE,QAAQ,CAACC,MAAM,CAACF,MAAM;AACvD,IAAIG,IAAI,GAAG,aAAe,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,IAAIA,CAACC,EAAE,EAAE;IACd,IAAIC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEE,EAAE,GAAGD,EAAE,CAACE,MAAM;MAAEA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,UAAUE,OAAO,EAAEC,OAAO,EAAE;QAAE,OAAOnD,OAAO,CAACD,OAAO,EAAE;MAAE,CAAC,GAAGiD,EAAE;MAAEI,EAAE,GAAGL,EAAE,CAACM,OAAO;MAAEA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,UAAUE,IAAI,EAAE;QAAE,OAAOtD,OAAO,CAACD,OAAO,EAAE;MAAE,CAAC,GAAGqD,EAAE;MAAEG,EAAE,GAAGR,EAAE,CAACS,QAAQ;MAAEA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,UAAUD,IAAI,EAAE;QAAE,OAAO,IAAI;MAAE,CAAC,GAAGC,EAAE;MAAEE,EAAE,GAAGV,EAAE,CAACW,mBAAmB;MAAEA,mBAAmB,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,UAAUH,IAAI,EAAEK,QAAQ,EAAE,CAAE,CAAC,GAAGF,EAAE;MAAEG,EAAE,GAAGb,EAAE,CAACc,kBAAkB;MAAEA,kBAAkB,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,UAAUN,IAAI,EAAE,CAAE,CAAC,GAAGM,EAAE;MAAEE,EAAE,GAAGf,EAAE,CAACgB,MAAM;MAAEA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGvB,aAAa,CAACyB,OAAO,CAACC,aAAa,EAAE,GAAGH,EAAE;MAAEI,EAAE,GAAGnB,EAAE,CAACoB,GAAG;MAAEA,GAAG,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGxB,MAAM,CAAC0B,IAAI,EAAE,GAAGF,EAAE;IAC1oB,IAAI,CAACG,OAAO,GAAGpB,MAAM;IACrB,IAAI,CAACqB,QAAQ,GAAGjB,OAAO;IACvB,IAAI,CAACkB,SAAS,GAAGf,QAAQ;IACzB,IAAI,CAACgB,oBAAoB,GAAGd,mBAAmB;IAC/C,IAAI,CAACe,mBAAmB,GAAGZ,kBAAkB;IAC7C,IAAI,CAACa,QAAQ,GAAGX,MAAM,CAACY,OAAO;IAC9B,IAAI,CAACC,mBAAmB,GAAGb,MAAM,CAACc,kBAAkB;IACpD,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;IACzB,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC;IAC/B,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;IACpB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACC,IAAI,GAAGlB,GAAG;IACf,IAAI,CAACmB,OAAO,GAAG,KAAK;EACxB;EACA;AACJ;AACA;AACA;AACA;EACIzC,IAAI,CAAC0C,SAAS,CAACC,OAAO,GAAG,UAAUtC,OAAO,EAAE;IACxC,IAAIuC,KAAK,GAAG,IAAI;IAChB,OAAO,IAAI,CAACC,QAAQ,CAACxC,OAAO,CAAC,CAACzC,IAAI,CAAC,UAAUkF,QAAQ,EAAE;MACnD,IAAIC,GAAG,GAAG1C,OAAO,CAAC2C,KAAK,EAAE;MACzB,IAAIF,QAAQ,EAAE;QACV;QACA,OAAOA,QAAQ;MACnB;MACA;MACA,IAAIG,WAAW,GAAGL,KAAK,CAACT,gBAAgB;MACxC,IAAIe,QAAQ,GAAGD,WAAW,CAACF,GAAG,CAAC;MAC/B,IAAI,CAACG,QAAQ,EAAE;QACXD,WAAW,CAACF,GAAG,CAAC,GAAG,EAAE;MACzB;MACA,OAAO,IAAI5F,OAAO,CAAC,UAAUD,OAAO,EAAEE,MAAM,EAAE;QAC1C,IAAI+F,OAAO;QACX,IAAIC,SAAS,GAAGC,UAAU,CAAC,YAAY;UACnC;UACA;UACA;UACA,IAAIC,eAAe,GAAGL,WAAW,CAACF,GAAG,CAAC;UACtC,IAAIO,eAAe,EAAE;YACjBL,WAAW,CAACF,GAAG,CAAC,GAAGO,eAAe,CAACC,MAAM,CAAC,UAAUC,IAAI,EAAE;cAAE,OAAOA,IAAI,KAAKL,OAAO;YAAE,CAAC,CAAC;UAC3F;UACA,IAAIA,OAAO,CAACM,WAAW,EAAE,EAAE;YACvB;UAAA,CACH,MACI;YACD;YACA,IAAIC,WAAW,GAAGd,KAAK,CAACe,mBAAmB,CAACtD,OAAO,CAAC;YACpD,IAAIuD,SAAS,GAAGhB,KAAK,CAACiB,GAAG,CAACxD,OAAO,CAAC,GAAGuC,KAAK,CAACX,MAAM,CAACc,GAAG,CAAC,CAAC7D,MAAM,GAAG,CAAC;YACjEiE,OAAO,CAAC/F,MAAM,CAAC,CAAC,CAAC,EAAEwC,mBAAmB,CAACkE,QAAQ,EAAE,sCAAsC,GAAGlB,KAAK,CAACb,mBAAmB,GAAG,wCAAwC,GAAG2B,WAAW,GAAG,sBAAsB,GAAGE,SAAS,GAAG,GAAG,CAAC,CAAC;UAC7N;QACJ,CAAC,EAAEhB,KAAK,CAACb,mBAAmB,CAAC;QAC7BoB,OAAO,GAAG,IAAIY,cAAc,CAAChB,GAAG,EAAE7F,OAAO,EAAEE,MAAM,EAAEgG,SAAS,EAAER,KAAK,CAACJ,IAAI,CAAC;QACzES,WAAW,CAACF,GAAG,CAAC,CAAC5D,IAAI,CAACgE,OAAO,CAAC;MAClC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;EACInD,IAAI,CAAC0C,SAAS,CAACsB,KAAK,GAAG,UAAU3D,OAAO,EAAE;IACtC,OAAO,IAAI,CAAC4D,SAAS,CAAC5D,OAAO,CAAC2C,KAAK,EAAE,CAAC;EAC1C,CAAC;EACD;AACJ;AACA;AACA;EACIhD,IAAI,CAAC0C,SAAS,CAACwB,KAAK,GAAG,YAAY;IAC/B,OAAOvH,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIiG,KAAK,GAAG,IAAI;MAChB,OAAO9E,WAAW,CAAC,IAAI,EAAE,UAAUmC,EAAE,EAAE;QACnC,QAAQA,EAAE,CAAChC,KAAK;UACZ,KAAK,CAAC;YACF,IAAI,CAACwE,OAAO,GAAG,IAAI;YACnB,OAAO,CAAC,CAAC,CAAC,WAAWtF,OAAO,CAACgH,GAAG,CAAC5E,MAAM,CAAC6E,IAAI,CAAC,IAAI,CAACnC,MAAM,CAAC,CAACoC,GAAG,CAAC,UAAUtB,GAAG,EAAE;cAAE,OAAOH,KAAK,CAACqB,SAAS,CAAClB,GAAG,CAAC;YAAE,CAAC,CAAC,CAAC,CAAC;UACpH,KAAK,CAAC;YACN;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;YACoB,OAAO,CAAC,CAAC,CAAC,YAAY9C,EAAE,CAAC/B,IAAI,EAAE,CAAC;QAAC;MAEzC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACI8B,IAAI,CAAC0C,SAAS,CAAC4B,OAAO,GAAG,UAAUC,SAAS,EAAE;IAC1C,IAAI3B,KAAK,GAAG,IAAI;IAChB,IAAI4B,UAAU,GAAGD,SAAS,CAACF,GAAG,CAAC,UAAUI,CAAC,EAAE;MAAE,OAAOA,CAAC,CAACzB,KAAK,EAAE;IAAE,CAAC,CAAC;IAClE,IAAI0B,WAAW,GAAGnF,MAAM,CAAC6E,IAAI,CAAC,IAAI,CAACnC,MAAM,CAAC;IAC1C,IAAI0C,WAAW,GAAGD,WAAW,CAACnB,MAAM,CAAC,UAAUqB,CAAC,EAAE;MAAE,OAAOJ,UAAU,CAACK,OAAO,CAACD,CAAC,CAAC,KAAK,CAAC,CAAC;IAAE,CAAC,CAAC;IAC3F,OAAOzH,OAAO,CAACgH,GAAG,CAACQ,WAAW,CAACN,GAAG,CAAC,UAAUtB,GAAG,EAAE;MAAE,OAAOH,KAAK,CAACqB,SAAS,CAAClB,GAAG,CAAC;IAAE,CAAC,CAAC,CAAC;EACxF,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI/C,IAAI,CAAC0C,SAAS,CAACmB,GAAG,GAAG,UAAUxD,OAAO,EAAE;IACpC,OAAOA,OAAO,CAAC2C,KAAK,EAAE,IAAI,IAAI,CAACf,MAAM;EACzC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjC,IAAI,CAAC0C,SAAS,CAACiB,mBAAmB,GAAG,UAAUtD,OAAO,EAAE;IACpD,OAAO,IAAI,CAAC+B,qBAAqB,CAAC/B,OAAO,CAAC2C,KAAK,EAAE,CAAC,IAAI,CAAC;EAC3D,CAAC;EACDhD,IAAI,CAAC0C,SAAS,CAACG,QAAQ,GAAG,UAAUxC,OAAO,EAAE;IACzC,OAAO1D,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIoG,GAAG,EAAE+B,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAEC,cAAc,EAAEnC,QAAQ;MAC9D,IAAIF,KAAK,GAAG,IAAI;MAChB,OAAO9E,WAAW,CAAC,IAAI,EAAE,UAAUmC,EAAE,EAAE;QACnC,QAAQA,EAAE,CAAChC,KAAK;UACZ,KAAK,CAAC;YACF,IAAI,IAAI,CAACwE,OAAO,EAAE;cACd,MAAM,CAAC,CAAC,EAAE7C,mBAAmB,CAACkE,QAAQ,EAAE,uDAAuD,CAAC;YACpG;YACAf,GAAG,GAAG1C,OAAO,CAAC2C,KAAK,EAAE;YACrB8B,IAAI,GAAG,IAAI,CAAC7C,MAAM,CAACc,GAAG,CAAC;YACvBgC,SAAS,GAAG,IAAI,CAAC1C,UAAU,CAACU,GAAG,CAAC;YAChC,IAAI,CAAC+B,IAAI,EAAE;cACPA,IAAI,GAAG,EAAE;cACTC,SAAS,GAAG,IAAIG,SAAS,EAAE;cAC3B,IAAI,CAACjD,MAAM,CAACc,GAAG,CAAC,GAAG+B,IAAI;cACvB,IAAI,CAAC5C,eAAe,CAACa,GAAG,CAAC,GAAG,CAAC;cAC7B,IAAI,CAACV,UAAU,CAACU,GAAG,CAAC,GAAGgC,SAAS;YACpC;YACA9E,EAAE,CAAChC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACF,IAAI,CAAC6G,IAAI,CAAC5F,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YACzC8F,UAAU,GAAGF,IAAI,CAAC7F,GAAG,EAAE;YACvB,IAAI,CAAC,IAAI,CAACyC,SAAS,CAACsD,UAAU,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YACxD,IAAI,IAAI,CAACpD,mBAAmB,EAAE;cAC1B,IAAI,CAACA,mBAAmB,CAACoD,UAAU,CAAC;YACxC;YACA;YACAG,gBAAgB,CAACpC,GAAG,EAAE,IAAI,CAACX,qBAAqB,CAAC;YACjD,IAAI,IAAI,CAACI,IAAI,CAAC4C,cAAc,EAAE,EAAE;cAC5B,IAAI,CAAC5C,IAAI,CAAC6C,KAAK,CAACL,UAAU,GAAG,0BAA0B,GAAGjC,GAAG,CAAC;YAClE;YACA,OAAO,CAAC,CAAC,CAAC,YAAYiC,UAAU,CAAC;UACrC,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACvD,QAAQ,CAACuD,UAAU,CAAC,CAAC;UACvD,KAAK,CAAC;YACF/E,EAAE,CAAC/B,IAAI,EAAE;YACT+B,EAAE,CAAChC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC/B,KAAK,CAAC;YACF;YACA,IAAI,IAAI,CAAC4D,QAAQ,GAAG,CAAC,EAAE;cACnBoD,cAAc,GAAG,IAAI,CAACtB,mBAAmB,CAACtD,OAAO,CAAC,GAAG,IAAI,CAAC6B,eAAe,CAACa,GAAG,CAAC;cAC9E,IAAIkC,cAAc,IAAI,IAAI,CAACpD,QAAQ,EAAE;gBACjC;gBACA,OAAO,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC;cAC/B;YACJ;YACA;YACA;YACA,IAAI,CAACK,eAAe,CAACa,GAAG,CAAC,GAAG,IAAI,CAACb,eAAe,CAACa,GAAG,CAAC,GAAG,CAAC;YACzD9C,EAAE,CAAChC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACFgC,EAAE,CAAC7B,IAAI,CAACe,IAAI,CAAC,CAAC,CAAC,GAAI,CAAC,EAAE,CAAC,CAAC,CAAC;YACzB,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACqC,OAAO,CAACnB,OAAO,EAAE,UAAUA,OAAO,EAAEyC,QAAQ,EAAE;cAAE,OAAOF,KAAK,CAACN,QAAQ,CAACyC,SAAS,EAAE1E,OAAO,EAAEyC,QAAQ,CAAC;YAAE,CAAC,CAAC,CAAC;UACtI,KAAK,CAAC;YACF;YACAA,QAAQ,GAAG7C,EAAE,CAAC/B,IAAI,EAAE;YACpBiH,gBAAgB,CAACpC,GAAG,EAAE,IAAI,CAACX,qBAAqB,CAAC;YACjD,IAAI,IAAI,CAACI,IAAI,CAAC4C,cAAc,EAAE,EAAE;cAC5B,IAAI,CAAC5C,IAAI,CAAC6C,KAAK,CAACvC,QAAQ,GAAG,wBAAwB,GAAGC,GAAG,CAAC;YAC9D;YACA,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC3B,KAAK,CAAC;YACF,IAAI,CAACb,eAAe,CAACa,GAAG,CAAC,GAAG,IAAI,CAACb,eAAe,CAACa,GAAG,CAAC,GAAG,CAAC;YACzD,OAAO,CAAC,CAAC,CAAC,eAAe;UAC7B,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,YAAYD,QAAQ,CAAC;QAAC;MAEhD,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD9C,IAAI,CAAC0C,SAAS,CAACJ,QAAQ,GAAG,UAAUyC,SAAS,EAAE1E,OAAO,EAAEyC,QAAQ,EAAE;IAC9D,OAAOnG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIoG,GAAG,EAAE+B,IAAI;MACb,IAAIlC,KAAK,GAAG,IAAI;MAChB,OAAO9E,WAAW,CAAC,IAAI,EAAE,UAAUmC,EAAE,EAAE;QACnC,QAAQA,EAAE,CAAChC,KAAK;UACZ,KAAK,CAAC;YACF8E,GAAG,GAAG1C,OAAO,CAAC2C,KAAK,EAAE;YACrB8B,IAAI,GAAG,IAAI,CAAC7C,MAAM,CAACc,GAAG,CAAC;YACvB,IAAI,EAAE+B,IAAI,IAAIC,SAAS,CAACO,QAAQ,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YAC5D,IAAI,CAAC,CAAC,IAAI,CAAC5D,SAAS,CAACoB,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YACvD,IAAI,IAAI,CAACN,IAAI,CAAC4C,cAAc,EAAE,EAAE;cAC5B,IAAI,CAAC5C,IAAI,CAAC6C,KAAK,CAACvC,QAAQ,GAAG,+CAA+C,GAAGC,GAAG,GAAG,+BAA+B,CAAC;YACvH;YACA,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACtB,QAAQ,CAACqB,QAAQ,CAAC,CAAC;UACjD,KAAK,CAAC;YACF7C,EAAE,CAAC/B,IAAI,EAAE;YACT,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC3B,KAAK,CAAC;YACF,IAAI,IAAI,CAACyD,oBAAoB,EAAE;cAC3B,IAAI,CAACA,oBAAoB,CAACmB,QAAQ,EAAE;gBAChCyC,OAAO,EAAE,SAAAA,QAAUC,KAAK,EAAE;kBACtB5C,KAAK,CAACJ,IAAI,CAAC6C,KAAK,CAAC,kBAAkB,GAAGvC,QAAQ,GAAG,+BAA+B,GAAG0C,KAAK,CAAC;kBACzF,IAAIV,IAAI,GAAGlC,KAAK,CAACX,MAAM,CAACc,GAAG,CAAC;kBAC5B,IAAI+B,IAAI,EAAE;oBACNlC,KAAK,CAACX,MAAM,CAACc,GAAG,CAAC,GAAG+B,IAAI,CAACvB,MAAM,CAAC,UAAUkC,CAAC,EAAE;sBAAE,OAAOA,CAAC,KAAK3C,QAAQ;oBAAE,CAAC,CAAC;kBAC5E;kBACA;kBACA;kBACA;kBACAF,KAAK,CAACnB,QAAQ,CAACqB,QAAQ,CAAC,CAAC4C,KAAK,CAAC,YAAY,CAAE,CAAC,CAAC;gBACnD;cACJ,CAAC,CAAC;YACN;YACAZ,IAAI,CAAC3F,IAAI,CAAC2D,QAAQ,CAAC;YACnB,IAAI,IAAI,CAACN,IAAI,CAAC4C,cAAc,EAAE,EAAE;cAC5B,IAAI,CAAC5C,IAAI,CAAC6C,KAAK,CAACvC,QAAQ,GAAG,wBAAwB,GAAGC,GAAG,CAAC;YAC9D;YACA9C,EAAE,CAAChC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC/B,KAAK,CAAC;YACF;YACA,IAAI,IAAI,CAACuE,IAAI,CAAC4C,cAAc,EAAE,EAAE;cAC5B,IAAI,CAAC5C,IAAI,CAAC6C,KAAK,CAACvC,QAAQ,GAAG,+CAA+C,GAAGC,GAAG,GAAG,+BAA+B,CAAC;YACvH;YACA,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACtB,QAAQ,CAACqB,QAAQ,CAAC,CAAC;UACjD,KAAK,CAAC;YACF7C,EAAE,CAAC/B,IAAI,EAAE;YACT+B,EAAE,CAAChC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACF0H,gBAAgB,CAAC5C,GAAG,EAAE,IAAI,CAACX,qBAAqB,CAAC;YACjD,IAAI,CAACwD,8BAA8B,CAACvF,OAAO,CAAC;YAC5C,OAAO,CAAC,CAAC,CAAC,WAAW;QAAC;MAElC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;;EACDL,IAAI,CAAC0C,SAAS,CAACuB,SAAS,GAAG,UAAUlB,GAAG,EAAE;IACtC,OAAOpG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAImI,IAAI,EAAEC,SAAS,EAAEjC,QAAQ;MAC7B,OAAOhF,WAAW,CAAC,IAAI,EAAE,UAAUmC,EAAE,EAAE;QACnC,QAAQA,EAAE,CAAChC,KAAK;UACZ,KAAK,CAAC;YACF6G,IAAI,GAAG,IAAI,CAAC7C,MAAM,CAACc,GAAG,CAAC,IAAI,EAAE;YAC7BgC,SAAS,GAAG,IAAI,CAAC1C,UAAU,CAACU,GAAG,CAAC,IAAI,IAAImC,SAAS,EAAE;YACnDjF,EAAE,CAAChC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACF,IAAI,CAAC6G,IAAI,CAAC5F,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YACzC4D,QAAQ,GAAGgC,IAAI,CAAC7F,GAAG,EAAE;YACrB,IAAI,IAAI,CAAC2C,mBAAmB,EAAE;cAC1B,IAAI,CAACA,mBAAmB,CAACkB,QAAQ,CAAC;YACtC;YACA,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACrB,QAAQ,CAACqB,QAAQ,CAAC,CAAC;UACjD,KAAK,CAAC;YACF7C,EAAE,CAAC/B,IAAI,EAAE;YACT,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC3B,KAAK,CAAC;YACF6G,SAAS,CAACb,KAAK,EAAE;YACjB,OAAO,IAAI,CAACjC,MAAM,CAACc,GAAG,CAAC;YACvB,OAAO,IAAI,CAACV,UAAU,CAACU,GAAG,CAAC;YAC3B,OAAO,CAAC,CAAC,CAAC,WAAW;QAAC;MAElC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;;EACD/C,IAAI,CAAC0C,SAAS,CAACkD,8BAA8B,GAAG,UAAUvF,OAAO,EAAE;IAC/D,IAAIuC,KAAK,GAAG,IAAI;IAChB,IAAIG,GAAG,GAAG1C,OAAO,CAAC2C,KAAK,EAAE;IACzB,IAAIE,QAAQ,GAAG,IAAI,CAACf,gBAAgB,CAACY,GAAG,CAAC;IACzC,IAAIgC,SAAS,GAAG,IAAI,CAAC1C,UAAU,CAACU,GAAG,CAAC;IACpC,IAAIG,QAAQ,EAAE;MACV,IAAI2C,gBAAgB,GAAG3C,QAAQ,CAAC4C,KAAK,EAAE,CAAC,CAAC;MACzC,IAAID,gBAAgB,EAAE;QAClB,IAAI,CAAChD,QAAQ,CAACxC,OAAO,CAAC,CACjBqF,KAAK,CAAC,UAAUF,KAAK,EAAE;UACxB;UACA;UACAK,gBAAgB,CAACzI,MAAM,CAACoI,KAAK,CAAC;UAC9B,OAAO,IAAI;QACf,CAAC,CAAC,CACG5H,IAAI,CAAC,UAAUkF,QAAQ,EAAE;UAC1B,IAAIA,QAAQ,EAAE;YACV;YACA,IAAI+C,gBAAgB,CAACpC,WAAW,EAAE,EAAE;cAChC;cACA;cACAb,KAAK,CAACN,QAAQ,CAACyC,SAAS,EAAE1E,OAAO,EAAEyC,QAAQ,CAAC;YAChD,CAAC,MACI;cACD;cACA+C,gBAAgB,CAAC3I,OAAO,CAAC4F,QAAQ,CAAC,CAAC,CAAC;YACxC;UACJ;QACJ,CAAC,CAAC;MACN,CAAC,MACI;QACD,OAAO,IAAI,CAACX,gBAAgB,CAACY,GAAG,CAAC;MACrC;IACJ;EACJ,CAAC;EACD,OAAO/C,IAAI;AACf,CAAC,EAAG;AACJ;AACA;AACA;AACA;AACA;AACA,SAASmF,gBAAgBA,CAACpC,GAAG,EAAEgD,oBAAoB,EAAE;EACjD,IAAIC,YAAY,GAAGD,oBAAoB,CAAChD,GAAG,CAAC,IAAI,CAAC;EACjDgD,oBAAoB,CAAChD,GAAG,CAAC,GAAGiD,YAAY,GAAG,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,gBAAgBA,CAAC5C,GAAG,EAAEgD,oBAAoB,EAAE;EACjD,IAAIC,YAAY,GAAGD,oBAAoB,CAAChD,GAAG,CAAC,IAAI,CAAC;EACjD,IAAIkD,SAAS,GAAGD,YAAY,GAAG,CAAC;EAChC,IAAIC,SAAS,GAAG,CAAC,EAAE;IACfF,oBAAoB,CAAChD,GAAG,CAAC,GAAGkD,SAAS;EACzC,CAAC,MACI;IACD,OAAOF,oBAAoB,CAAChD,GAAG,CAAC;EACpC;AACJ;AACA,IAAIgB,cAAc,GAAG,aAAe,YAAY;EAC5C,SAASA,cAAcA,CAAChB,GAAG,EAAE7F,OAAO,EAAEE,MAAM,EAAEgG,SAAS,EAAE9B,GAAG,EAAE;IAC1D,IAAI,CAAC4E,IAAI,GAAGnD,GAAG;IACf,IAAI,CAACoD,QAAQ,GAAGjJ,OAAO;IACvB,IAAI,CAACkJ,OAAO,GAAGhJ,MAAM;IACrB,IAAI,CAACiJ,UAAU,GAAGjD,SAAS;IAC3B,IAAI,CAACZ,IAAI,GAAGlB,GAAG;IACf,IAAI,CAACgF,UAAU,GAAG,KAAK;EAC3B;EACAvC,cAAc,CAACrB,SAAS,CAACe,WAAW,GAAG,YAAY;IAC/C,OAAO,IAAI,CAAC6C,UAAU;EAC1B,CAAC;EACDvC,cAAc,CAACrB,SAAS,CAACxF,OAAO,GAAG,UAAU4F,QAAQ,EAAE;IACnD,IAAI,IAAI,CAACwD,UAAU,EAAE;MACjB;IACJ;IACA,IAAI,CAACA,UAAU,GAAG,IAAI;IACtBC,YAAY,CAAC,IAAI,CAACF,UAAU,CAAC;IAC7B,IAAI,IAAI,CAAC7D,IAAI,CAAC4C,cAAc,EAAE,EAAE;MAC5B,IAAI,CAAC5C,IAAI,CAAC6C,KAAK,CAACvC,QAAQ,GAAG,0BAA0B,GAAG,IAAI,CAACoD,IAAI,CAAC;IACtE;IACA,IAAI,CAACC,QAAQ,CAACrD,QAAQ,CAAC;EAC3B,CAAC;EACDiB,cAAc,CAACrB,SAAS,CAACtF,MAAM,GAAG,UAAUoI,KAAK,EAAE;IAC/C,IAAI,IAAI,CAACc,UAAU,EAAE;MACjB;IACJ;IACA,IAAI,CAACA,UAAU,GAAG,IAAI;IACtBC,YAAY,CAAC,IAAI,CAACF,UAAU,CAAC;IAC7B,IAAI,CAACD,OAAO,CAACZ,KAAK,CAAC;EACvB,CAAC;EACD,OAAOzB,cAAc;AACzB,CAAC,EAAG;AACJ,IAAImB,SAAS,GAAG,aAAe,YAAY;EACvC,SAASA,SAASA,CAAA,EAAG;IACjB,IAAI,CAACsB,OAAO,GAAG,IAAI;EACvB;EACAtB,SAAS,CAACxC,SAAS,CAAC4C,QAAQ,GAAG,YAAY;IACvC,OAAO,IAAI,CAACkB,OAAO;EACvB,CAAC;EACDtB,SAAS,CAACxC,SAAS,CAACwB,KAAK,GAAG,YAAY;IACpC,IAAI,CAACsC,OAAO,GAAG,KAAK;EACxB,CAAC;EACD,OAAOtB,SAAS;AACpB,CAAC,EAAG;AACJzF,OAAO,CAAC0B,OAAO,GAAGnB,IAAI"},"metadata":{},"sourceType":"script"}