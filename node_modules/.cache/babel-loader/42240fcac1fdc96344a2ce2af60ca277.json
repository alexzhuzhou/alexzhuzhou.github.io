{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\nvar util = __importStar(require(\"./internal/temporal-util\"));\nvar util_1 = require(\"./internal/util\");\nvar error_1 = require(\"./error\");\nvar integer_1 = __importStar(require(\"./integer\"));\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Duration = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} months - The number of months for the new duration.\n   * @param {NumberOrInteger} days - The number of days for the new duration.\n   * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\n   * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\n   */\n  function Duration(months, days, seconds, nanoseconds) {\n    /**\n     * The number of months.\n     * @type {NumberOrInteger}\n     */\n    this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n    /**\n     * The number of days.\n     * @type {NumberOrInteger}\n     */\n    this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n    (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n    (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n    /**\n     * The number of seconds.\n     * @type {NumberOrInteger}\n     */\n    this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n    /**\n     * The number of nanoseconds.\n     * @type {NumberOrInteger}\n     */\n    this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n    Object.freeze(this);\n  }\n  /**\n   * @ignore\n   */\n  Duration.prototype.toString = function () {\n    return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n  };\n  return Duration;\n}();\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\nfunction isDuration(obj) {\n  return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\nexports.isDuration = isDuration;\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   */\n  function LocalTime(hour, minute, second, nanosecond) {\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month, day and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {LocalTime<number>} New LocalTime.\n   */\n  LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n    return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default ? totalNanoseconds.toInt() : typeof totalNanoseconds === 'bigint' ? (0, integer_1.int)(totalNanoseconds).toInt() : totalNanoseconds);\n  };\n  /**\n   * @ignore\n   */\n  LocalTime.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n  };\n  return LocalTime;\n}();\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\nfunction isLocalTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalTime = isLocalTime;\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Time = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   */\n  function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    /**\n     * The time zone offset in seconds.\n     * @type {NumberOrInteger}\n     */\n    this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month and day components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {Time<number>} New Time.\n   */\n  Time.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n  };\n  /**\n   * @ignore\n   */\n  Time.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n  };\n  return Time;\n}();\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\nfunction isTime(obj) {\n  return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\nexports.isTime = isTime;\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Date = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new local date.\n   * @param {NumberOrInteger} month - The month for the new local date.\n   * @param {NumberOrInteger} day - The day for the new local date.\n   */\n  function Date(year, month, day) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link Date} object from the given standard JavaScript `Date`.\n   * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @return {Date} New Date.\n   */\n  Date.fromStandardDate = function (standardDate) {\n    verifyStandardDateAndNanos(standardDate);\n    return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n  };\n  /**\n   * @ignore\n   */\n  Date.prototype.toString = function () {\n    return util.dateToIsoString(this.year, this.month, this.day);\n  };\n  return Date;\n}();\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\nfunction isDate(obj) {\n  return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\nexports.isDate = isDate;\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalDateTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new local date.\n   * @param {NumberOrInteger} month - The month for the new local date.\n   * @param {NumberOrInteger} day - The day for the new local date.\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   */\n  function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Time zone offset component of the given date is ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {LocalDateTime} New LocalDateTime.\n   */\n  LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n  };\n  /**\n   * @ignore\n   */\n  LocalDateTime.prototype.toString = function () {\n    return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n  };\n  return LocalDateTime;\n}();\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\nfunction isLocalDateTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalDateTime = isLocalDateTime;\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar DateTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new date-time.\n   * @param {NumberOrInteger} month - The month for the new date-time.\n   * @param {NumberOrInteger} day - The day for the new date-time.\n   * @param {NumberOrInteger} hour - The hour for the new date-time.\n   * @param {NumberOrInteger} minute - The minute for the new date-time.\n   * @param {NumberOrInteger} second - The second for the new date-time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n   * Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n   */\n  function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2),\n      offset = _a[0],\n      id = _a[1];\n    /**\n     * The time zone offset in seconds.\n     *\n     * *Either this or {@link timeZoneId} is defined.*\n     *\n     * @type {NumberOrInteger}\n     */\n    this.timeZoneOffsetSeconds = offset;\n    /**\n     * The time zone id.\n     *\n     * *Either this or {@link timeZoneOffsetSeconds} is defined.*\n     *\n     * @type {string}\n     */\n    this.timeZoneId = id || undefined;\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {DateTime} New DateTime.\n   */\n  DateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);\n  };\n  /**\n   * @ignore\n   */\n  DateTime.prototype.toString = function () {\n    var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    var timeZoneStr = this.timeZoneId ? \"[\" + this.timeZoneId + \"]\" : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds || 0);\n    return localDateTimeStr + timeZoneStr;\n  };\n  return DateTime;\n}();\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\nfunction isDateTime(obj) {\n  return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isDateTime = isDateTime;\nfunction hasIdentifierProperty(obj, property) {\n  return (obj && obj[property]) === true;\n}\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n  return util.dateToIsoString(year, month, day) + 'T' + util.timeToIsoString(hour, minute, second, nanosecond);\n}\n/**\n * @private\n * @param {NumberOrInteger} timeZoneOffsetSeconds\n * @param {string | null } timeZoneId\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\n */\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n  var offsetDefined = timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;\n  var idDefined = timeZoneId && timeZoneId !== '';\n  if (offsetDefined && !idDefined) {\n    (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    return [timeZoneOffsetSeconds, undefined];\n  } else if (!offsetDefined && idDefined) {\n    (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n    return [undefined, timeZoneId];\n  } else if (offsetDefined && idDefined) {\n    throw (0, error_1.newError)(\"Unable to create DateTime with both time zone offset and id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\n  } else {\n    throw (0, error_1.newError)(\"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\n  }\n}\n/**\n * @private\n * @param {StandardDate} standardDate\n * @param {NumberOrInteger} nanosecond\n * @returns {void}\n */\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n  (0, util_1.assertValidDate)(standardDate, 'Standard date');\n  if (nanosecond !== null && nanosecond !== undefined) {\n    (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n  }\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__read","n","Symbol","iterator","i","r","ar","e","next","done","push","error","exports","isDateTime","DateTime","isLocalDateTime","LocalDateTime","isDate","Date","isTime","Time","isLocalTime","LocalTime","isDuration","Duration","util","require","util_1","error_1","integer_1","IDENTIFIER_PROPERTY_ATTRIBUTES","configurable","writable","DURATION_IDENTIFIER_PROPERTY","LOCAL_TIME_IDENTIFIER_PROPERTY","TIME_IDENTIFIER_PROPERTY","DATE_IDENTIFIER_PROPERTY","LOCAL_DATE_TIME_IDENTIFIER_PROPERTY","DATE_TIME_IDENTIFIER_PROPERTY","months","days","seconds","nanoseconds","assertNumberOrInteger","normalizeSecondsForDuration","normalizeNanosecondsForDuration","freeze","toString","durationToIsoString","obj","hasIdentifierProperty","hour","minute","second","nanosecond","assertValidHour","assertValidMinute","assertValidSecond","assertValidNanosecond","fromStandardDate","standardDate","verifyStandardDateAndNanos","totalNanoseconds","getHours","getMinutes","getSeconds","default","toInt","int","timeToIsoString","timeZoneOffsetSeconds","toNumber","timeZoneOffsetInSeconds","timeZoneOffsetToIsoString","year","month","day","assertValidYear","assertValidMonth","assertValidDay","getFullYear","getMonth","getDate","dateToIsoString","localDateTimeToString","timeZoneId","_a","verifyTimeZoneArguments","offset","id","localDateTimeStr","timeZoneStr","property","offsetDefined","idDefined","assertString","newError","assertValidDate"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-core/lib/temporal-types.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\nvar util = __importStar(require(\"./internal/temporal-util\"));\nvar util_1 = require(\"./internal/util\");\nvar error_1 = require(\"./error\");\nvar integer_1 = __importStar(require(\"./integer\"));\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n    value: true,\n    enumerable: false,\n    configurable: false,\n    writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Duration = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} months - The number of months for the new duration.\n     * @param {NumberOrInteger} days - The number of days for the new duration.\n     * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\n     * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\n     */\n    function Duration(months, days, seconds, nanoseconds) {\n        /**\n         * The number of months.\n         * @type {NumberOrInteger}\n         */\n        this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n        /**\n         * The number of days.\n         * @type {NumberOrInteger}\n         */\n        this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n        (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n        (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n        /**\n         * The number of seconds.\n         * @type {NumberOrInteger}\n         */\n        this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n        /**\n         * The number of nanoseconds.\n         * @type {NumberOrInteger}\n         */\n        this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n        Object.freeze(this);\n    }\n    /**\n     * @ignore\n     */\n    Duration.prototype.toString = function () {\n        return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n    };\n    return Duration;\n}());\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\nfunction isDuration(obj) {\n    return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\nexports.isDuration = isDuration;\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     */\n    function LocalTime(hour, minute, second, nanosecond) {\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Year, month, day and time zone offset components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {LocalTime<number>} New LocalTime.\n     */\n    LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n        return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default\n            ? totalNanoseconds.toInt()\n            : typeof totalNanoseconds === 'bigint'\n                ? (0, integer_1.int)(totalNanoseconds).toInt()\n                : totalNanoseconds);\n    };\n    /**\n     * @ignore\n     */\n    LocalTime.prototype.toString = function () {\n        return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n    };\n    return LocalTime;\n}());\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\nfunction isLocalTime(obj) {\n    return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalTime = isLocalTime;\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Time = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n     */\n    function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        /**\n         * The time zone offset in seconds.\n         * @type {NumberOrInteger}\n         */\n        this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Year, month and day components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {Time<number>} New Time.\n     */\n    Time.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n    };\n    /**\n     * @ignore\n     */\n    Time.prototype.toString = function () {\n        return (util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds));\n    };\n    return Time;\n}());\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\nfunction isTime(obj) {\n    return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\nexports.isTime = isTime;\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Date = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new local date.\n     * @param {NumberOrInteger} month - The month for the new local date.\n     * @param {NumberOrInteger} day - The day for the new local date.\n     */\n    function Date(year, month, day) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link Date} object from the given standard JavaScript `Date`.\n     * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @return {Date} New Date.\n     */\n    Date.fromStandardDate = function (standardDate) {\n        verifyStandardDateAndNanos(standardDate);\n        return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n    };\n    /**\n     * @ignore\n     */\n    Date.prototype.toString = function () {\n        return util.dateToIsoString(this.year, this.month, this.day);\n    };\n    return Date;\n}());\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\nfunction isDate(obj) {\n    return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\nexports.isDate = isDate;\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalDateTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new local date.\n     * @param {NumberOrInteger} month - The month for the new local date.\n     * @param {NumberOrInteger} day - The day for the new local date.\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     */\n    function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Time zone offset component of the given date is ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {LocalDateTime} New LocalDateTime.\n     */\n    LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n    };\n    /**\n     * @ignore\n     */\n    LocalDateTime.prototype.toString = function () {\n        return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    };\n    return LocalDateTime;\n}());\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\nfunction isLocalDateTime(obj) {\n    return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalDateTime = isLocalDateTime;\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar DateTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new date-time.\n     * @param {NumberOrInteger} month - The month for the new date-time.\n     * @param {NumberOrInteger} day - The day for the new date-time.\n     * @param {NumberOrInteger} hour - The hour for the new date-time.\n     * @param {NumberOrInteger} minute - The minute for the new date-time.\n     * @param {NumberOrInteger} second - The second for the new date-time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n     * Value represents the difference, in seconds, from UTC to local time.\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n     * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n     */\n    function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2), offset = _a[0], id = _a[1];\n        /**\n         * The time zone offset in seconds.\n         *\n         * *Either this or {@link timeZoneId} is defined.*\n         *\n         * @type {NumberOrInteger}\n         */\n        this.timeZoneOffsetSeconds = offset;\n        /**\n         * The time zone id.\n         *\n         * *Either this or {@link timeZoneOffsetSeconds} is defined.*\n         *\n         * @type {string}\n         */\n        this.timeZoneId = id || undefined;\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {DateTime} New DateTime.\n     */\n    DateTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);\n    };\n    /**\n     * @ignore\n     */\n    DateTime.prototype.toString = function () {\n        var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n        var timeZoneStr = this.timeZoneId\n            ? \"[\" + this.timeZoneId + \"]\"\n            : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds || 0);\n        return localDateTimeStr + timeZoneStr;\n    };\n    return DateTime;\n}());\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\nfunction isDateTime(obj) {\n    return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isDateTime = isDateTime;\nfunction hasIdentifierProperty(obj, property) {\n    return (obj && obj[property]) === true;\n}\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n    return (util.dateToIsoString(year, month, day) +\n        'T' +\n        util.timeToIsoString(hour, minute, second, nanosecond));\n}\n/**\n * @private\n * @param {NumberOrInteger} timeZoneOffsetSeconds\n * @param {string | null } timeZoneId\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\n */\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n    var offsetDefined = timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;\n    var idDefined = timeZoneId && timeZoneId !== '';\n    if (offsetDefined && !idDefined) {\n        (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n        return [timeZoneOffsetSeconds, undefined];\n    }\n    else if (!offsetDefined && idDefined) {\n        (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n        return [undefined, timeZoneId];\n    }\n    else if (offsetDefined && idDefined) {\n        throw (0, error_1.newError)(\"Unable to create DateTime with both time zone offset and id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\n    }\n    else {\n        throw (0, error_1.newError)(\"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\n    }\n}\n/**\n * @private\n * @param {StandardDate} standardDate\n * @param {NumberOrInteger} nanosecond\n * @returns {void}\n */\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n    (0, util_1.assertValidDate)(standardDate, 'Standard date');\n    if (nanosecond !== null && nanosecond !== undefined) {\n        (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}