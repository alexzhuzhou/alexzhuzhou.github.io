{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ENCRYPTION_OFF = exports.ENCRYPTION_ON = exports.validateQueryAndParameters = exports.assertValidDate = exports.assertNumberOrInteger = exports.assertNumber = exports.assertString = exports.assertObject = exports.isString = exports.isObject = exports.isEmptyObjectOrNull = void 0;\nvar integer_1 = require(\"../integer\");\nvar json_1 = require(\"../json\");\nvar ENCRYPTION_ON = 'ENCRYPTION_ON';\nexports.ENCRYPTION_ON = ENCRYPTION_ON;\nvar ENCRYPTION_OFF = 'ENCRYPTION_OFF';\nexports.ENCRYPTION_OFF = ENCRYPTION_OFF;\n/**\n * Verifies if the object is null or empty\n * @param obj The subject object\n * @returns {boolean} True if it's empty object or null\n */\nfunction isEmptyObjectOrNull(obj) {\n  if (obj === null) {\n    return true;\n  }\n  if (!isObject(obj)) {\n    return false;\n  }\n  for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.bind(obj, prop)) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.isEmptyObjectOrNull = isEmptyObjectOrNull;\n/**\n * Verify if it's an object\n * @param obj The subject\n * @returns {boolean} True if it's an object\n */\nfunction isObject(obj) {\n  return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\n}\nexports.isObject = isObject;\n/**\n * Check and normalize given query and parameters.\n * @param {string|{text: string, parameters: Object}} query the query to check.\n * @param {Object} parameters\n * @return {{validatedQuery: string|{text: string, parameters: Object}, params: Object}} the normalized query with parameters.\n * @throws TypeError when either given query or parameters are invalid.\n */\nfunction validateQueryAndParameters(query, parameters, opt) {\n  var validatedQuery = '';\n  var params = parameters || {};\n  var skipAsserts = (opt === null || opt === void 0 ? void 0 : opt.skipAsserts) || false;\n  if (typeof query === 'string') {\n    validatedQuery = query;\n  } else if (query instanceof String) {\n    validatedQuery = query.toString();\n  } else if (typeof query === 'object' && query.text) {\n    validatedQuery = query.text;\n    params = query.parameters || {};\n  }\n  if (!skipAsserts) {\n    assertCypherQuery(validatedQuery);\n    assertQueryParameters(params);\n  }\n  return {\n    validatedQuery: validatedQuery,\n    params: params\n  };\n}\nexports.validateQueryAndParameters = validateQueryAndParameters;\n/**\n * Assert it's a object\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {object} The subject object\n * @throws {TypeError} when the supplied param is not an object\n */\nfunction assertObject(obj, objName) {\n  if (!isObject(obj)) {\n    throw new TypeError(objName + ' expected to be an object but was: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertObject = assertObject;\n/**\n * Assert it's a string\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {string} The subject string\n * @throws {TypeError} when the supplied param is not a string\n */\nfunction assertString(obj, objName) {\n  if (!isString(obj)) {\n    throw new TypeError(objName + ' expected to be string but was: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertString = assertString;\n/**\n * Assert it's a number\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {number} The number\n * @throws {TypeError} when the supplied param is not a number\n */\nfunction assertNumber(obj, objName) {\n  if (typeof obj !== 'number') {\n    throw new TypeError(objName + ' expected to be a number but was: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertNumber = assertNumber;\n/**\n * Assert it's a number or integer\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {number|Integer} The subject object\n * @throws {TypeError} when the supplied param is not a number or integer\n */\nfunction assertNumberOrInteger(obj, objName) {\n  if (typeof obj !== 'number' && typeof obj !== 'bigint' && !(0, integer_1.isInt)(obj)) {\n    throw new TypeError(objName + ' expected to be either a number or an Integer object but was: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertNumberOrInteger = assertNumberOrInteger;\n/**\n * Assert it's a valid datae\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {Date} The valida date\n * @throws {TypeError} when the supplied param is not a valid date\n */\nfunction assertValidDate(obj, objName) {\n  if (Object.prototype.toString.call(obj) !== '[object Date]') {\n    throw new TypeError(objName + ' expected to be a standard JavaScript Date but was: ' + (0, json_1.stringify)(obj));\n  }\n  if (Number.isNaN(obj.getTime())) {\n    throw new TypeError(objName + ' expected to be valid JavaScript Date but its time was NaN: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertValidDate = assertValidDate;\n/**\n * Validates a cypher query string\n * @param {any} obj The query\n * @returns {void}\n * @throws {TypeError} if the query is not valid\n */\nfunction assertCypherQuery(obj) {\n  assertString(obj, 'Cypher query');\n  if (obj.trim().length === 0) {\n    throw new TypeError('Cypher query is expected to be a non-empty string.');\n  }\n}\n/**\n * Validates if the query parameters is an object\n * @param {any} obj The parameters\n * @returns {void}\n * @throws {TypeError} if the parameters is not valid\n */\nfunction assertQueryParameters(obj) {\n  if (!isObject(obj)) {\n    // objects created with `Object.create(null)` do not have a constructor property\n    var constructor = obj.constructor ? ' ' + obj.constructor.name : '';\n    throw new TypeError(\"Query parameters are expected to either be undefined/null or an object, given:\" + constructor + \" \" + obj);\n  }\n}\n/**\n * Verify if the supplied object is a string\n *\n * @param str The string\n * @returns {boolean} True if the supplied object is an string\n */\nfunction isString(str) {\n  return Object.prototype.toString.call(str) === '[object String]';\n}\nexports.isString = isString;","map":{"version":3,"names":["Object","defineProperty","exports","value","ENCRYPTION_OFF","ENCRYPTION_ON","validateQueryAndParameters","assertValidDate","assertNumberOrInteger","assertNumber","assertString","assertObject","isString","isObject","isEmptyObjectOrNull","integer_1","require","json_1","obj","prop","prototype","hasOwnProperty","bind","Array","isArray","query","parameters","opt","validatedQuery","params","skipAsserts","String","toString","text","assertCypherQuery","assertQueryParameters","objName","TypeError","stringify","isInt","call","Number","isNaN","getTime","trim","length","constructor","name","str"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-core/lib/internal/util.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ENCRYPTION_OFF = exports.ENCRYPTION_ON = exports.validateQueryAndParameters = exports.assertValidDate = exports.assertNumberOrInteger = exports.assertNumber = exports.assertString = exports.assertObject = exports.isString = exports.isObject = exports.isEmptyObjectOrNull = void 0;\nvar integer_1 = require(\"../integer\");\nvar json_1 = require(\"../json\");\nvar ENCRYPTION_ON = 'ENCRYPTION_ON';\nexports.ENCRYPTION_ON = ENCRYPTION_ON;\nvar ENCRYPTION_OFF = 'ENCRYPTION_OFF';\nexports.ENCRYPTION_OFF = ENCRYPTION_OFF;\n/**\n * Verifies if the object is null or empty\n * @param obj The subject object\n * @returns {boolean} True if it's empty object or null\n */\nfunction isEmptyObjectOrNull(obj) {\n    if (obj === null) {\n        return true;\n    }\n    if (!isObject(obj)) {\n        return false;\n    }\n    for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.bind(obj, prop)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isEmptyObjectOrNull = isEmptyObjectOrNull;\n/**\n * Verify if it's an object\n * @param obj The subject\n * @returns {boolean} True if it's an object\n */\nfunction isObject(obj) {\n    return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\n}\nexports.isObject = isObject;\n/**\n * Check and normalize given query and parameters.\n * @param {string|{text: string, parameters: Object}} query the query to check.\n * @param {Object} parameters\n * @return {{validatedQuery: string|{text: string, parameters: Object}, params: Object}} the normalized query with parameters.\n * @throws TypeError when either given query or parameters are invalid.\n */\nfunction validateQueryAndParameters(query, parameters, opt) {\n    var validatedQuery = '';\n    var params = parameters || {};\n    var skipAsserts = (opt === null || opt === void 0 ? void 0 : opt.skipAsserts) || false;\n    if (typeof query === 'string') {\n        validatedQuery = query;\n    }\n    else if (query instanceof String) {\n        validatedQuery = query.toString();\n    }\n    else if (typeof query === 'object' && query.text) {\n        validatedQuery = query.text;\n        params = query.parameters || {};\n    }\n    if (!skipAsserts) {\n        assertCypherQuery(validatedQuery);\n        assertQueryParameters(params);\n    }\n    return { validatedQuery: validatedQuery, params: params };\n}\nexports.validateQueryAndParameters = validateQueryAndParameters;\n/**\n * Assert it's a object\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {object} The subject object\n * @throws {TypeError} when the supplied param is not an object\n */\nfunction assertObject(obj, objName) {\n    if (!isObject(obj)) {\n        throw new TypeError(objName + ' expected to be an object but was: ' + (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertObject = assertObject;\n/**\n * Assert it's a string\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {string} The subject string\n * @throws {TypeError} when the supplied param is not a string\n */\nfunction assertString(obj, objName) {\n    if (!isString(obj)) {\n        throw new TypeError(objName + ' expected to be string but was: ' + (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertString = assertString;\n/**\n * Assert it's a number\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {number} The number\n * @throws {TypeError} when the supplied param is not a number\n */\nfunction assertNumber(obj, objName) {\n    if (typeof obj !== 'number') {\n        throw new TypeError(objName + ' expected to be a number but was: ' + (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertNumber = assertNumber;\n/**\n * Assert it's a number or integer\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {number|Integer} The subject object\n * @throws {TypeError} when the supplied param is not a number or integer\n */\nfunction assertNumberOrInteger(obj, objName) {\n    if (typeof obj !== 'number' && typeof obj !== 'bigint' && !(0, integer_1.isInt)(obj)) {\n        throw new TypeError(objName +\n            ' expected to be either a number or an Integer object but was: ' +\n            (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertNumberOrInteger = assertNumberOrInteger;\n/**\n * Assert it's a valid datae\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {Date} The valida date\n * @throws {TypeError} when the supplied param is not a valid date\n */\nfunction assertValidDate(obj, objName) {\n    if (Object.prototype.toString.call(obj) !== '[object Date]') {\n        throw new TypeError(objName +\n            ' expected to be a standard JavaScript Date but was: ' +\n            (0, json_1.stringify)(obj));\n    }\n    if (Number.isNaN(obj.getTime())) {\n        throw new TypeError(objName +\n            ' expected to be valid JavaScript Date but its time was NaN: ' +\n            (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertValidDate = assertValidDate;\n/**\n * Validates a cypher query string\n * @param {any} obj The query\n * @returns {void}\n * @throws {TypeError} if the query is not valid\n */\nfunction assertCypherQuery(obj) {\n    assertString(obj, 'Cypher query');\n    if (obj.trim().length === 0) {\n        throw new TypeError('Cypher query is expected to be a non-empty string.');\n    }\n}\n/**\n * Validates if the query parameters is an object\n * @param {any} obj The parameters\n * @returns {void}\n * @throws {TypeError} if the parameters is not valid\n */\nfunction assertQueryParameters(obj) {\n    if (!isObject(obj)) {\n        // objects created with `Object.create(null)` do not have a constructor property\n        var constructor = obj.constructor ? ' ' + obj.constructor.name : '';\n        throw new TypeError(\"Query parameters are expected to either be undefined/null or an object, given:\" + constructor + \" \" + obj);\n    }\n}\n/**\n * Verify if the supplied object is a string\n *\n * @param str The string\n * @returns {boolean} True if the supplied object is an string\n */\nfunction isString(str) {\n    return Object.prototype.toString.call(str) === '[object String]';\n}\nexports.isString = isString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}