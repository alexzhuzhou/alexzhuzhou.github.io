{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertImpersonatedUserIsEmpty = exports.assertTxConfigIsEmpty = exports.assertDatabaseIsEmpty = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n/**\n * @param {TxConfig} txConfig the auto-commit transaction configuration.\n * @param {function(error: string)} onProtocolError called when the txConfig is not empty.\n * @param {ResultStreamObserver} observer the response observer.\n */\nfunction assertTxConfigIsEmpty(txConfig, onProtocolError, observer) {\n  if (onProtocolError === void 0) {\n    onProtocolError = function onProtocolError() {};\n  }\n  if (txConfig && !txConfig.isEmpty()) {\n    var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support transaction configuration. ' + 'Please upgrade to neo4j 3.5.0 or later in order to use this functionality');\n    // unsupported API was used, consider this a fatal error for the current connection\n    onProtocolError(error.message);\n    observer.onError(error);\n    throw error;\n  }\n}\nexports.assertTxConfigIsEmpty = assertTxConfigIsEmpty;\n/**\n * Asserts that the passed-in database name is empty.\n * @param {string} database\n * @param {fuction(err: String)} onProtocolError Called when it doesn't have database set\n */\nfunction assertDatabaseIsEmpty(database, onProtocolError, observer) {\n  if (onProtocolError === void 0) {\n    onProtocolError = function onProtocolError() {};\n  }\n  if (database) {\n    var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support multiple databases. ' + 'Please upgrade to neo4j 4.0.0 or later in order to use this functionality');\n    // unsupported API was used, consider this a fatal error for the current connection\n    onProtocolError(error.message);\n    observer.onError(error);\n    throw error;\n  }\n}\nexports.assertDatabaseIsEmpty = assertDatabaseIsEmpty;\n/**\n * Asserts that the passed-in impersonated user is empty\n * @param {string} impersonatedUser\n * @param {function (err:Error)} onProtocolError Called when it does have impersonated user set\n * @param {any} observer\n */\nfunction assertImpersonatedUserIsEmpty(impersonatedUser, onProtocolError, observer) {\n  if (onProtocolError === void 0) {\n    onProtocolError = function onProtocolError() {};\n  }\n  if (impersonatedUser) {\n    var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support user impersonation. ' + 'Please upgrade to neo4j 4.4.0 or later in order to use this functionality. ' + (\"Trying to impersonate \" + impersonatedUser + \".\"));\n    // unsupported API was used, consider this a fatal error for the current connection\n    onProtocolError(error.message);\n    observer.onError(error);\n    throw error;\n  }\n}\nexports.assertImpersonatedUserIsEmpty = assertImpersonatedUserIsEmpty;","map":{"version":3,"names":["Object","defineProperty","exports","value","assertImpersonatedUserIsEmpty","assertTxConfigIsEmpty","assertDatabaseIsEmpty","neo4j_driver_core_1","require","txConfig","onProtocolError","observer","isEmpty","error","newError","message","onError","database","impersonatedUser"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertImpersonatedUserIsEmpty = exports.assertTxConfigIsEmpty = exports.assertDatabaseIsEmpty = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n/**\n * @param {TxConfig} txConfig the auto-commit transaction configuration.\n * @param {function(error: string)} onProtocolError called when the txConfig is not empty.\n * @param {ResultStreamObserver} observer the response observer.\n */\nfunction assertTxConfigIsEmpty(txConfig, onProtocolError, observer) {\n    if (onProtocolError === void 0) { onProtocolError = function () { }; }\n    if (txConfig && !txConfig.isEmpty()) {\n        var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support transaction configuration. ' +\n            'Please upgrade to neo4j 3.5.0 or later in order to use this functionality');\n        // unsupported API was used, consider this a fatal error for the current connection\n        onProtocolError(error.message);\n        observer.onError(error);\n        throw error;\n    }\n}\nexports.assertTxConfigIsEmpty = assertTxConfigIsEmpty;\n/**\n * Asserts that the passed-in database name is empty.\n * @param {string} database\n * @param {fuction(err: String)} onProtocolError Called when it doesn't have database set\n */\nfunction assertDatabaseIsEmpty(database, onProtocolError, observer) {\n    if (onProtocolError === void 0) { onProtocolError = function () { }; }\n    if (database) {\n        var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support multiple databases. ' +\n            'Please upgrade to neo4j 4.0.0 or later in order to use this functionality');\n        // unsupported API was used, consider this a fatal error for the current connection\n        onProtocolError(error.message);\n        observer.onError(error);\n        throw error;\n    }\n}\nexports.assertDatabaseIsEmpty = assertDatabaseIsEmpty;\n/**\n * Asserts that the passed-in impersonated user is empty\n * @param {string} impersonatedUser\n * @param {function (err:Error)} onProtocolError Called when it does have impersonated user set\n * @param {any} observer\n */\nfunction assertImpersonatedUserIsEmpty(impersonatedUser, onProtocolError, observer) {\n    if (onProtocolError === void 0) { onProtocolError = function () { }; }\n    if (impersonatedUser) {\n        var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support user impersonation. ' +\n            'Please upgrade to neo4j 4.4.0 or later in order to use this functionality. ' +\n            (\"Trying to impersonate \" + impersonatedUser + \".\"));\n        // unsupported API was used, consider this a fatal error for the current connection\n        onProtocolError(error.message);\n        observer.onError(error);\n        throw error;\n    }\n}\nexports.assertImpersonatedUserIsEmpty = assertImpersonatedUserIsEmpty;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,6BAA6B,GAAGF,OAAO,CAACG,qBAAqB,GAAGH,OAAO,CAACI,qBAAqB,GAAG,KAAK,CAAC;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA,SAASH,qBAAqBA,CAACI,QAAQ,EAAEC,eAAe,EAAEC,QAAQ,EAAE;EAChE,IAAID,eAAe,KAAK,KAAK,CAAC,EAAE;IAAEA,eAAe,GAAG,SAAAA,gBAAA,EAAY,CAAE,CAAC;EAAE;EACrE,IAAID,QAAQ,IAAI,CAACA,QAAQ,CAACG,OAAO,EAAE,EAAE;IACjC,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAEN,mBAAmB,CAACO,QAAQ,EAAE,uFAAuF,GACjI,2EAA2E,CAAC;IAChF;IACAJ,eAAe,CAACG,KAAK,CAACE,OAAO,CAAC;IAC9BJ,QAAQ,CAACK,OAAO,CAACH,KAAK,CAAC;IACvB,MAAMA,KAAK;EACf;AACJ;AACAX,OAAO,CAACG,qBAAqB,GAAGA,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACW,QAAQ,EAAEP,eAAe,EAAEC,QAAQ,EAAE;EAChE,IAAID,eAAe,KAAK,KAAK,CAAC,EAAE;IAAEA,eAAe,GAAG,SAAAA,gBAAA,EAAY,CAAE,CAAC;EAAE;EACrE,IAAIO,QAAQ,EAAE;IACV,IAAIJ,KAAK,GAAG,CAAC,CAAC,EAAEN,mBAAmB,CAACO,QAAQ,EAAE,gFAAgF,GAC1H,2EAA2E,CAAC;IAChF;IACAJ,eAAe,CAACG,KAAK,CAACE,OAAO,CAAC;IAC9BJ,QAAQ,CAACK,OAAO,CAACH,KAAK,CAAC;IACvB,MAAMA,KAAK;EACf;AACJ;AACAX,OAAO,CAACI,qBAAqB,GAAGA,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,6BAA6BA,CAACc,gBAAgB,EAAER,eAAe,EAAEC,QAAQ,EAAE;EAChF,IAAID,eAAe,KAAK,KAAK,CAAC,EAAE;IAAEA,eAAe,GAAG,SAAAA,gBAAA,EAAY,CAAE,CAAC;EAAE;EACrE,IAAIQ,gBAAgB,EAAE;IAClB,IAAIL,KAAK,GAAG,CAAC,CAAC,EAAEN,mBAAmB,CAACO,QAAQ,EAAE,gFAAgF,GAC1H,6EAA6E,IAC5E,wBAAwB,GAAGI,gBAAgB,GAAG,GAAG,CAAC,CAAC;IACxD;IACAR,eAAe,CAACG,KAAK,CAACE,OAAO,CAAC;IAC9BJ,QAAQ,CAACK,OAAO,CAACH,KAAK,CAAC;IACvB,MAAMA,KAAK;EACf;AACJ;AACAX,OAAO,CAACE,6BAA6B,GAAGA,6BAA6B"},"metadata":{},"sourceType":"script"}