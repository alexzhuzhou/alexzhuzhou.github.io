{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = void 0;\n// 64-bit Integer library, originally from Long.js by dcodeIO\n// https://github.com/dcodeIO/Long.js\n// License Apache 2\nvar error_1 = require(\"./error\");\n/**\n * A cache of the Integer representations of small integer values.\n * @type {!Object}\n * @inner\n * @private\n */\n// eslint-disable-next-line no-use-before-define\nvar INT_CACHE = new Map();\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n * See exported functions for more convenient ways of operating integers.\n * Use `int()` function to create new integers, `isInt()` to check if given object is integer,\n * `inSafeRange()` to check if it is safe to convert given value to native number,\n * `toNumber()` and `toString()` to convert given integer to number or string respectively.\n * @access public\n * @exports Integer\n * @class A Integer class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n *\n * @deprecated This class will be removed or made internal in a future version of the driver.\n * Please configure your driver to use BigInt instead.\n *\n * @constructor\n */\nvar Integer = /** @class */function () {\n  function Integer(low, high) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n    this.low = low || 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n    this.high = high || 0;\n  }\n  // The internal representation of an Integer is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // JavaScript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within JavaScript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  Integer.prototype.inSafeRange = function () {\n    return this.greaterThanOrEqual(Integer.MIN_SAFE_VALUE) && this.lessThanOrEqual(Integer.MAX_SAFE_VALUE);\n  };\n  /**\n   * Converts the Integer to an exact javascript Number, assuming it is a 32 bit integer.\n   * @returns {number}\n   * @expose\n   */\n  Integer.prototype.toInt = function () {\n    return this.low;\n  };\n  /**\n   * Converts the Integer to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @returns {number}\n   * @expose\n   */\n  Integer.prototype.toNumber = function () {\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Integer to a BigInt representation of this value\n   * @returns {bigint}\n   * @expose\n   */\n  Integer.prototype.toBigInt = function () {\n    if (this.isZero()) {\n      return BigInt(0);\n    } else if (this.isPositive()) {\n      return BigInt(this.high >>> 0) * BigInt(TWO_PWR_32_DBL) + BigInt(this.low >>> 0);\n    } else {\n      var negate = this.negate();\n      return BigInt(-1) * (BigInt(negate.high >>> 0) * BigInt(TWO_PWR_32_DBL) + BigInt(negate.low >>> 0));\n    }\n  };\n  /**\n   * Converts the Integer to native number or -Infinity/+Infinity when it does not fit.\n   * @return {number}\n   * @package\n   */\n  Integer.prototype.toNumberOrInfinity = function () {\n    if (this.lessThan(Integer.MIN_SAFE_VALUE)) {\n      return Number.NEGATIVE_INFINITY;\n    } else if (this.greaterThan(Integer.MAX_SAFE_VALUE)) {\n      return Number.POSITIVE_INFINITY;\n    } else {\n      return this.toNumber();\n    }\n  };\n  /**\n   * Converts the Integer to a string written in the specified radix.\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   * @expose\n   */\n  Integer.prototype.toString = function (radix) {\n    radix = radix || 10;\n    if (radix < 2 || radix > 36) {\n      throw RangeError('radix out of range: ' + radix);\n    }\n    if (this.isZero()) {\n      return '0';\n    }\n    var rem;\n    if (this.isNegative()) {\n      if (this.equals(Integer.MIN_VALUE)) {\n        // We need to change the Integer value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixInteger = Integer.fromNumber(radix);\n        var div = this.div(radixInteger);\n        rem = div.multiply(radixInteger).subtract(this);\n        return div.toString(radix) + rem.toInt().toString(radix);\n      } else {\n        return '-' + this.negate().toString(radix);\n      }\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = Integer.fromNumber(Math.pow(radix, 6));\n    rem = this;\n    var result = '';\n    while (true) {\n      var remDiv = rem.div(radixToPower);\n      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n      var digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) {\n        return digits + result;\n      } else {\n        while (digits.length < 6) {\n          digits = '0' + digits;\n        }\n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @returns {number} Signed high bits\n   * @expose\n   */\n  Integer.prototype.getHighBits = function () {\n    return this.high;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @returns {number} Signed low bits\n   * @expose\n   */\n  Integer.prototype.getLowBits = function () {\n    return this.low;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Integer.\n   * @returns {number}\n   * @expose\n   */\n  Integer.prototype.getNumBitsAbs = function () {\n    if (this.isNegative()) {\n      return this.equals(Integer.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\n    }\n    var val = this.high !== 0 ? this.high : this.low;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & 1 << bit) !== 0) {\n        break;\n      }\n    }\n    return this.high !== 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Integer's value equals zero.\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.isZero = function () {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Integer's value is negative.\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.isNegative = function () {\n    return this.high < 0;\n  };\n  /**\n   * Tests if this Integer's value is positive.\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.isPositive = function () {\n    return this.high >= 0;\n  };\n  /**\n   * Tests if this Integer's value is odd.\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.isOdd = function () {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Integer's value is even.\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.isEven = function () {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Integer's value equals the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.equals = function (other) {\n    var theOther = Integer.fromValue(other);\n    return this.high === theOther.high && this.low === theOther.low;\n  };\n  /**\n   * Tests if this Integer's value differs from the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.notEquals = function (other) {\n    return !this.equals( /* validates */other);\n  };\n  /**\n   * Tests if this Integer's value is less than the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.lessThan = function (other) {\n    return this.compare( /* validates */other) < 0;\n  };\n  /**\n   * Tests if this Integer's value is less than or equal the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.lessThanOrEqual = function (other) {\n    return this.compare( /* validates */other) <= 0;\n  };\n  /**\n   * Tests if this Integer's value is greater than the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.greaterThan = function (other) {\n    return this.compare( /* validates */other) > 0;\n  };\n  /**\n   * Tests if this Integer's value is greater than or equal the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.prototype.greaterThanOrEqual = function (other) {\n    return this.compare( /* validates */other) >= 0;\n  };\n  /**\n   * Compares this Integer's value with the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   * @expose\n   */\n  Integer.prototype.compare = function (other) {\n    var theOther = Integer.fromValue(other);\n    if (this.equals(theOther)) {\n      return 0;\n    }\n    var thisNeg = this.isNegative();\n    var otherNeg = theOther.isNegative();\n    if (thisNeg && !otherNeg) {\n      return -1;\n    }\n    if (!thisNeg && otherNeg) {\n      return 1;\n    }\n    // At this point the sign bits are the same\n    return this.subtract(theOther).isNegative() ? -1 : 1;\n  };\n  /**\n   * Negates this Integer's value.\n   * @returns {!Integer} Negated Integer\n   * @expose\n   */\n  Integer.prototype.negate = function () {\n    if (this.equals(Integer.MIN_VALUE)) {\n      return Integer.MIN_VALUE;\n    }\n    return this.not().add(Integer.ONE);\n  };\n  /**\n   * Returns the sum of this and the specified Integer.\n   * @param {!Integer|number|string} addend Addend\n   * @returns {!Integer} Sum\n   * @expose\n   */\n  Integer.prototype.add = function (addend) {\n    var theAddend = Integer.fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xffff;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xffff;\n    var b48 = theAddend.high >>> 16;\n    var b32 = theAddend.high & 0xffff;\n    var b16 = theAddend.low >>> 16;\n    var b00 = theAddend.low & 0xffff;\n    var c48 = 0;\n    var c32 = 0;\n    var c16 = 0;\n    var c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 + b48;\n    c48 &= 0xffff;\n    return Integer.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n  };\n  /**\n   * Returns the difference of this and the specified Integer.\n   * @param {!Integer|number|string} subtrahend Subtrahend\n   * @returns {!Integer} Difference\n   * @expose\n   */\n  Integer.prototype.subtract = function (subtrahend) {\n    var theSubtrahend = Integer.fromValue(subtrahend);\n    return this.add(theSubtrahend.negate());\n  };\n  /**\n   * Returns the product of this and the specified Integer.\n   * @param {!Integer|number|string} multiplier Multiplier\n   * @returns {!Integer} Product\n   * @expose\n   */\n  Integer.prototype.multiply = function (multiplier) {\n    if (this.isZero()) {\n      return Integer.ZERO;\n    }\n    var theMultiplier = Integer.fromValue(multiplier);\n    if (theMultiplier.isZero()) {\n      return Integer.ZERO;\n    }\n    if (this.equals(Integer.MIN_VALUE)) {\n      return theMultiplier.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n    }\n    if (theMultiplier.equals(Integer.MIN_VALUE)) {\n      return this.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n    }\n    if (this.isNegative()) {\n      if (theMultiplier.isNegative()) {\n        return this.negate().multiply(theMultiplier.negate());\n      } else {\n        return this.negate().multiply(theMultiplier).negate();\n      }\n    } else if (theMultiplier.isNegative()) {\n      return this.multiply(theMultiplier.negate()).negate();\n    }\n    // If both longs are small, use float multiplication\n    if (this.lessThan(TWO_PWR_24) && theMultiplier.lessThan(TWO_PWR_24)) {\n      return Integer.fromNumber(this.toNumber() * theMultiplier.toNumber());\n    }\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xffff;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xffff;\n    var b48 = theMultiplier.high >>> 16;\n    var b32 = theMultiplier.high & 0xffff;\n    var b16 = theMultiplier.low >>> 16;\n    var b00 = theMultiplier.low & 0xffff;\n    var c48 = 0;\n    var c32 = 0;\n    var c16 = 0;\n    var c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xffff;\n    return Integer.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n  };\n  /**\n   * Returns this Integer divided by the specified.\n   * @param {!Integer|number|string} divisor Divisor\n   * @returns {!Integer} Quotient\n   * @expose\n   */\n  Integer.prototype.div = function (divisor) {\n    var theDivisor = Integer.fromValue(divisor);\n    if (theDivisor.isZero()) {\n      throw (0, error_1.newError)('division by zero');\n    }\n    if (this.isZero()) {\n      return Integer.ZERO;\n    }\n    var approx, rem, res;\n    if (this.equals(Integer.MIN_VALUE)) {\n      if (theDivisor.equals(Integer.ONE) || theDivisor.equals(Integer.NEG_ONE)) {\n        return Integer.MIN_VALUE;\n      }\n      if (theDivisor.equals(Integer.MIN_VALUE)) {\n        return Integer.ONE;\n      } else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shiftRight(1);\n        approx = halfThis.div(theDivisor).shiftLeft(1);\n        if (approx.equals(Integer.ZERO)) {\n          return theDivisor.isNegative() ? Integer.ONE : Integer.NEG_ONE;\n        } else {\n          rem = this.subtract(theDivisor.multiply(approx));\n          res = approx.add(rem.div(theDivisor));\n          return res;\n        }\n      }\n    } else if (theDivisor.equals(Integer.MIN_VALUE)) {\n      return Integer.ZERO;\n    }\n    if (this.isNegative()) {\n      if (theDivisor.isNegative()) {\n        return this.negate().div(theDivisor.negate());\n      }\n      return this.negate().div(theDivisor).negate();\n    } else if (theDivisor.isNegative()) {\n      return this.div(theDivisor.negate()).negate();\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    res = Integer.ZERO;\n    rem = this;\n    while (rem.greaterThanOrEqual(theDivisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / theDivisor.toNumber()));\n      // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      var approxRes = Integer.fromNumber(approx);\n      var approxRem = approxRes.multiply(theDivisor);\n      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n        approx -= delta;\n        approxRes = Integer.fromNumber(approx);\n        approxRem = approxRes.multiply(theDivisor);\n      }\n      // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n      if (approxRes.isZero()) {\n        approxRes = Integer.ONE;\n      }\n      res = res.add(approxRes);\n      rem = rem.subtract(approxRem);\n    }\n    return res;\n  };\n  /**\n   * Returns this Integer modulo the specified.\n   * @param {!Integer|number|string} divisor Divisor\n   * @returns {!Integer} Remainder\n   * @expose\n   */\n  Integer.prototype.modulo = function (divisor) {\n    var theDivisor = Integer.fromValue(divisor);\n    return this.subtract(this.div(theDivisor).multiply(theDivisor));\n  };\n  /**\n   * Returns the bitwise NOT of this Integer.\n   * @returns {!Integer}\n   * @expose\n   */\n  Integer.prototype.not = function () {\n    return Integer.fromBits(~this.low, ~this.high);\n  };\n  /**\n   * Returns the bitwise AND of this Integer and the specified.\n   * @param {!Integer|number|string} other Other Integer\n   * @returns {!Integer}\n   * @expose\n   */\n  Integer.prototype.and = function (other) {\n    var theOther = Integer.fromValue(other);\n    return Integer.fromBits(this.low & theOther.low, this.high & theOther.high);\n  };\n  /**\n   * Returns the bitwise OR of this Integer and the specified.\n   * @param {!Integer|number|string} other Other Integer\n   * @returns {!Integer}\n   * @expose\n   */\n  Integer.prototype.or = function (other) {\n    var theOther = Integer.fromValue(other);\n    return Integer.fromBits(this.low | theOther.low, this.high | theOther.high);\n  };\n  /**\n   * Returns the bitwise XOR of this Integer and the given one.\n   * @param {!Integer|number|string} other Other Integer\n   * @returns {!Integer}\n   * @expose\n   */\n  Integer.prototype.xor = function (other) {\n    var theOther = Integer.fromValue(other);\n    return Integer.fromBits(this.low ^ theOther.low, this.high ^ theOther.high);\n  };\n  /**\n   * Returns this Integer with bits shifted to the left by the given amount.\n   * @param {number|!Integer} numBits Number of bits\n   * @returns {!Integer} Shifted Integer\n   * @expose\n   */\n  Integer.prototype.shiftLeft = function (numBits) {\n    var bitsCount = Integer.toNumber(numBits);\n    if ((bitsCount &= 63) === 0) {\n      return Integer.ZERO;\n    } else if (bitsCount < 32) {\n      return Integer.fromBits(this.low << bitsCount, this.high << bitsCount | this.low >>> 32 - bitsCount);\n    } else {\n      return Integer.fromBits(0, this.low << bitsCount - 32);\n    }\n  };\n  /**\n   * Returns this Integer with bits arithmetically shifted to the right by the given amount.\n   * @param {number|!Integer} numBits Number of bits\n   * @returns {!Integer} Shifted Integer\n   * @expose\n   */\n  Integer.prototype.shiftRight = function (numBits) {\n    var bitsCount = Integer.toNumber(numBits);\n    if ((bitsCount &= 63) === 0) {\n      return Integer.ZERO;\n    } else if (numBits < 32) {\n      return Integer.fromBits(this.low >>> bitsCount | this.high << 32 - bitsCount, this.high >> bitsCount);\n    } else {\n      return Integer.fromBits(this.high >> bitsCount - 32, this.high >= 0 ? 0 : -1);\n    }\n  };\n  /**\n   * Tests if the specified object is a Integer.\n   * @access private\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.isInteger = function (obj) {\n    return (obj && obj.__isInteger__) === true;\n  };\n  /**\n   * Returns a Integer representing the given 32 bit integer value.\n   * @access private\n   * @param {number} value The 32 bit integer in question\n   * @returns {!Integer} The corresponding Integer value\n   * @expose\n   */\n  Integer.fromInt = function (value) {\n    var obj, cachedObj;\n    value = value | 0;\n    if (value >= -128 && value < 128) {\n      cachedObj = INT_CACHE.get(value);\n      if (cachedObj) {\n        return cachedObj;\n      }\n    }\n    obj = new Integer(value, value < 0 ? -1 : 0);\n    if (value >= -128 && value < 128) {\n      INT_CACHE.set(value, obj);\n    }\n    return obj;\n  };\n  /**\n   * Returns a Integer representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @access private\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @returns {!Integer} The corresponding Integer value\n   * @expose\n   */\n  Integer.fromBits = function (lowBits, highBits) {\n    return new Integer(lowBits, highBits);\n  };\n  /**\n   * Returns a Integer representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @access private\n   * @param {number} value The number in question\n   * @returns {!Integer} The corresponding Integer value\n   * @expose\n   */\n  Integer.fromNumber = function (value) {\n    if (isNaN(value) || !isFinite(value)) {\n      return Integer.ZERO;\n    }\n    if (value <= -TWO_PWR_63_DBL) {\n      return Integer.MIN_VALUE;\n    }\n    if (value + 1 >= TWO_PWR_63_DBL) {\n      return Integer.MAX_VALUE;\n    }\n    if (value < 0) {\n      return Integer.fromNumber(-value).negate();\n    }\n    return new Integer(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);\n  };\n  /**\n   * Returns a Integer representation of the given string, written using the specified radix.\n   * @access private\n   * @param {string} str The textual representation of the Integer\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Integer} The corresponding Integer value\n   * @expose\n   */\n  Integer.fromString = function (str, radix) {\n    if (str.length === 0) {\n      throw (0, error_1.newError)('number format error: empty string');\n    }\n    if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity') {\n      return Integer.ZERO;\n    }\n    radix = radix || 10;\n    if (radix < 2 || radix > 36) {\n      throw (0, error_1.newError)('radix out of range: ' + radix);\n    }\n    var p;\n    if ((p = str.indexOf('-')) > 0) {\n      throw (0, error_1.newError)('number format error: interior \"-\" character: ' + str);\n    } else if (p === 0) {\n      return Integer.fromString(str.substring(1), radix).negate();\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = Integer.fromNumber(Math.pow(radix, 8));\n    var result = Integer.ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i);\n      var value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = Integer.fromNumber(Math.pow(radix, size));\n        result = result.multiply(power).add(Integer.fromNumber(value));\n      } else {\n        result = result.multiply(radixToPower);\n        result = result.add(Integer.fromNumber(value));\n      }\n    }\n    return result;\n  };\n  /**\n   * Converts the specified value to a Integer.\n   * @access private\n   * @param {!Integer|number|string|bigint|!{low: number, high: number}} val Value\n   * @returns {!Integer}\n   * @expose\n   */\n  Integer.fromValue = function (val) {\n    if (val /* is compatible */ instanceof Integer) {\n      return val;\n    }\n    if (typeof val === 'number') {\n      return Integer.fromNumber(val);\n    }\n    if (typeof val === 'string') {\n      return Integer.fromString(val);\n    }\n    if (typeof val === 'bigint') {\n      return Integer.fromString(val.toString());\n    }\n    // Throws for non-objects, converts non-instanceof Integer:\n    return new Integer(val.low, val.high);\n  };\n  /**\n   * Converts the specified value to a number.\n   * @access private\n   * @param {!Integer|number|string|!{low: number, high: number}} val Value\n   * @returns {number}\n   * @expose\n   */\n  Integer.toNumber = function (val) {\n    switch (typeof val) {\n      case 'number':\n        return val;\n      case 'bigint':\n        return Number(val);\n      default:\n        return Integer.fromValue(val).toNumber();\n    }\n  };\n  /**\n   * Converts the specified value to a string.\n   * @access private\n   * @param {!Integer|number|string|!{low: number, high: number}} val Value\n   * @param {number} radix optional radix for string conversion, defaults to 10\n   * @returns {string}\n   * @expose\n   */\n  Integer.toString = function (val, radix) {\n    return Integer.fromValue(val).toString(radix);\n  };\n  /**\n   * Checks if the given value is in the safe range in order to be converted to a native number\n   * @access private\n   * @param {!Integer|number|string|!{low: number, high: number}} val Value\n   * @param {number} radix optional radix for string conversion, defaults to 10\n   * @returns {boolean}\n   * @expose\n   */\n  Integer.inSafeRange = function (val) {\n    return Integer.fromValue(val).inSafeRange();\n  };\n  /**\n   * Signed zero.\n   * @type {!Integer}\n   * @expose\n   */\n  Integer.ZERO = Integer.fromInt(0);\n  /**\n   * Signed one.\n   * @type {!Integer}\n   * @expose\n   */\n  Integer.ONE = Integer.fromInt(1);\n  /**\n   * Signed negative one.\n   * @type {!Integer}\n   * @expose\n   */\n  Integer.NEG_ONE = Integer.fromInt(-1);\n  /**\n   * Maximum signed value.\n   * @type {!Integer}\n   * @expose\n   */\n  Integer.MAX_VALUE = Integer.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n  /**\n   * Minimum signed value.\n   * @type {!Integer}\n   * @expose\n   */\n  Integer.MIN_VALUE = Integer.fromBits(0, 0x80000000 | 0);\n  /**\n   * Minimum safe value.\n   * @type {!Integer}\n   * @expose\n   */\n  Integer.MIN_SAFE_VALUE = Integer.fromBits(0x1 | 0, 0xffffffffffe00000 | 0);\n  /**\n   * Maximum safe value.\n   * @type {!Integer}\n   * @expose\n   */\n  Integer.MAX_SAFE_VALUE = Integer.fromBits(0xffffffff | 0, 0x1fffff | 0);\n  /**\n   * An indicator used to reliably determine if an object is a Integer or not.\n   * @type {boolean}\n   * @const\n   * @expose\n   * @private\n   */\n  Integer.__isInteger__ = true;\n  return Integer;\n}();\nObject.defineProperty(Integer.prototype, '__isInteger__', {\n  value: true,\n  enumerable: false,\n  configurable: false\n});\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Integer}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);\n/**\n * Cast value to Integer type.\n * @access public\n * @param {Mixed} value - The value to use.\n * @return {Integer} - An object of type Integer.\n */\nvar int = Integer.fromValue;\nexports.int = int;\n/**\n * Check if a variable is of Integer type.\n * @access public\n * @param {Mixed} value - The variable to check.\n * @return {Boolean} - Is it of the Integer type?\n */\nvar isInt = Integer.isInteger;\nexports.isInt = isInt;\n/**\n * Check if a variable can be safely converted to a number\n * @access public\n * @param {Mixed} value - The variable to check\n * @return {Boolean} - true if it is safe to call toNumber on variable otherwise false\n */\nvar inSafeRange = Integer.inSafeRange;\nexports.inSafeRange = inSafeRange;\n/**\n * Converts a variable to a number\n * @access public\n * @param {Mixed} value - The variable to convert\n * @return {number} - the variable as a number\n */\nvar toNumber = Integer.toNumber;\nexports.toNumber = toNumber;\n/**\n * Converts the integer to a string representation\n * @access public\n * @param {Mixed} value - The variable to convert\n * @param {number} radix - radix to use in string conversion, defaults to 10\n * @return {string} - returns a string representation of the integer\n */\nvar toString = Integer.toString;\nexports.toString = toString;\nexports.default = Integer;","map":{"version":3,"names":["Object","defineProperty","exports","value","toString","toNumber","inSafeRange","isInt","int","error_1","require","INT_CACHE","Map","Integer","low","high","prototype","greaterThanOrEqual","MIN_SAFE_VALUE","lessThanOrEqual","MAX_SAFE_VALUE","toInt","TWO_PWR_32_DBL","toBigInt","isZero","BigInt","isPositive","negate","toNumberOrInfinity","lessThan","Number","NEGATIVE_INFINITY","greaterThan","POSITIVE_INFINITY","radix","RangeError","rem","isNegative","equals","MIN_VALUE","radixInteger","fromNumber","div","multiply","subtract","radixToPower","Math","pow","result","remDiv","intval","digits","length","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","isEven","other","theOther","fromValue","notEquals","compare","thisNeg","otherNeg","not","add","ONE","addend","theAddend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","fromBits","subtrahend","theSubtrahend","multiplier","ZERO","theMultiplier","TWO_PWR_24","divisor","theDivisor","newError","approx","res","NEG_ONE","halfThis","shiftRight","shiftLeft","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","bitsCount","isInteger","obj","__isInteger__","fromInt","cachedObj","get","set","lowBits","highBits","isNaN","isFinite","TWO_PWR_63_DBL","MAX_VALUE","fromString","str","p","indexOf","substring","i","size","min","parseInt","power","enumerable","configurable","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_64_DBL","default"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-core/lib/integer.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = void 0;\n// 64-bit Integer library, originally from Long.js by dcodeIO\n// https://github.com/dcodeIO/Long.js\n// License Apache 2\nvar error_1 = require(\"./error\");\n/**\n * A cache of the Integer representations of small integer values.\n * @type {!Object}\n * @inner\n * @private\n */\n// eslint-disable-next-line no-use-before-define\nvar INT_CACHE = new Map();\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n * See exported functions for more convenient ways of operating integers.\n * Use `int()` function to create new integers, `isInt()` to check if given object is integer,\n * `inSafeRange()` to check if it is safe to convert given value to native number,\n * `toNumber()` and `toString()` to convert given integer to number or string respectively.\n * @access public\n * @exports Integer\n * @class A Integer class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n *\n * @deprecated This class will be removed or made internal in a future version of the driver.\n * Please configure your driver to use BigInt instead.\n *\n * @constructor\n */\nvar Integer = /** @class */ (function () {\n    function Integer(low, high) {\n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low || 0;\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high || 0;\n    }\n    // The internal representation of an Integer is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // JavaScript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within JavaScript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n    Integer.prototype.inSafeRange = function () {\n        return (this.greaterThanOrEqual(Integer.MIN_SAFE_VALUE) &&\n            this.lessThanOrEqual(Integer.MAX_SAFE_VALUE));\n    };\n    /**\n     * Converts the Integer to an exact javascript Number, assuming it is a 32 bit integer.\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.toInt = function () {\n        return this.low;\n    };\n    /**\n     * Converts the Integer to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.toNumber = function () {\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n    /**\n     * Converts the Integer to a BigInt representation of this value\n     * @returns {bigint}\n     * @expose\n     */\n    Integer.prototype.toBigInt = function () {\n        if (this.isZero()) {\n            return BigInt(0);\n        }\n        else if (this.isPositive()) {\n            return (BigInt(this.high >>> 0) * BigInt(TWO_PWR_32_DBL) +\n                BigInt(this.low >>> 0));\n        }\n        else {\n            var negate = this.negate();\n            return (BigInt(-1) *\n                (BigInt(negate.high >>> 0) * BigInt(TWO_PWR_32_DBL) +\n                    BigInt(negate.low >>> 0)));\n        }\n    };\n    /**\n     * Converts the Integer to native number or -Infinity/+Infinity when it does not fit.\n     * @return {number}\n     * @package\n     */\n    Integer.prototype.toNumberOrInfinity = function () {\n        if (this.lessThan(Integer.MIN_SAFE_VALUE)) {\n            return Number.NEGATIVE_INFINITY;\n        }\n        else if (this.greaterThan(Integer.MAX_SAFE_VALUE)) {\n            return Number.POSITIVE_INFINITY;\n        }\n        else {\n            return this.toNumber();\n        }\n    };\n    /**\n     * Converts the Integer to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     * @expose\n     */\n    Integer.prototype.toString = function (radix) {\n        radix = radix || 10;\n        if (radix < 2 || radix > 36) {\n            throw RangeError('radix out of range: ' + radix);\n        }\n        if (this.isZero()) {\n            return '0';\n        }\n        var rem;\n        if (this.isNegative()) {\n            if (this.equals(Integer.MIN_VALUE)) {\n                // We need to change the Integer value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixInteger = Integer.fromNumber(radix);\n                var div = this.div(radixInteger);\n                rem = div.multiply(radixInteger).subtract(this);\n                return div.toString(radix) + rem.toInt().toString(radix);\n            }\n            else {\n                return '-' + this.negate().toString(radix);\n            }\n        }\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Integer.fromNumber(Math.pow(radix, 6));\n        rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower);\n            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n            var digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            }\n            else {\n                while (digits.length < 6) {\n                    digits = '0' + digits;\n                }\n                result = '' + digits + result;\n            }\n        }\n    };\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     * @expose\n     */\n    Integer.prototype.getHighBits = function () {\n        return this.high;\n    };\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     * @expose\n     */\n    Integer.prototype.getLowBits = function () {\n        return this.low;\n    };\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Integer.\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.getNumBitsAbs = function () {\n        if (this.isNegative()) {\n            return this.equals(Integer.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\n        }\n        var val = this.high !== 0 ? this.high : this.low;\n        for (var bit = 31; bit > 0; bit--) {\n            if ((val & (1 << bit)) !== 0) {\n                break;\n            }\n        }\n        return this.high !== 0 ? bit + 33 : bit + 1;\n    };\n    /**\n     * Tests if this Integer's value equals zero.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isZero = function () {\n        return this.high === 0 && this.low === 0;\n    };\n    /**\n     * Tests if this Integer's value is negative.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isNegative = function () {\n        return this.high < 0;\n    };\n    /**\n     * Tests if this Integer's value is positive.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isPositive = function () {\n        return this.high >= 0;\n    };\n    /**\n     * Tests if this Integer's value is odd.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isOdd = function () {\n        return (this.low & 1) === 1;\n    };\n    /**\n     * Tests if this Integer's value is even.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isEven = function () {\n        return (this.low & 1) === 0;\n    };\n    /**\n     * Tests if this Integer's value equals the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.equals = function (other) {\n        var theOther = Integer.fromValue(other);\n        return this.high === theOther.high && this.low === theOther.low;\n    };\n    /**\n     * Tests if this Integer's value differs from the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.notEquals = function (other) {\n        return !this.equals(/* validates */ other);\n    };\n    /**\n     * Tests if this Integer's value is less than the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.lessThan = function (other) {\n        return this.compare(/* validates */ other) < 0;\n    };\n    /**\n     * Tests if this Integer's value is less than or equal the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.lessThanOrEqual = function (other) {\n        return this.compare(/* validates */ other) <= 0;\n    };\n    /**\n     * Tests if this Integer's value is greater than the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.greaterThan = function (other) {\n        return this.compare(/* validates */ other) > 0;\n    };\n    /**\n     * Tests if this Integer's value is greater than or equal the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.greaterThanOrEqual = function (other) {\n        return this.compare(/* validates */ other) >= 0;\n    };\n    /**\n     * Compares this Integer's value with the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    Integer.prototype.compare = function (other) {\n        var theOther = Integer.fromValue(other);\n        if (this.equals(theOther)) {\n            return 0;\n        }\n        var thisNeg = this.isNegative();\n        var otherNeg = theOther.isNegative();\n        if (thisNeg && !otherNeg) {\n            return -1;\n        }\n        if (!thisNeg && otherNeg) {\n            return 1;\n        }\n        // At this point the sign bits are the same\n        return this.subtract(theOther).isNegative() ? -1 : 1;\n    };\n    /**\n     * Negates this Integer's value.\n     * @returns {!Integer} Negated Integer\n     * @expose\n     */\n    Integer.prototype.negate = function () {\n        if (this.equals(Integer.MIN_VALUE)) {\n            return Integer.MIN_VALUE;\n        }\n        return this.not().add(Integer.ONE);\n    };\n    /**\n     * Returns the sum of this and the specified Integer.\n     * @param {!Integer|number|string} addend Addend\n     * @returns {!Integer} Sum\n     * @expose\n     */\n    Integer.prototype.add = function (addend) {\n        var theAddend = Integer.fromValue(addend);\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xffff;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xffff;\n        var b48 = theAddend.high >>> 16;\n        var b32 = theAddend.high & 0xffff;\n        var b16 = theAddend.low >>> 16;\n        var b00 = theAddend.low & 0xffff;\n        var c48 = 0;\n        var c32 = 0;\n        var c16 = 0;\n        var c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 + b48;\n        c48 &= 0xffff;\n        return Integer.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n    };\n    /**\n     * Returns the difference of this and the specified Integer.\n     * @param {!Integer|number|string} subtrahend Subtrahend\n     * @returns {!Integer} Difference\n     * @expose\n     */\n    Integer.prototype.subtract = function (subtrahend) {\n        var theSubtrahend = Integer.fromValue(subtrahend);\n        return this.add(theSubtrahend.negate());\n    };\n    /**\n     * Returns the product of this and the specified Integer.\n     * @param {!Integer|number|string} multiplier Multiplier\n     * @returns {!Integer} Product\n     * @expose\n     */\n    Integer.prototype.multiply = function (multiplier) {\n        if (this.isZero()) {\n            return Integer.ZERO;\n        }\n        var theMultiplier = Integer.fromValue(multiplier);\n        if (theMultiplier.isZero()) {\n            return Integer.ZERO;\n        }\n        if (this.equals(Integer.MIN_VALUE)) {\n            return theMultiplier.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n        }\n        if (theMultiplier.equals(Integer.MIN_VALUE)) {\n            return this.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n        }\n        if (this.isNegative()) {\n            if (theMultiplier.isNegative()) {\n                return this.negate().multiply(theMultiplier.negate());\n            }\n            else {\n                return this.negate()\n                    .multiply(theMultiplier)\n                    .negate();\n            }\n        }\n        else if (theMultiplier.isNegative()) {\n            return this.multiply(theMultiplier.negate()).negate();\n        }\n        // If both longs are small, use float multiplication\n        if (this.lessThan(TWO_PWR_24) && theMultiplier.lessThan(TWO_PWR_24)) {\n            return Integer.fromNumber(this.toNumber() * theMultiplier.toNumber());\n        }\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xffff;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xffff;\n        var b48 = theMultiplier.high >>> 16;\n        var b32 = theMultiplier.high & 0xffff;\n        var b16 = theMultiplier.low >>> 16;\n        var b00 = theMultiplier.low & 0xffff;\n        var c48 = 0;\n        var c32 = 0;\n        var c16 = 0;\n        var c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xffff;\n        return Integer.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n    };\n    /**\n     * Returns this Integer divided by the specified.\n     * @param {!Integer|number|string} divisor Divisor\n     * @returns {!Integer} Quotient\n     * @expose\n     */\n    Integer.prototype.div = function (divisor) {\n        var theDivisor = Integer.fromValue(divisor);\n        if (theDivisor.isZero()) {\n            throw (0, error_1.newError)('division by zero');\n        }\n        if (this.isZero()) {\n            return Integer.ZERO;\n        }\n        var approx, rem, res;\n        if (this.equals(Integer.MIN_VALUE)) {\n            if (theDivisor.equals(Integer.ONE) ||\n                theDivisor.equals(Integer.NEG_ONE)) {\n                return Integer.MIN_VALUE;\n            }\n            if (theDivisor.equals(Integer.MIN_VALUE)) {\n                return Integer.ONE;\n            }\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = this.shiftRight(1);\n                approx = halfThis.div(theDivisor).shiftLeft(1);\n                if (approx.equals(Integer.ZERO)) {\n                    return theDivisor.isNegative() ? Integer.ONE : Integer.NEG_ONE;\n                }\n                else {\n                    rem = this.subtract(theDivisor.multiply(approx));\n                    res = approx.add(rem.div(theDivisor));\n                    return res;\n                }\n            }\n        }\n        else if (theDivisor.equals(Integer.MIN_VALUE)) {\n            return Integer.ZERO;\n        }\n        if (this.isNegative()) {\n            if (theDivisor.isNegative()) {\n                return this.negate().div(theDivisor.negate());\n            }\n            return this.negate()\n                .div(theDivisor)\n                .negate();\n        }\n        else if (theDivisor.isNegative()) {\n            return this.div(theDivisor.negate()).negate();\n        }\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        res = Integer.ZERO;\n        rem = this;\n        while (rem.greaterThanOrEqual(theDivisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / theDivisor.toNumber()));\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            var approxRes = Integer.fromNumber(approx);\n            var approxRem = approxRes.multiply(theDivisor);\n            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n                approx -= delta;\n                approxRes = Integer.fromNumber(approx);\n                approxRem = approxRes.multiply(theDivisor);\n            }\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero()) {\n                approxRes = Integer.ONE;\n            }\n            res = res.add(approxRes);\n            rem = rem.subtract(approxRem);\n        }\n        return res;\n    };\n    /**\n     * Returns this Integer modulo the specified.\n     * @param {!Integer|number|string} divisor Divisor\n     * @returns {!Integer} Remainder\n     * @expose\n     */\n    Integer.prototype.modulo = function (divisor) {\n        var theDivisor = Integer.fromValue(divisor);\n        return this.subtract(this.div(theDivisor).multiply(theDivisor));\n    };\n    /**\n     * Returns the bitwise NOT of this Integer.\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.not = function () {\n        return Integer.fromBits(~this.low, ~this.high);\n    };\n    /**\n     * Returns the bitwise AND of this Integer and the specified.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.and = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low & theOther.low, this.high & theOther.high);\n    };\n    /**\n     * Returns the bitwise OR of this Integer and the specified.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.or = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low | theOther.low, this.high | theOther.high);\n    };\n    /**\n     * Returns the bitwise XOR of this Integer and the given one.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.xor = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low ^ theOther.low, this.high ^ theOther.high);\n    };\n    /**\n     * Returns this Integer with bits shifted to the left by the given amount.\n     * @param {number|!Integer} numBits Number of bits\n     * @returns {!Integer} Shifted Integer\n     * @expose\n     */\n    Integer.prototype.shiftLeft = function (numBits) {\n        var bitsCount = Integer.toNumber(numBits);\n        if ((bitsCount &= 63) === 0) {\n            return Integer.ZERO;\n        }\n        else if (bitsCount < 32) {\n            return Integer.fromBits(this.low << bitsCount, (this.high << bitsCount) | (this.low >>> (32 - bitsCount)));\n        }\n        else {\n            return Integer.fromBits(0, this.low << (bitsCount - 32));\n        }\n    };\n    /**\n     * Returns this Integer with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Integer} numBits Number of bits\n     * @returns {!Integer} Shifted Integer\n     * @expose\n     */\n    Integer.prototype.shiftRight = function (numBits) {\n        var bitsCount = Integer.toNumber(numBits);\n        if ((bitsCount &= 63) === 0) {\n            return Integer.ZERO;\n        }\n        else if (numBits < 32) {\n            return Integer.fromBits((this.low >>> bitsCount) | (this.high << (32 - bitsCount)), this.high >> bitsCount);\n        }\n        else {\n            return Integer.fromBits(this.high >> (bitsCount - 32), this.high >= 0 ? 0 : -1);\n        }\n    };\n    /**\n     * Tests if the specified object is a Integer.\n     * @access private\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.isInteger = function (obj) {\n        return (obj && obj.__isInteger__) === true;\n    };\n    /**\n     * Returns a Integer representing the given 32 bit integer value.\n     * @access private\n     * @param {number} value The 32 bit integer in question\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromInt = function (value) {\n        var obj, cachedObj;\n        value = value | 0;\n        if (value >= -128 && value < 128) {\n            cachedObj = INT_CACHE.get(value);\n            if (cachedObj) {\n                return cachedObj;\n            }\n        }\n        obj = new Integer(value, value < 0 ? -1 : 0);\n        if (value >= -128 && value < 128) {\n            INT_CACHE.set(value, obj);\n        }\n        return obj;\n    };\n    /**\n     * Returns a Integer representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @access private\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromBits = function (lowBits, highBits) {\n        return new Integer(lowBits, highBits);\n    };\n    /**\n     * Returns a Integer representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @access private\n     * @param {number} value The number in question\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromNumber = function (value) {\n        if (isNaN(value) || !isFinite(value)) {\n            return Integer.ZERO;\n        }\n        if (value <= -TWO_PWR_63_DBL) {\n            return Integer.MIN_VALUE;\n        }\n        if (value + 1 >= TWO_PWR_63_DBL) {\n            return Integer.MAX_VALUE;\n        }\n        if (value < 0) {\n            return Integer.fromNumber(-value).negate();\n        }\n        return new Integer(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0);\n    };\n    /**\n     * Returns a Integer representation of the given string, written using the specified radix.\n     * @access private\n     * @param {string} str The textual representation of the Integer\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromString = function (str, radix) {\n        if (str.length === 0) {\n            throw (0, error_1.newError)('number format error: empty string');\n        }\n        if (str === 'NaN' ||\n            str === 'Infinity' ||\n            str === '+Infinity' ||\n            str === '-Infinity') {\n            return Integer.ZERO;\n        }\n        radix = radix || 10;\n        if (radix < 2 || radix > 36) {\n            throw (0, error_1.newError)('radix out of range: ' + radix);\n        }\n        var p;\n        if ((p = str.indexOf('-')) > 0) {\n            throw (0, error_1.newError)('number format error: interior \"-\" character: ' + str);\n        }\n        else if (p === 0) {\n            return Integer.fromString(str.substring(1), radix).negate();\n        }\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Integer.fromNumber(Math.pow(radix, 8));\n        var result = Integer.ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i);\n            var value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = Integer.fromNumber(Math.pow(radix, size));\n                result = result.multiply(power).add(Integer.fromNumber(value));\n            }\n            else {\n                result = result.multiply(radixToPower);\n                result = result.add(Integer.fromNumber(value));\n            }\n        }\n        return result;\n    };\n    /**\n     * Converts the specified value to a Integer.\n     * @access private\n     * @param {!Integer|number|string|bigint|!{low: number, high: number}} val Value\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.fromValue = function (val) {\n        if (val /* is compatible */ instanceof Integer) {\n            return val;\n        }\n        if (typeof val === 'number') {\n            return Integer.fromNumber(val);\n        }\n        if (typeof val === 'string') {\n            return Integer.fromString(val);\n        }\n        if (typeof val === 'bigint') {\n            return Integer.fromString(val.toString());\n        }\n        // Throws for non-objects, converts non-instanceof Integer:\n        return new Integer(val.low, val.high);\n    };\n    /**\n     * Converts the specified value to a number.\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @returns {number}\n     * @expose\n     */\n    Integer.toNumber = function (val) {\n        switch (typeof val) {\n            case 'number':\n                return val;\n            case 'bigint':\n                return Number(val);\n            default:\n                return Integer.fromValue(val).toNumber();\n        }\n    };\n    /**\n     * Converts the specified value to a string.\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @param {number} radix optional radix for string conversion, defaults to 10\n     * @returns {string}\n     * @expose\n     */\n    Integer.toString = function (val, radix) {\n        return Integer.fromValue(val).toString(radix);\n    };\n    /**\n     * Checks if the given value is in the safe range in order to be converted to a native number\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @param {number} radix optional radix for string conversion, defaults to 10\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.inSafeRange = function (val) {\n        return Integer.fromValue(val).inSafeRange();\n    };\n    /**\n     * Signed zero.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.ZERO = Integer.fromInt(0);\n    /**\n     * Signed one.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.ONE = Integer.fromInt(1);\n    /**\n     * Signed negative one.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.NEG_ONE = Integer.fromInt(-1);\n    /**\n     * Maximum signed value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MAX_VALUE = Integer.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n    /**\n     * Minimum signed value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MIN_VALUE = Integer.fromBits(0, 0x80000000 | 0);\n    /**\n     * Minimum safe value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MIN_SAFE_VALUE = Integer.fromBits(0x1 | 0, 0xffffffffffe00000 | 0);\n    /**\n     * Maximum safe value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MAX_SAFE_VALUE = Integer.fromBits(0xffffffff | 0, 0x1fffff | 0);\n    /**\n     * An indicator used to reliably determine if an object is a Integer or not.\n     * @type {boolean}\n     * @const\n     * @expose\n     * @private\n     */\n    Integer.__isInteger__ = true;\n    return Integer;\n}());\nObject.defineProperty(Integer.prototype, '__isInteger__', {\n    value: true,\n    enumerable: false,\n    configurable: false\n});\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Integer}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);\n/**\n * Cast value to Integer type.\n * @access public\n * @param {Mixed} value - The value to use.\n * @return {Integer} - An object of type Integer.\n */\nvar int = Integer.fromValue;\nexports.int = int;\n/**\n * Check if a variable is of Integer type.\n * @access public\n * @param {Mixed} value - The variable to check.\n * @return {Boolean} - Is it of the Integer type?\n */\nvar isInt = Integer.isInteger;\nexports.isInt = isInt;\n/**\n * Check if a variable can be safely converted to a number\n * @access public\n * @param {Mixed} value - The variable to check\n * @return {Boolean} - true if it is safe to call toNumber on variable otherwise false\n */\nvar inSafeRange = Integer.inSafeRange;\nexports.inSafeRange = inSafeRange;\n/**\n * Converts a variable to a number\n * @access public\n * @param {Mixed} value - The variable to convert\n * @return {number} - the variable as a number\n */\nvar toNumber = Integer.toNumber;\nexports.toNumber = toNumber;\n/**\n * Converts the integer to a string representation\n * @access public\n * @param {Mixed} value - The variable to convert\n * @param {number} radix - radix to use in string conversion, defaults to 10\n * @return {string} - returns a string representation of the integer\n */\nvar toString = Integer.toString;\nexports.toString = toString;\nexports.default = Integer;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAGF,OAAO,CAACG,QAAQ,GAAGH,OAAO,CAACI,WAAW,GAAGJ,OAAO,CAACK,KAAK,GAAGL,OAAO,CAACM,GAAG,GAAG,KAAK,CAAC;AAChG;AACA;AACA;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,IAAIC,GAAG,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAe,YAAY;EACrC,SAASA,OAAOA,CAACC,GAAG,EAAEC,IAAI,EAAE;IACxB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACD,GAAG,GAAGA,GAAG,IAAI,CAAC;IACnB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,IAAI,GAAGA,IAAI,IAAI,CAAC;EACzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAF,OAAO,CAACG,SAAS,CAACV,WAAW,GAAG,YAAY;IACxC,OAAQ,IAAI,CAACW,kBAAkB,CAACJ,OAAO,CAACK,cAAc,CAAC,IACnD,IAAI,CAACC,eAAe,CAACN,OAAO,CAACO,cAAc,CAAC;EACpD,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIP,OAAO,CAACG,SAAS,CAACK,KAAK,GAAG,YAAY;IAClC,OAAO,IAAI,CAACP,GAAG;EACnB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACID,OAAO,CAACG,SAAS,CAACX,QAAQ,GAAG,YAAY;IACrC,OAAO,IAAI,CAACU,IAAI,GAAGO,cAAc,IAAI,IAA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"},"metadata":{},"sourceType":"script"}