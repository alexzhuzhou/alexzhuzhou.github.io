{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar bolt_protocol_util_1 = require(\"./bolt-protocol-util\");\nvar packstream_1 = require(\"../packstream\");\nvar request_message_1 = __importDefault(require(\"./request-message\"));\nvar stream_observers_1 = require(\"./stream-observers\");\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark,\n  _a = neo4j_driver_core_1.internal.constants,\n  ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE,\n  BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1,\n  Logger = neo4j_driver_core_1.internal.logger.Logger,\n  TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\nvar BoltProtocol = /** @class */function () {\n  /**\n   * @callback CreateResponseHandler Creates the response handler\n   * @param {BoltProtocol} protocol The bolt protocol\n   * @returns {ResponseHandler} The response handler\n   */\n  /**\n   * @callback OnProtocolError Handles protocol error\n   * @param {string} error The description\n   */\n  /**\n   * @constructor\n   * @param {Object} server the server informatio.\n   * @param {Chunker} chunker the chunker.\n   * @param {Object} packstreamConfig Packstream configuration\n   * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\n   * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.\n   * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler\n   * @param {Logger} log the logger\n   * @param {OnProtocolError} onProtocolError handles protocol errors\n   */\n  function BoltProtocol(server, chunker, _a, createResponseHandler, log, onProtocolError) {\n    var _b = _a === void 0 ? {} : _a,\n      disableLosslessIntegers = _b.disableLosslessIntegers,\n      useBigInt = _b.useBigInt;\n    if (createResponseHandler === void 0) {\n      createResponseHandler = function createResponseHandler() {\n        return null;\n      };\n    }\n    this._server = server || {};\n    this._chunker = chunker;\n    this._packer = this._createPacker(chunker);\n    this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);\n    this._responseHandler = createResponseHandler(this);\n    this._log = log;\n    this._onProtocolError = onProtocolError;\n    this._fatalError = null;\n  }\n  Object.defineProperty(BoltProtocol.prototype, \"version\", {\n    /**\n     * Returns the numerical version identifier for this protocol\n     */\n    get: function get() {\n      return BOLT_PROTOCOL_V1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get the packer.\n   * @return {Packer} the protocol's packer.\n   */\n  BoltProtocol.prototype.packer = function () {\n    return this._packer;\n  };\n  /**\n   * Get the unpacker.\n   * @return {Unpacker} the protocol's unpacker.\n   */\n  BoltProtocol.prototype.unpacker = function () {\n    return this._unpacker;\n  };\n  /**\n   * Transform metadata received in SUCCESS message before it is passed to the handler.\n   * @param {Object} metadata the received metadata.\n   * @return {Object} transformed metadata.\n   */\n  BoltProtocol.prototype.transformMetadata = function (metadata) {\n    return metadata;\n  };\n  /**\n   * Perform initialization and authentication of the underlying connection.\n   * @param {Object} param\n   * @param {string} param.userAgent the user agent.\n   * @param {Object} param.authToken the authentication token.\n   * @param {function(err: Error)} param.onError the callback to invoke on error.\n   * @param {function()} param.onComplete the callback to invoke on completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.initialize = function (_a) {\n    var _this = this;\n    var _b = _a === void 0 ? {} : _a,\n      userAgent = _b.userAgent,\n      authToken = _b.authToken,\n      _onError = _b.onError,\n      onComplete = _b.onComplete;\n    var observer = new stream_observers_1.LoginObserver({\n      onError: function onError(error) {\n        return _this._onLoginError(error, _onError);\n      },\n      onCompleted: function onCompleted(metadata) {\n        return _this._onLoginCompleted(metadata, onComplete);\n      }\n    });\n    this.write(request_message_1.default.init(userAgent, authToken), observer, true);\n    return observer;\n  };\n  /**\n   * Perform protocol related operations for closing this connection\n   */\n  BoltProtocol.prototype.prepareToClose = function () {\n    // no need to notify the database in this protocol version\n  };\n  /**\n   * Begin an explicit transaction.\n   * @param {Object} param\n   * @param {Bookmark} param.bookmark the bookmark.\n   * @param {TxConfig} param.txConfig the configuration.\n   * @param {string} param.database the target database name.\n   * @param {string} param.mode the access mode.\n   * @param {string} param.impersonatedUser the impersonated user\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.beginTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmark = _b.bookmark,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete;\n    return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\n      bookmark: bookmark,\n      txConfig: txConfig,\n      database: database,\n      mode: mode,\n      impersonatedUser: impersonatedUser,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete,\n      flush: false\n    });\n  };\n  /**\n   * Commit the explicit transaction.\n   * @param {Object} param\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.commitTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete;\n    // WRITE access mode is used as a place holder here, it has\n    // no effect on behaviour for Bolt V1 & V2\n    return this.run('COMMIT', {}, {\n      bookmark: Bookmark.empty(),\n      txConfig: TxConfig.empty(),\n      mode: ACCESS_MODE_WRITE,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n  };\n  /**\n   * Rollback the explicit transaction.\n   * @param {Object} param\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.rollbackTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete;\n    // WRITE access mode is used as a place holder here, it has\n    // no effect on behaviour for Bolt V1 & V2\n    return this.run('ROLLBACK', {}, {\n      bookmark: Bookmark.empty(),\n      txConfig: TxConfig.empty(),\n      mode: ACCESS_MODE_WRITE,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n  };\n  /**\n   * Send a Cypher query through the underlying connection.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @param {Object} param\n   * @param {Bookmark} param.bookmark the bookmark.\n   * @param {TxConfig} param.txConfig the transaction configuration.\n   * @param {string} param.database the target database name.\n   * @param {string} param.impersonatedUser the impersonated user\n   * @param {string} param.mode the access mode.\n   * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\n   * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @param {boolean} param.flush whether to flush the buffered messages.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.run = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmark = _b.bookmark,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      beforeKeys = _b.beforeKeys,\n      afterKeys = _b.afterKeys,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete,\n      _c = _b.flush,\n      flush = _c === void 0 ? true : _c;\n    var observer = new stream_observers_1.ResultStreamObserver({\n      server: this._server,\n      beforeKeys: beforeKeys,\n      afterKeys: afterKeys,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n    // bookmark and mode are ignored in this version of the protocol\n    (0, bolt_protocol_util_1.assertTxConfigIsEmpty)(txConfig, this._onProtocolError, observer);\n    // passing in a database name on this protocol version throws an error\n    (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);\n    // passing impersonated user on this protocol version throws an error\n    (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);\n    this.write(request_message_1.default.run(query, parameters), observer, false);\n    this.write(request_message_1.default.pullAll(), observer, flush);\n    return observer;\n  };\n  Object.defineProperty(BoltProtocol.prototype, \"currentFailure\", {\n    get: function get() {\n      return this._responseHandler.currentFailure;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Send a RESET through the underlying connection.\n   * @param {Object} param\n   * @param {function(err: Error)} param.onError the callback to invoke on error.\n   * @param {function()} param.onComplete the callback to invoke on completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.reset = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      onError = _b.onError,\n      onComplete = _b.onComplete;\n    var observer = new stream_observers_1.ResetObserver({\n      onProtocolError: this._onProtocolError,\n      onError: onError,\n      onComplete: onComplete\n    });\n    this.write(request_message_1.default.reset(), observer, true);\n    return observer;\n  };\n  BoltProtocol.prototype._createPacker = function (chunker) {\n    return new packstream_1.v1.Packer(chunker);\n  };\n  BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {\n    return new packstream_1.v1.Unpacker(disableLosslessIntegers, useBigInt);\n  };\n  /**\n   * Write a message to the network channel.\n   * @param {RequestMessage} message the message to write.\n   * @param {StreamObserver} observer the response observer.\n   * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\n   */\n  BoltProtocol.prototype.write = function (message, observer, flush) {\n    var _this = this;\n    var queued = this.queueObserverIfProtocolIsNotBroken(observer);\n    if (queued) {\n      if (this._log.isDebugEnabled()) {\n        this._log.debug(\"C: \" + message);\n      }\n      this.packer().packStruct(message.signature, message.fields.map(function (field) {\n        return _this.packer().packable(field);\n      }));\n      this._chunker.messageBoundary();\n      if (flush) {\n        this._chunker.flush();\n      }\n    }\n  };\n  /**\n   * Notifies faltal erros to the observers and mark the protocol in the fatal error state.\n   * @param {Error} error The error\n   */\n  BoltProtocol.prototype.notifyFatalError = function (error) {\n    this._fatalError = error;\n    return this._responseHandler._notifyErrorToObservers(error);\n  };\n  /**\n   * Updates the the current observer with the next one on the queue.\n   */\n  BoltProtocol.prototype.updateCurrentObserver = function () {\n    return this._responseHandler._updateCurrentObserver();\n  };\n  /**\n   * Checks if exist an ongoing observable requests\n   * @return {boolean}\n   */\n  BoltProtocol.prototype.hasOngoingObservableRequests = function () {\n    return this._responseHandler.hasOngoingObservableRequests();\n  };\n  /**\n   * Enqueue the observer if the protocol is not broken.\n   * In case it's broken, the observer will be notified about the error.\n   *\n   * @param {StreamObserver} observer The observer\n   * @returns {boolean} if it was queued\n   */\n  BoltProtocol.prototype.queueObserverIfProtocolIsNotBroken = function (observer) {\n    if (this.isBroken()) {\n      this.notifyFatalErrorToObserver(observer);\n      return false;\n    }\n    return this._responseHandler._queueObserver(observer);\n  };\n  /**\n   * Veritfy the protocol is not broken.\n   * @returns {boolean}\n   */\n  BoltProtocol.prototype.isBroken = function () {\n    return !!this._fatalError;\n  };\n  /**\n   * Notifies the current fatal error to the observer\n   *\n   * @param {StreamObserver} observer The observer\n   */\n  BoltProtocol.prototype.notifyFatalErrorToObserver = function (observer) {\n    if (observer && observer.onError) {\n      observer.onError(this._fatalError);\n    }\n  };\n  /**\n   * Reset current failure on the observable response handler to null.\n   */\n  BoltProtocol.prototype.resetFailure = function () {\n    this._responseHandler._resetFailure();\n  };\n  BoltProtocol.prototype._onLoginCompleted = function (metadata, onCompleted) {\n    if (metadata) {\n      var serverVersion = metadata.server;\n      if (!this._server.version) {\n        this._server.version = serverVersion;\n      }\n    }\n    if (onCompleted) {\n      onCompleted(metadata);\n    }\n  };\n  BoltProtocol.prototype._onLoginError = function (error, onError) {\n    this._onProtocolError(error.message);\n    if (onError) {\n      onError(error);\n    }\n  };\n  return BoltProtocol;\n}();\nexports.default = BoltProtocol;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","bolt_protocol_util_1","require","packstream_1","request_message_1","stream_observers_1","neo4j_driver_core_1","Bookmark","internal","bookmark","_a","constants","ACCESS_MODE_WRITE","BOLT_PROTOCOL_V1","Logger","logger","TxConfig","txConfig","BoltProtocol","server","chunker","createResponseHandler","log","onProtocolError","_b","disableLosslessIntegers","useBigInt","_server","_chunker","_packer","_createPacker","_unpacker","_createUnpacker","_responseHandler","_log","_onProtocolError","_fatalError","prototype","get","enumerable","configurable","packer","unpacker","transformMetadata","metadata","initialize","_this","userAgent","authToken","onError","onComplete","observer","LoginObserver","error","_onLoginError","onCompleted","_onLoginCompleted","write","default","init","prepareToClose","beginTransaction","database","mode","impersonatedUser","beforeError","afterError","beforeComplete","afterComplete","run","asBeginTransactionParameters","flush","commitTransaction","empty","rollbackTransaction","query","parameters","beforeKeys","afterKeys","_c","ResultStreamObserver","assertTxConfigIsEmpty","assertDatabaseIsEmpty","assertImpersonatedUserIsEmpty","pullAll","currentFailure","reset","ResetObserver","v1","Packer","Unpacker","message","queued","queueObserverIfProtocolIsNotBroken","isDebugEnabled","debug","packStruct","signature","fields","map","field","packable","messageBoundary","notifyFatalError","_notifyErrorToObservers","updateCurrentObserver","_updateCurrentObserver","hasOngoingObservableRequests","isBroken","notifyFatalErrorToObserver","_queueObserver","resetFailure","_resetFailure","serverVersion","version"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar bolt_protocol_util_1 = require(\"./bolt-protocol-util\");\nvar packstream_1 = require(\"../packstream\");\nvar request_message_1 = __importDefault(require(\"./request-message\"));\nvar stream_observers_1 = require(\"./stream-observers\");\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark, _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE, BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1, Logger = neo4j_driver_core_1.internal.logger.Logger, TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\nvar BoltProtocol = /** @class */ (function () {\n    /**\n     * @callback CreateResponseHandler Creates the response handler\n     * @param {BoltProtocol} protocol The bolt protocol\n     * @returns {ResponseHandler} The response handler\n     */\n    /**\n     * @callback OnProtocolError Handles protocol error\n     * @param {string} error The description\n     */\n    /**\n     * @constructor\n     * @param {Object} server the server informatio.\n     * @param {Chunker} chunker the chunker.\n     * @param {Object} packstreamConfig Packstream configuration\n     * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\n     * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.\n     * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler\n     * @param {Logger} log the logger\n     * @param {OnProtocolError} onProtocolError handles protocol errors\n     */\n    function BoltProtocol(server, chunker, _a, createResponseHandler, log, onProtocolError) {\n        var _b = _a === void 0 ? {} : _a, disableLosslessIntegers = _b.disableLosslessIntegers, useBigInt = _b.useBigInt;\n        if (createResponseHandler === void 0) { createResponseHandler = function () { return null; }; }\n        this._server = server || {};\n        this._chunker = chunker;\n        this._packer = this._createPacker(chunker);\n        this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);\n        this._responseHandler = createResponseHandler(this);\n        this._log = log;\n        this._onProtocolError = onProtocolError;\n        this._fatalError = null;\n    }\n    Object.defineProperty(BoltProtocol.prototype, \"version\", {\n        /**\n         * Returns the numerical version identifier for this protocol\n         */\n        get: function () {\n            return BOLT_PROTOCOL_V1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the packer.\n     * @return {Packer} the protocol's packer.\n     */\n    BoltProtocol.prototype.packer = function () {\n        return this._packer;\n    };\n    /**\n     * Get the unpacker.\n     * @return {Unpacker} the protocol's unpacker.\n     */\n    BoltProtocol.prototype.unpacker = function () {\n        return this._unpacker;\n    };\n    /**\n     * Transform metadata received in SUCCESS message before it is passed to the handler.\n     * @param {Object} metadata the received metadata.\n     * @return {Object} transformed metadata.\n     */\n    BoltProtocol.prototype.transformMetadata = function (metadata) {\n        return metadata;\n    };\n    /**\n     * Perform initialization and authentication of the underlying connection.\n     * @param {Object} param\n     * @param {string} param.userAgent the user agent.\n     * @param {Object} param.authToken the authentication token.\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\n     * @param {function()} param.onComplete the callback to invoke on completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.initialize = function (_a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, authToken = _b.authToken, onError = _b.onError, onComplete = _b.onComplete;\n        var observer = new stream_observers_1.LoginObserver({\n            onError: function (error) { return _this._onLoginError(error, onError); },\n            onCompleted: function (metadata) { return _this._onLoginCompleted(metadata, onComplete); }\n        });\n        this.write(request_message_1.default.init(userAgent, authToken), observer, true);\n        return observer;\n    };\n    /**\n     * Perform protocol related operations for closing this connection\n     */\n    BoltProtocol.prototype.prepareToClose = function () {\n        // no need to notify the database in this protocol version\n    };\n    /**\n     * Begin an explicit transaction.\n     * @param {Object} param\n     * @param {Bookmark} param.bookmark the bookmark.\n     * @param {TxConfig} param.txConfig the configuration.\n     * @param {string} param.database the target database name.\n     * @param {string} param.mode the access mode.\n     * @param {string} param.impersonatedUser the impersonated user\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.beginTransaction = function (_a) {\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\n        return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\n            bookmark: bookmark,\n            txConfig: txConfig,\n            database: database,\n            mode: mode,\n            impersonatedUser: impersonatedUser,\n            beforeError: beforeError,\n            afterError: afterError,\n            beforeComplete: beforeComplete,\n            afterComplete: afterComplete,\n            flush: false\n        });\n    };\n    /**\n     * Commit the explicit transaction.\n     * @param {Object} param\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.commitTransaction = function (_a) {\n        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\n        // WRITE access mode is used as a place holder here, it has\n        // no effect on behaviour for Bolt V1 & V2\n        return this.run('COMMIT', {}, {\n            bookmark: Bookmark.empty(),\n            txConfig: TxConfig.empty(),\n            mode: ACCESS_MODE_WRITE,\n            beforeError: beforeError,\n            afterError: afterError,\n            beforeComplete: beforeComplete,\n            afterComplete: afterComplete\n        });\n    };\n    /**\n     * Rollback the explicit transaction.\n     * @param {Object} param\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.rollbackTransaction = function (_a) {\n        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\n        // WRITE access mode is used as a place holder here, it has\n        // no effect on behaviour for Bolt V1 & V2\n        return this.run('ROLLBACK', {}, {\n            bookmark: Bookmark.empty(),\n            txConfig: TxConfig.empty(),\n            mode: ACCESS_MODE_WRITE,\n            beforeError: beforeError,\n            afterError: afterError,\n            beforeComplete: beforeComplete,\n            afterComplete: afterComplete\n        });\n    };\n    /**\n     * Send a Cypher query through the underlying connection.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Object} param\n     * @param {Bookmark} param.bookmark the bookmark.\n     * @param {TxConfig} param.txConfig the transaction configuration.\n     * @param {string} param.database the target database name.\n     * @param {string} param.impersonatedUser the impersonated user\n     * @param {string} param.mode the access mode.\n     * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\n     * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @param {boolean} param.flush whether to flush the buffered messages.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.run = function (query, parameters, _a) {\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c;\n        var observer = new stream_observers_1.ResultStreamObserver({\n            server: this._server,\n            beforeKeys: beforeKeys,\n            afterKeys: afterKeys,\n            beforeError: beforeError,\n            afterError: afterError,\n            beforeComplete: beforeComplete,\n            afterComplete: afterComplete\n        });\n        // bookmark and mode are ignored in this version of the protocol\n        (0, bolt_protocol_util_1.assertTxConfigIsEmpty)(txConfig, this._onProtocolError, observer);\n        // passing in a database name on this protocol version throws an error\n        (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);\n        // passing impersonated user on this protocol version throws an error\n        (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);\n        this.write(request_message_1.default.run(query, parameters), observer, false);\n        this.write(request_message_1.default.pullAll(), observer, flush);\n        return observer;\n    };\n    Object.defineProperty(BoltProtocol.prototype, \"currentFailure\", {\n        get: function () {\n            return this._responseHandler.currentFailure;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Send a RESET through the underlying connection.\n     * @param {Object} param\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\n     * @param {function()} param.onComplete the callback to invoke on completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.reset = function (_a) {\n        var _b = _a === void 0 ? {} : _a, onError = _b.onError, onComplete = _b.onComplete;\n        var observer = new stream_observers_1.ResetObserver({\n            onProtocolError: this._onProtocolError,\n            onError: onError,\n            onComplete: onComplete\n        });\n        this.write(request_message_1.default.reset(), observer, true);\n        return observer;\n    };\n    BoltProtocol.prototype._createPacker = function (chunker) {\n        return new packstream_1.v1.Packer(chunker);\n    };\n    BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {\n        return new packstream_1.v1.Unpacker(disableLosslessIntegers, useBigInt);\n    };\n    /**\n     * Write a message to the network channel.\n     * @param {RequestMessage} message the message to write.\n     * @param {StreamObserver} observer the response observer.\n     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\n     */\n    BoltProtocol.prototype.write = function (message, observer, flush) {\n        var _this = this;\n        var queued = this.queueObserverIfProtocolIsNotBroken(observer);\n        if (queued) {\n            if (this._log.isDebugEnabled()) {\n                this._log.debug(\"C: \" + message);\n            }\n            this.packer().packStruct(message.signature, message.fields.map(function (field) { return _this.packer().packable(field); }));\n            this._chunker.messageBoundary();\n            if (flush) {\n                this._chunker.flush();\n            }\n        }\n    };\n    /**\n     * Notifies faltal erros to the observers and mark the protocol in the fatal error state.\n     * @param {Error} error The error\n     */\n    BoltProtocol.prototype.notifyFatalError = function (error) {\n        this._fatalError = error;\n        return this._responseHandler._notifyErrorToObservers(error);\n    };\n    /**\n     * Updates the the current observer with the next one on the queue.\n     */\n    BoltProtocol.prototype.updateCurrentObserver = function () {\n        return this._responseHandler._updateCurrentObserver();\n    };\n    /**\n     * Checks if exist an ongoing observable requests\n     * @return {boolean}\n     */\n    BoltProtocol.prototype.hasOngoingObservableRequests = function () {\n        return this._responseHandler.hasOngoingObservableRequests();\n    };\n    /**\n     * Enqueue the observer if the protocol is not broken.\n     * In case it's broken, the observer will be notified about the error.\n     *\n     * @param {StreamObserver} observer The observer\n     * @returns {boolean} if it was queued\n     */\n    BoltProtocol.prototype.queueObserverIfProtocolIsNotBroken = function (observer) {\n        if (this.isBroken()) {\n            this.notifyFatalErrorToObserver(observer);\n            return false;\n        }\n        return this._responseHandler._queueObserver(observer);\n    };\n    /**\n     * Veritfy the protocol is not broken.\n     * @returns {boolean}\n     */\n    BoltProtocol.prototype.isBroken = function () {\n        return !!this._fatalError;\n    };\n    /**\n     * Notifies the current fatal error to the observer\n     *\n     * @param {StreamObserver} observer The observer\n     */\n    BoltProtocol.prototype.notifyFatalErrorToObserver = function (observer) {\n        if (observer && observer.onError) {\n            observer.onError(this._fatalError);\n        }\n    };\n    /**\n     * Reset current failure on the observable response handler to null.\n     */\n    BoltProtocol.prototype.resetFailure = function () {\n        this._responseHandler._resetFailure();\n    };\n    BoltProtocol.prototype._onLoginCompleted = function (metadata, onCompleted) {\n        if (metadata) {\n            var serverVersion = metadata.server;\n            if (!this._server.version) {\n                this._server.version = serverVersion;\n            }\n        }\n        if (onCompleted) {\n            onCompleted(metadata);\n        }\n    };\n    BoltProtocol.prototype._onLoginError = function (error, onError) {\n        this._onProtocolError(error.message);\n        if (onError) {\n            onError(error);\n        }\n    };\n    return BoltProtocol;\n}());\nexports.default = BoltProtocol;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,oBAAoB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC1D,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIE,iBAAiB,GAAGV,eAAe,CAACQ,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACrE,IAAIG,kBAAkB,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACtD,IAAII,mBAAmB,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AACtD,IAAIK,QAAQ,GAAGD,mBAAmB,CAACE,QAAQ,CAACC,QAAQ,CAACF,QAAQ;EAAEG,EAAE,GAAGJ,mBAAmB,CAACE,QAAQ,CAACG,SAAS;EAAEC,iBAAiB,GAAGF,EAAE,CAACE,iBAAiB;EAAEC,gBAAgB,GAAGH,EAAE,CAACG,gBAAgB;EAAEC,MAAM,GAAGR,mBAAmB,CAACE,QAAQ,CAACO,MAAM,CAACD,MAAM;EAAEE,QAAQ,GAAGV,mBAAmB,CAACE,QAAQ,CAACS,QAAQ,CAACD,QAAQ;AAC5S,IAAIE,YAAY,GAAG,aAAe,YAAY;EAC1C;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,YAAYA,CAACC,MAAM,EAAEC,OAAO,EAAEV,EAAE,EAAEW,qBAAqB,EAAEC,GAAG,EAAEC,eAAe,EAAE;IACpF,IAAIC,EAAE,GAAGd,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEe,uBAAuB,GAAGD,EAAE,CAACC,uBAAuB;MAAEC,SAAS,GAAGF,EAAE,CAACE,SAAS;IAChH,IAAIL,qBAAqB,KAAK,KAAK,CAAC,EAAE;MAAEA,qBAAqB,GAAG,SAAAA,sBAAA,EAAY;QAAE,OAAO,IAAI;MAAE,CAAC;IAAE;IAC9F,IAAI,CAACM,OAAO,GAAGR,MAAM,IAAI,CAAC,CAAC;IAC3B,IAAI,CAACS,QAAQ,GAAGR,OAAO;IACvB,IAAI,CAACS,OAAO,GAAG,IAAI,CAACC,aAAa,CAACV,OAAO,CAAC;IAC1C,IAAI,CAACW,SAAS,GAAG,IAAI,CAACC,eAAe,CAACP,uBAAuB,EAAEC,SAAS,CAAC;IACzE,IAAI,CAACO,gBAAgB,GAAGZ,qBAAqB,CAAC,IAAI,CAAC;IACnD,IAAI,CAACa,IAAI,GAAGZ,GAAG;IACf,IAAI,CAACa,gBAAgB,GAAGZ,eAAe;IACvC,IAAI,CAACa,WAAW,GAAG,IAAI;EAC3B;EACAvC,MAAM,CAACC,cAAc,CAACoB,YAAY,CAACmB,SAAS,EAAE,SAAS,EAAE;IACrD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,IAAA,EAAY;MACb,OAAOzB,gBAAgB;IAC3B,CAAC;IACD0B,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;EACItB,YAAY,CAACmB,SAAS,CAACI,MAAM,GAAG,YAAY;IACxC,OAAO,IAAI,CAACZ,OAAO;EACvB,CAAC;EACD;AACJ;AACA;AACA;EACIX,YAAY,CAACmB,SAAS,CAACK,QAAQ,GAAG,YAAY;IAC1C,OAAO,IAAI,CAACX,SAAS;EACzB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIb,YAAY,CAACmB,SAAS,CAACM,iBAAiB,GAAG,UAAUC,QAAQ,EAAE;IAC3D,OAAOA,QAAQ;EACnB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI1B,YAAY,CAACmB,SAAS,CAACQ,UAAU,GAAG,UAAUnC,EAAE,EAAE;IAC9C,IAAIoC,KAAK,GAAG,IAAI;IAChB,IAAItB,EAAE,GAAGd,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEqC,SAAS,GAAGvB,EAAE,CAACuB,SAAS;MAAEC,SAAS,GAAGxB,EAAE,CAACwB,SAAS;MAAEC,QAAO,GAAGzB,EAAE,CAACyB,OAAO;MAAEC,UAAU,GAAG1B,EAAE,CAAC0B,UAAU;IACtI,IAAIC,QAAQ,GAAG,IAAI9C,kBAAkB,CAAC+C,aAAa,CAAC;MAChDH,OAAO,EAAE,SAAAA,QAAUI,KAAK,EAAE;QAAE,OAAOP,KAAK,CAACQ,aAAa,CAACD,KAAK,EAAEJ,QAAO,CAAC;MAAE,CAAC;MACzEM,WAAW,EAAE,SAAAA,YAAUX,QAAQ,EAAE;QAAE,OAAOE,KAAK,CAACU,iBAAiB,CAACZ,QAAQ,EAAEM,UAAU,CAAC;MAAE;IAC7F,CAAC,CAAC;IACF,IAAI,CAACO,KAAK,CAACrD,iBAAiB,CAACsD,OAAO,CAACC,IAAI,CAACZ,SAAS,EAAEC,SAAS,CAAC,EAAEG,QAAQ,EAAE,IAAI,CAAC;IAChF,OAAOA,QAAQ;EACnB,CAAC;EACD;AACJ;AACA;EACIjC,YAAY,CAACmB,SAAS,CAACuB,cAAc,GAAG,YAAY;IAChD;EAAA,CACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI1C,YAAY,CAACmB,SAAS,CAACwB,gBAAgB,GAAG,UAAUnD,EAAE,EAAE;IACpD,IAAIc,EAAE,GAAGd,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAED,QAAQ,GAAGe,EAAE,CAACf,QAAQ;MAAEQ,QAAQ,GAAGO,EAAE,CAACP,QAAQ;MAAE6C,QAAQ,GAAGtC,EAAE,CAACsC,QAAQ;MAAEC,IAAI,GAAGvC,EAAE,CAACuC,IAAI;MAAEC,gBAAgB,GAAGxC,EAAE,CAACwC,gBAAgB;MAAEC,WAAW,GAAGzC,EAAE,CAACyC,WAAW;MAAEC,UAAU,GAAG1C,EAAE,CAAC0C,UAAU;MAAEC,cAAc,GAAG3C,EAAE,CAAC2C,cAAc;MAAEC,aAAa,GAAG5C,EAAE,CAAC4C,aAAa;IAChS,OAAO,IAAI,CAACC,GAAG,CAAC,OAAO,EAAE5D,QAAQ,GAAGA,QAAQ,CAAC6D,4BAA4B,EAAE,GAAG,CAAC,CAAC,EAAE;MAC9E7D,QAAQ,EAAEA,QAAQ;MAClBQ,QAAQ,EAAEA,QAAQ;MAClB6C,QAAQ,EAAEA,QAAQ;MAClBC,IAAI,EAAEA,IAAI;MACVC,gBAAgB,EAAEA,gBAAgB;MAClCC,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAEA,UAAU;MACtBC,cAAc,EAAEA,cAAc;MAC9BC,aAAa,EAAEA,aAAa;MAC5BG,KAAK,EAAE;IACX,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIrD,YAAY,CAACmB,SAAS,CAACmC,iBAAiB,GAAG,UAAU9D,EAAE,EAAE;IACrD,IAAIc,EAAE,GAAGd,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEuD,WAAW,GAAGzC,EAAE,CAACyC,WAAW;MAAEC,UAAU,GAAG1C,EAAE,CAAC0C,UAAU;MAAEC,cAAc,GAAG3C,EAAE,CAAC2C,cAAc;MAAEC,aAAa,GAAG5C,EAAE,CAAC4C,aAAa;IAChK;IACA;IACA,OAAO,IAAI,CAACC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;MAC1B5D,QAAQ,EAAEF,QAAQ,CAACkE,KAAK,EAAE;MAC1BxD,QAAQ,EAAED,QAAQ,CAACyD,KAAK,EAAE;MAC1BV,IAAI,EAAEnD,iBAAiB;MACvBqD,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAEA,UAAU;MACtBC,cAAc,EAAEA,cAAc;MAC9BC,aAAa,EAAEA;IACnB,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIlD,YAAY,CAACmB,SAAS,CAACqC,mBAAmB,GAAG,UAAUhE,EAAE,EAAE;IACvD,IAAIc,EAAE,GAAGd,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEuD,WAAW,GAAGzC,EAAE,CAACyC,WAAW;MAAEC,UAAU,GAAG1C,EAAE,CAAC0C,UAAU;MAAEC,cAAc,GAAG3C,EAAE,CAAC2C,cAAc;MAAEC,aAAa,GAAG5C,EAAE,CAAC4C,aAAa;IAChK;IACA;IACA,OAAO,IAAI,CAACC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE;MAC5B5D,QAAQ,EAAEF,QAAQ,CAACkE,KAAK,EAAE;MAC1BxD,QAAQ,EAAED,QAAQ,CAACyD,KAAK,EAAE;MAC1BV,IAAI,EAAEnD,iBAAiB;MACvBqD,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAEA,UAAU;MACtBC,cAAc,EAAEA,cAAc;MAC9BC,aAAa,EAAEA;IACnB,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIlD,YAAY,CAACmB,SAAS,CAACgC,GAAG,GAAG,UAAUM,KAAK,EAAEC,UAAU,EAAElE,EAAE,EAAE;IAC1D,IAAIc,EAAE,GAAGd,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAED,QAAQ,GAAGe,EAAE,CAACf,QAAQ;MAAEQ,QAAQ,GAAGO,EAAE,CAACP,QAAQ;MAAE6C,QAAQ,GAAGtC,EAAE,CAACsC,QAAQ;MAAEC,IAAI,GAAGvC,EAAE,CAACuC,IAAI;MAAEC,gBAAgB,GAAGxC,EAAE,CAACwC,gBAAgB;MAAEa,UAAU,GAAGrD,EAAE,CAACqD,UAAU;MAAEC,SAAS,GAAGtD,EAAE,CAACsD,SAAS;MAAEb,WAAW,GAAGzC,EAAE,CAACyC,WAAW;MAAEC,UAAU,GAAG1C,EAAE,CAAC0C,UAAU;MAAEC,cAAc,GAAG3C,EAAE,CAAC2C,cAAc;MAAEC,aAAa,GAAG5C,EAAE,CAAC4C,aAAa;MAAEW,EAAE,GAAGvD,EAAE,CAAC+C,KAAK;MAAEA,KAAK,GAAGQ,EAAE,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,EAAE;IACxY,IAAI5B,QAAQ,GAAG,IAAI9C,kBAAkB,CAAC2E,oBAAoB,CAAC;MACvD7D,MAAM,EAAE,IAAI,CAACQ,OAAO;MACpBkD,UAAU,EAAEA,UAAU;MACtBC,SAAS,EAAEA,SAAS;MACpBb,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAEA,UAAU;MACtBC,cAAc,EAAEA,cAAc;MAC9BC,aAAa,EAAEA;IACnB,CAAC,CAAC;IACF;IACA,CAAC,CAAC,EAAEnE,oBAAoB,CAACgF,qBAAqB,EAAEhE,QAAQ,EAAE,IAAI,CAACkB,gBAAgB,EAAEgB,QAAQ,CAAC;IAC1F;IACA,CAAC,CAAC,EAAElD,oBAAoB,CAACiF,qBAAqB,EAAEpB,QAAQ,EAAE,IAAI,CAAC3B,gBAAgB,EAAEgB,QAAQ,CAAC;IAC1F;IACA,CAAC,CAAC,EAAElD,oBAAoB,CAACkF,6BAA6B,EAAEnB,gBAAgB,EAAE,IAAI,CAAC7B,gBAAgB,EAAEgB,QAAQ,CAAC;IAC1G,IAAI,CAACM,KAAK,CAACrD,iBAAiB,CAACsD,OAAO,CAACW,GAAG,CAACM,KAAK,EAAEC,UAAU,CAAC,EAAEzB,QAAQ,EAAE,KAAK,CAAC;IAC7E,IAAI,CAACM,KAAK,CAACrD,iBAAiB,CAACsD,OAAO,CAAC0B,OAAO,EAAE,EAAEjC,QAAQ,EAAEoB,KAAK,CAAC;IAChE,OAAOpB,QAAQ;EACnB,CAAC;EACDtD,MAAM,CAACC,cAAc,CAACoB,YAAY,CAACmB,SAAS,EAAE,gBAAgB,EAAE;IAC5DC,GAAG,EAAE,SAAAA,IAAA,EAAY;MACb,OAAO,IAAI,CAACL,gBAAgB,CAACoD,cAAc;IAC/C,CAAC;IACD9C,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACItB,YAAY,CAACmB,SAAS,CAACiD,KAAK,GAAG,UAAU5E,EAAE,EAAE;IACzC,IAAIc,EAAE,GAAGd,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEuC,OAAO,GAAGzB,EAAE,CAACyB,OAAO;MAAEC,UAAU,GAAG1B,EAAE,CAAC0B,UAAU;IAClF,IAAIC,QAAQ,GAAG,IAAI9C,kBAAkB,CAACkF,aAAa,CAAC;MAChDhE,eAAe,EAAE,IAAI,CAACY,gBAAgB;MACtCc,OAAO,EAAEA,OAAO;MAChBC,UAAU,EAAEA;IAChB,CAAC,CAAC;IACF,IAAI,CAACO,KAAK,CAACrD,iBAAiB,CAACsD,OAAO,CAAC4B,KAAK,EAAE,EAAEnC,QAAQ,EAAE,IAAI,CAAC;IAC7D,OAAOA,QAAQ;EACnB,CAAC;EACDjC,YAAY,CAACmB,SAAS,CAACP,aAAa,GAAG,UAAUV,OAAO,EAAE;IACtD,OAAO,IAAIjB,YAAY,CAACqF,EAAE,CAACC,MAAM,CAACrE,OAAO,CAAC;EAC9C,CAAC;EACDF,YAAY,CAACmB,SAAS,CAACL,eAAe,GAAG,UAAUP,uBAAuB,EAAEC,SAAS,EAAE;IACnF,OAAO,IAAIvB,YAAY,CAACqF,EAAE,CAACE,QAAQ,CAACjE,uBAAuB,EAAEC,SAAS,CAAC;EAC3E,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIR,YAAY,CAACmB,SAAS,CAACoB,KAAK,GAAG,UAAUkC,OAAO,EAAExC,QAAQ,EAAEoB,KAAK,EAAE;IAC/D,IAAIzB,KAAK,GAAG,IAAI;IAChB,IAAI8C,MAAM,GAAG,IAAI,CAACC,kCAAkC,CAAC1C,QAAQ,CAAC;IAC9D,IAAIyC,MAAM,EAAE;MACR,IAAI,IAAI,CAAC1D,IAAI,CAAC4D,cAAc,EAAE,EAAE;QAC5B,IAAI,CAAC5D,IAAI,CAAC6D,KAAK,CAAC,KAAK,GAAGJ,OAAO,CAAC;MACpC;MACA,IAAI,CAAClD,MAAM,EAAE,CAACuD,UAAU,CAACL,OAAO,CAACM,SAAS,EAAEN,OAAO,CAACO,MAAM,CAACC,GAAG,CAAC,UAAUC,KAAK,EAAE;QAAE,OAAOtD,KAAK,CAACL,MAAM,EAAE,CAAC4D,QAAQ,CAACD,KAAK,CAAC;MAAE,CAAC,CAAC,CAAC;MAC5H,IAAI,CAACxE,QAAQ,CAAC0E,eAAe,EAAE;MAC/B,IAAI/B,KAAK,EAAE;QACP,IAAI,CAAC3C,QAAQ,CAAC2C,KAAK,EAAE;MACzB;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIrD,YAAY,CAACmB,SAAS,CAACkE,gBAAgB,GAAG,UAAUlD,KAAK,EAAE;IACvD,IAAI,CAACjB,WAAW,GAAGiB,KAAK;IACxB,OAAO,IAAI,CAACpB,gBAAgB,CAACuE,uBAAuB,CAACnD,KAAK,CAAC;EAC/D,CAAC;EACD;AACJ;AACA;EACInC,YAAY,CAACmB,SAAS,CAACoE,qBAAqB,GAAG,YAAY;IACvD,OAAO,IAAI,CAACxE,gBAAgB,CAACyE,sBAAsB,EAAE;EACzD,CAAC;EACD;AACJ;AACA;AACA;EACIxF,YAAY,CAACmB,SAAS,CAACsE,4BAA4B,GAAG,YAAY;IAC9D,OAAO,IAAI,CAAC1E,gBAAgB,CAAC0E,4BAA4B,EAAE;EAC/D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIzF,YAAY,CAACmB,SAAS,CAACwD,kCAAkC,GAAG,UAAU1C,QAAQ,EAAE;IAC5E,IAAI,IAAI,CAACyD,QAAQ,EAAE,EAAE;MACjB,IAAI,CAACC,0BAA0B,CAAC1D,QAAQ,CAAC;MACzC,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAAClB,gBAAgB,CAAC6E,cAAc,CAAC3D,QAAQ,CAAC;EACzD,CAAC;EACD;AACJ;AACA;AACA;EACIjC,YAAY,CAACmB,SAAS,CAACuE,QAAQ,GAAG,YAAY;IAC1C,OAAO,CAAC,CAAC,IAAI,CAACxE,WAAW;EAC7B,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIlB,YAAY,CAACmB,SAAS,CAACwE,0BAA0B,GAAG,UAAU1D,QAAQ,EAAE;IACpE,IAAIA,QAAQ,IAAIA,QAAQ,CAACF,OAAO,EAAE;MAC9BE,QAAQ,CAACF,OAAO,CAAC,IAAI,CAACb,WAAW,CAAC;IACtC;EACJ,CAAC;EACD;AACJ;AACA;EACIlB,YAAY,CAACmB,SAAS,CAAC0E,YAAY,GAAG,YAAY;IAC9C,IAAI,CAAC9E,gBAAgB,CAAC+E,aAAa,EAAE;EACzC,CAAC;EACD9F,YAAY,CAACmB,SAAS,CAACmB,iBAAiB,GAAG,UAAUZ,QAAQ,EAAEW,WAAW,EAAE;IACxE,IAAIX,QAAQ,EAAE;MACV,IAAIqE,aAAa,GAAGrE,QAAQ,CAACzB,MAAM;MACnC,IAAI,CAAC,IAAI,CAACQ,OAAO,CAACuF,OAAO,EAAE;QACvB,IAAI,CAACvF,OAAO,CAACuF,OAAO,GAAGD,aAAa;MACxC;IACJ;IACA,IAAI1D,WAAW,EAAE;MACbA,WAAW,CAACX,QAAQ,CAAC;IACzB;EACJ,CAAC;EACD1B,YAAY,CAACmB,SAAS,CAACiB,aAAa,GAAG,UAAUD,KAAK,EAAEJ,OAAO,EAAE;IAC7D,IAAI,CAACd,gBAAgB,CAACkB,KAAK,CAACsC,OAAO,CAAC;IACpC,IAAI1C,OAAO,EAAE;MACTA,OAAO,CAACI,KAAK,CAAC;IAClB;EACJ,CAAC;EACD,OAAOnC,YAAY;AACvB,CAAC,EAAG;AACJnB,OAAO,CAAC2D,OAAO,GAAGxC,YAAY"},"metadata":{},"sourceType":"script"}