{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dechunker = exports.Chunker = void 0;\nvar base_buf_1 = __importDefault(require(\"../buf/base-buf\"));\nvar channel_buf_1 = require(\"./channel-buf\");\nvar combined_buf_1 = __importDefault(require(\"./combined-buf\"));\nvar _CHUNK_HEADER_SIZE = 2;\nvar _MESSAGE_BOUNDARY = 0x00;\nvar _DEFAULT_BUFFER_SIZE = 1400; // http://stackoverflow.com/questions/2613734/maximum-packet-size-for-a-tcp-connection\n/**\n * Looks like a writable buffer, chunks output transparently into a channel below.\n * @access private\n */\nvar Chunker = /** @class */function (_super) {\n  __extends(Chunker, _super);\n  function Chunker(channel, bufferSize) {\n    var _this = _super.call(this, 0) || this;\n    _this._bufferSize = bufferSize || _DEFAULT_BUFFER_SIZE;\n    _this._ch = channel;\n    _this._buffer = (0, channel_buf_1.alloc)(_this._bufferSize);\n    _this._currentChunkStart = 0;\n    _this._chunkOpen = false;\n    return _this;\n  }\n  Chunker.prototype.putUInt8 = function (position, val) {\n    this._ensure(1);\n    this._buffer.writeUInt8(val);\n  };\n  Chunker.prototype.putInt8 = function (position, val) {\n    this._ensure(1);\n    this._buffer.writeInt8(val);\n  };\n  Chunker.prototype.putFloat64 = function (position, val) {\n    this._ensure(8);\n    this._buffer.writeFloat64(val);\n  };\n  Chunker.prototype.putBytes = function (position, data) {\n    // TODO: If data is larger than our chunk size or so, we're very likely better off just passing this buffer on\n    // rather than doing the copy here TODO: *however* note that we need some way to find out when the data has been\n    // written (and thus the buffer can be re-used) if we take that approach\n    while (data.remaining() > 0) {\n      // Ensure there is an open chunk, and that it has at least one byte of space left\n      this._ensure(1);\n      if (this._buffer.remaining() > data.remaining()) {\n        this._buffer.writeBytes(data);\n      } else {\n        this._buffer.writeBytes(data.readSlice(this._buffer.remaining()));\n      }\n    }\n    return this;\n  };\n  Chunker.prototype.flush = function () {\n    if (this._buffer.position > 0) {\n      this._closeChunkIfOpen();\n      // Local copy and clear the buffer field. This ensures that the buffer is not re-released if the flush call fails\n      var out = this._buffer;\n      this._buffer = null;\n      this._ch.write(out.getSlice(0, out.position));\n      // Alloc a new output buffer. We assume we're using NodeJS's buffer pooling under the hood here!\n      this._buffer = (0, channel_buf_1.alloc)(this._bufferSize);\n      this._chunkOpen = false;\n    }\n    return this;\n  };\n  /**\n   * Bolt messages are encoded in one or more chunks, and the boundary between two messages\n   * is encoded as a 0-length chunk, `00 00`. This inserts such a message boundary, closing\n   * any currently open chunk as needed\n   */\n  Chunker.prototype.messageBoundary = function () {\n    this._closeChunkIfOpen();\n    if (this._buffer.remaining() < _CHUNK_HEADER_SIZE) {\n      this.flush();\n    }\n    // Write message boundary\n    this._buffer.writeInt16(_MESSAGE_BOUNDARY);\n  };\n  /** Ensure at least the given size is available for writing */\n  Chunker.prototype._ensure = function (size) {\n    var toWriteSize = this._chunkOpen ? size : size + _CHUNK_HEADER_SIZE;\n    if (this._buffer.remaining() < toWriteSize) {\n      this.flush();\n    }\n    if (!this._chunkOpen) {\n      this._currentChunkStart = this._buffer.position;\n      this._buffer.position = this._buffer.position + _CHUNK_HEADER_SIZE;\n      this._chunkOpen = true;\n    }\n  };\n  Chunker.prototype._closeChunkIfOpen = function () {\n    if (this._chunkOpen) {\n      var chunkSize = this._buffer.position - (this._currentChunkStart + _CHUNK_HEADER_SIZE);\n      this._buffer.putUInt16(this._currentChunkStart, chunkSize);\n      this._chunkOpen = false;\n    }\n  };\n  return Chunker;\n}(base_buf_1.default);\nexports.Chunker = Chunker;\n/**\n * Combines chunks until a complete message is gathered up, and then forwards that\n * message to an 'onmessage' listener.\n * @access private\n */\nvar Dechunker = /** @class */function () {\n  function Dechunker() {\n    this._currentMessage = [];\n    this._partialChunkHeader = 0;\n    this._state = this.AWAITING_CHUNK;\n  }\n  Dechunker.prototype.AWAITING_CHUNK = function (buf) {\n    if (buf.remaining() >= 2) {\n      // Whole header available, read that\n      return this._onHeader(buf.readUInt16());\n    } else {\n      // Only one byte available, read that and wait for the second byte\n      this._partialChunkHeader = buf.readUInt8() << 8;\n      return this.IN_HEADER;\n    }\n  };\n  Dechunker.prototype.IN_HEADER = function (buf) {\n    // First header byte read, now we read the next one\n    return this._onHeader((this._partialChunkHeader | buf.readUInt8()) & 0xffff);\n  };\n  Dechunker.prototype.IN_CHUNK = function (buf) {\n    if (this._chunkSize <= buf.remaining()) {\n      // Current packet is larger than current chunk, or same size:\n      this._currentMessage.push(buf.readSlice(this._chunkSize));\n      return this.AWAITING_CHUNK;\n    } else {\n      // Current packet is smaller than the chunk we're reading, split the current chunk itself up\n      this._chunkSize -= buf.remaining();\n      this._currentMessage.push(buf.readSlice(buf.remaining()));\n      return this.IN_CHUNK;\n    }\n  };\n  Dechunker.prototype.CLOSED = function (buf) {\n    // no-op\n  };\n  /** Called when a complete chunk header has been received */\n  Dechunker.prototype._onHeader = function (header) {\n    if (header === 0) {\n      // Message boundary\n      var message = void 0;\n      switch (this._currentMessage.length) {\n        case 0:\n          // Keep alive chunk, sent by server to keep network alive.\n          return this.AWAITING_CHUNK;\n        case 1:\n          // All data in one chunk, this signals the end of that chunk.\n          message = this._currentMessage[0];\n          break;\n        default:\n          // A large chunk of data received, this signals that the last chunk has been received.\n          message = new combined_buf_1.default(this._currentMessage);\n          break;\n      }\n      this._currentMessage = [];\n      this.onmessage(message);\n      return this.AWAITING_CHUNK;\n    } else {\n      this._chunkSize = header;\n      return this.IN_CHUNK;\n    }\n  };\n  Dechunker.prototype.write = function (buf) {\n    while (buf.hasRemaining()) {\n      this._state = this._state(buf);\n    }\n  };\n  return Dechunker;\n}();\nexports.Dechunker = Dechunker;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__importDefault","mod","__esModule","defineProperty","exports","value","Dechunker","Chunker","base_buf_1","require","channel_buf_1","combined_buf_1","_CHUNK_HEADER_SIZE","_MESSAGE_BOUNDARY","_DEFAULT_BUFFER_SIZE","_super","channel","bufferSize","_this","_bufferSize","_ch","_buffer","alloc","_currentChunkStart","_chunkOpen","putUInt8","position","val","_ensure","writeUInt8","putInt8","writeInt8","putFloat64","writeFloat64","putBytes","data","remaining","writeBytes","readSlice","flush","_closeChunkIfOpen","out","write","getSlice","messageBoundary","writeInt16","size","toWriteSize","chunkSize","putUInt16","default","_currentMessage","_partialChunkHeader","_state","AWAITING_CHUNK","buf","_onHeader","readUInt16","readUInt8","IN_HEADER","IN_CHUNK","_chunkSize","push","CLOSED","header","message","length","onmessage","hasRemaining"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Dechunker = exports.Chunker = void 0;\nvar base_buf_1 = __importDefault(require(\"../buf/base-buf\"));\nvar channel_buf_1 = require(\"./channel-buf\");\nvar combined_buf_1 = __importDefault(require(\"./combined-buf\"));\nvar _CHUNK_HEADER_SIZE = 2;\nvar _MESSAGE_BOUNDARY = 0x00;\nvar _DEFAULT_BUFFER_SIZE = 1400; // http://stackoverflow.com/questions/2613734/maximum-packet-size-for-a-tcp-connection\n/**\n * Looks like a writable buffer, chunks output transparently into a channel below.\n * @access private\n */\nvar Chunker = /** @class */ (function (_super) {\n    __extends(Chunker, _super);\n    function Chunker(channel, bufferSize) {\n        var _this = _super.call(this, 0) || this;\n        _this._bufferSize = bufferSize || _DEFAULT_BUFFER_SIZE;\n        _this._ch = channel;\n        _this._buffer = (0, channel_buf_1.alloc)(_this._bufferSize);\n        _this._currentChunkStart = 0;\n        _this._chunkOpen = false;\n        return _this;\n    }\n    Chunker.prototype.putUInt8 = function (position, val) {\n        this._ensure(1);\n        this._buffer.writeUInt8(val);\n    };\n    Chunker.prototype.putInt8 = function (position, val) {\n        this._ensure(1);\n        this._buffer.writeInt8(val);\n    };\n    Chunker.prototype.putFloat64 = function (position, val) {\n        this._ensure(8);\n        this._buffer.writeFloat64(val);\n    };\n    Chunker.prototype.putBytes = function (position, data) {\n        // TODO: If data is larger than our chunk size or so, we're very likely better off just passing this buffer on\n        // rather than doing the copy here TODO: *however* note that we need some way to find out when the data has been\n        // written (and thus the buffer can be re-used) if we take that approach\n        while (data.remaining() > 0) {\n            // Ensure there is an open chunk, and that it has at least one byte of space left\n            this._ensure(1);\n            if (this._buffer.remaining() > data.remaining()) {\n                this._buffer.writeBytes(data);\n            }\n            else {\n                this._buffer.writeBytes(data.readSlice(this._buffer.remaining()));\n            }\n        }\n        return this;\n    };\n    Chunker.prototype.flush = function () {\n        if (this._buffer.position > 0) {\n            this._closeChunkIfOpen();\n            // Local copy and clear the buffer field. This ensures that the buffer is not re-released if the flush call fails\n            var out = this._buffer;\n            this._buffer = null;\n            this._ch.write(out.getSlice(0, out.position));\n            // Alloc a new output buffer. We assume we're using NodeJS's buffer pooling under the hood here!\n            this._buffer = (0, channel_buf_1.alloc)(this._bufferSize);\n            this._chunkOpen = false;\n        }\n        return this;\n    };\n    /**\n     * Bolt messages are encoded in one or more chunks, and the boundary between two messages\n     * is encoded as a 0-length chunk, `00 00`. This inserts such a message boundary, closing\n     * any currently open chunk as needed\n     */\n    Chunker.prototype.messageBoundary = function () {\n        this._closeChunkIfOpen();\n        if (this._buffer.remaining() < _CHUNK_HEADER_SIZE) {\n            this.flush();\n        }\n        // Write message boundary\n        this._buffer.writeInt16(_MESSAGE_BOUNDARY);\n    };\n    /** Ensure at least the given size is available for writing */\n    Chunker.prototype._ensure = function (size) {\n        var toWriteSize = this._chunkOpen ? size : size + _CHUNK_HEADER_SIZE;\n        if (this._buffer.remaining() < toWriteSize) {\n            this.flush();\n        }\n        if (!this._chunkOpen) {\n            this._currentChunkStart = this._buffer.position;\n            this._buffer.position = this._buffer.position + _CHUNK_HEADER_SIZE;\n            this._chunkOpen = true;\n        }\n    };\n    Chunker.prototype._closeChunkIfOpen = function () {\n        if (this._chunkOpen) {\n            var chunkSize = this._buffer.position - (this._currentChunkStart + _CHUNK_HEADER_SIZE);\n            this._buffer.putUInt16(this._currentChunkStart, chunkSize);\n            this._chunkOpen = false;\n        }\n    };\n    return Chunker;\n}(base_buf_1.default));\nexports.Chunker = Chunker;\n/**\n * Combines chunks until a complete message is gathered up, and then forwards that\n * message to an 'onmessage' listener.\n * @access private\n */\nvar Dechunker = /** @class */ (function () {\n    function Dechunker() {\n        this._currentMessage = [];\n        this._partialChunkHeader = 0;\n        this._state = this.AWAITING_CHUNK;\n    }\n    Dechunker.prototype.AWAITING_CHUNK = function (buf) {\n        if (buf.remaining() >= 2) {\n            // Whole header available, read that\n            return this._onHeader(buf.readUInt16());\n        }\n        else {\n            // Only one byte available, read that and wait for the second byte\n            this._partialChunkHeader = buf.readUInt8() << 8;\n            return this.IN_HEADER;\n        }\n    };\n    Dechunker.prototype.IN_HEADER = function (buf) {\n        // First header byte read, now we read the next one\n        return this._onHeader((this._partialChunkHeader | buf.readUInt8()) & 0xffff);\n    };\n    Dechunker.prototype.IN_CHUNK = function (buf) {\n        if (this._chunkSize <= buf.remaining()) {\n            // Current packet is larger than current chunk, or same size:\n            this._currentMessage.push(buf.readSlice(this._chunkSize));\n            return this.AWAITING_CHUNK;\n        }\n        else {\n            // Current packet is smaller than the chunk we're reading, split the current chunk itself up\n            this._chunkSize -= buf.remaining();\n            this._currentMessage.push(buf.readSlice(buf.remaining()));\n            return this.IN_CHUNK;\n        }\n    };\n    Dechunker.prototype.CLOSED = function (buf) {\n        // no-op\n    };\n    /** Called when a complete chunk header has been received */\n    Dechunker.prototype._onHeader = function (header) {\n        if (header === 0) {\n            // Message boundary\n            var message = void 0;\n            switch (this._currentMessage.length) {\n                case 0:\n                    // Keep alive chunk, sent by server to keep network alive.\n                    return this.AWAITING_CHUNK;\n                case 1:\n                    // All data in one chunk, this signals the end of that chunk.\n                    message = this._currentMessage[0];\n                    break;\n                default:\n                    // A large chunk of data received, this signals that the last chunk has been received.\n                    message = new combined_buf_1.default(this._currentMessage);\n                    break;\n            }\n            this._currentMessage = [];\n            this.onmessage(message);\n            return this.AWAITING_CHUNK;\n        }\n        else {\n            this._chunkSize = header;\n            return this.IN_CHUNK;\n        }\n    };\n    Dechunker.prototype.write = function (buf) {\n        while (buf.hasRemaining()) {\n            this._state = this._state(buf);\n        }\n    };\n    return Dechunker;\n}());\nexports.Dechunker = Dechunker;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}