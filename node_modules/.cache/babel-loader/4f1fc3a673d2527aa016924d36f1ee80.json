{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar observers_1 = require(\"./internal/observers\");\nvar util_1 = require(\"./internal/util\");\nvar error_1 = require(\"./error\");\nvar result_1 = __importDefault(require(\"./result\"));\nvar transaction_1 = __importDefault(require(\"./transaction\"));\nvar connection_holder_1 = require(\"./internal/connection-holder\");\nvar constants_1 = require(\"./internal/constants\");\nvar transaction_executor_1 = require(\"./internal/transaction-executor\");\nvar bookmark_1 = require(\"./internal/bookmark\");\nvar tx_config_1 = require(\"./internal/tx-config\");\n/**\n * A Session instance is used for handling the connection and\n * sending queries through the connection.\n * In a single session, multiple queries will be executed serially.\n * In order to execute parallel queries, multiple sessions are required.\n * @access public\n */\nvar Session = /** @class */function () {\n  /**\n   * @constructor\n   * @protected\n   * @param {Object} args\n   * @param {string} args.mode the default access mode for this session.\n   * @param {ConnectionProvider} args.connectionProvider - The connection provider to acquire connections from.\n   * @param {Bookmark} args.bookmark - The initial bookmark for this session.\n   * @param {string} args.database the database name\n   * @param {Object} args.config={} - This driver configuration.\n   * @param {boolean} args.reactive - Whether this session should create reactive streams\n   * @param {number} args.fetchSize - Defines how many records is pulled in each pulling batch\n   * @param {string} args.impersonatedUser - The username which the user wants to impersonate for the duration of the session.\n   */\n  function Session(_a) {\n    var mode = _a.mode,\n      connectionProvider = _a.connectionProvider,\n      bookmark = _a.bookmark,\n      database = _a.database,\n      config = _a.config,\n      reactive = _a.reactive,\n      fetchSize = _a.fetchSize,\n      impersonatedUser = _a.impersonatedUser;\n    this._mode = mode;\n    this._database = database;\n    this._reactive = reactive;\n    this._fetchSize = fetchSize;\n    this._onDatabaseNameResolved = this._onDatabaseNameResolved.bind(this);\n    this._readConnectionHolder = new connection_holder_1.ConnectionHolder({\n      mode: constants_1.ACCESS_MODE_READ,\n      database: database,\n      bookmark: bookmark,\n      connectionProvider: connectionProvider,\n      impersonatedUser: impersonatedUser,\n      onDatabaseNameResolved: this._onDatabaseNameResolved\n    });\n    this._writeConnectionHolder = new connection_holder_1.ConnectionHolder({\n      mode: constants_1.ACCESS_MODE_WRITE,\n      database: database,\n      bookmark: bookmark,\n      connectionProvider: connectionProvider,\n      impersonatedUser: impersonatedUser,\n      onDatabaseNameResolved: this._onDatabaseNameResolved\n    });\n    this._open = true;\n    this._hasTx = false;\n    this._impersonatedUser = impersonatedUser;\n    this._lastBookmark = bookmark || bookmark_1.Bookmark.empty();\n    this._transactionExecutor = _createTransactionExecutor(config);\n    this._onComplete = this._onCompleteCallback.bind(this);\n    this._databaseNameResolved = this._database !== '';\n  }\n  /**\n   * Run Cypher query\n   * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n   * or with the query and parameters as separate arguments.\n   *\n   * @public\n   * @param {mixed} query - Cypher query to execute\n   * @param {Object} parameters - Map with parameters to use in query\n   * @param {TransactionConfig} [transactionConfig] - Configuration for the new auto-commit transaction.\n   * @return {Result} New Result.\n   */\n  Session.prototype.run = function (query, parameters, transactionConfig) {\n    var _this = this;\n    var _a = (0, util_1.validateQueryAndParameters)(query, parameters),\n      validatedQuery = _a.validatedQuery,\n      params = _a.params;\n    var autoCommitTxConfig = transactionConfig ? new tx_config_1.TxConfig(transactionConfig) : tx_config_1.TxConfig.empty();\n    return this._run(validatedQuery, params, function (connection) {\n      _this._assertSessionIsOpen();\n      return connection.protocol().run(validatedQuery, params, {\n        bookmark: _this._lastBookmark,\n        txConfig: autoCommitTxConfig,\n        mode: _this._mode,\n        database: _this._database,\n        impersonatedUser: _this._impersonatedUser,\n        afterComplete: _this._onComplete,\n        reactive: _this._reactive,\n        fetchSize: _this._fetchSize\n      });\n    });\n  };\n  Session.prototype._run = function (query, parameters, customRunner) {\n    var connectionHolder = this._connectionHolderWithMode(this._mode);\n    var observerPromise;\n    if (!this._open) {\n      observerPromise = Promise.resolve(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in a closed session.')\n      }));\n    } else if (!this._hasTx && connectionHolder.initializeConnection()) {\n      observerPromise = connectionHolder.getConnection().then(function (connection) {\n        return customRunner(connection);\n      }).catch(function (error) {\n        return Promise.resolve(new observers_1.FailedObserver({\n          error: error\n        }));\n      });\n    } else {\n      observerPromise = Promise.resolve(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Queries cannot be run directly on a ' + 'session with an open transaction; either run from within the ' + 'transaction or use a different session.')\n      }));\n    }\n    return new result_1.default(observerPromise, query, parameters, connectionHolder);\n  };\n  Session.prototype._acquireConnection = function (connectionConsumer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promise, connectionHolder;\n      var _this = this;\n      return __generator(this, function (_a) {\n        connectionHolder = this._connectionHolderWithMode(this._mode);\n        if (!this._open) {\n          promise = Promise.reject((0, error_1.newError)('Cannot run query in a closed session.'));\n        } else if (!this._hasTx && connectionHolder.initializeConnection()) {\n          promise = connectionHolder.getConnection().then(function (connection) {\n            return connectionConsumer(connection);\n          }).then(function (result) {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4 /*yield*/, connectionHolder.releaseConnection()];\n                  case 1:\n                    _a.sent();\n                    return [2 /*return*/, result];\n                }\n              });\n            });\n          });\n        } else {\n          promise = Promise.reject((0, error_1.newError)('Queries cannot be run directly on a ' + 'session with an open transaction; either run from within the ' + 'transaction or use a different session.'));\n        }\n        return [2 /*return*/, promise];\n      });\n    });\n  };\n  /**\n   * Begin a new transaction in this session. A session can have at most one transaction running at a time, if you\n   * want to run multiple concurrent transactions, you should use multiple concurrent sessions.\n   *\n   * While a transaction is open the session cannot be used to run queries outside the transaction.\n   *\n   * @param {TransactionConfig} [transactionConfig] - Configuration for the new auto-commit transaction.\n   * @returns {Transaction} New Transaction.\n   */\n  Session.prototype.beginTransaction = function (transactionConfig) {\n    // this function needs to support bookmarks parameter for backwards compatibility\n    // parameter was of type {string|string[]} and represented either a single or multiple bookmarks\n    // that's why we need to check parameter type and decide how to interpret the value\n    var arg = transactionConfig;\n    var txConfig = tx_config_1.TxConfig.empty();\n    if (arg) {\n      txConfig = new tx_config_1.TxConfig(arg);\n    }\n    return this._beginTransaction(this._mode, txConfig);\n  };\n  Session.prototype._beginTransaction = function (accessMode, txConfig) {\n    if (!this._open) {\n      throw (0, error_1.newError)('Cannot begin a transaction on a closed session.');\n    }\n    if (this._hasTx) {\n      throw (0, error_1.newError)('You cannot begin a transaction on a session with an open transaction; ' + 'either run from within the transaction or use a different session.');\n    }\n    var mode = Session._validateSessionMode(accessMode);\n    var connectionHolder = this._connectionHolderWithMode(mode);\n    connectionHolder.initializeConnection();\n    this._hasTx = true;\n    var tx = new transaction_1.default({\n      connectionHolder: connectionHolder,\n      impersonatedUser: this._impersonatedUser,\n      onClose: this._transactionClosed.bind(this),\n      onBookmark: this._updateBookmark.bind(this),\n      onConnection: this._assertSessionIsOpen.bind(this),\n      reactive: this._reactive,\n      fetchSize: this._fetchSize\n    });\n    tx._begin(this._lastBookmark, txConfig);\n    return tx;\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  Session.prototype._assertSessionIsOpen = function () {\n    if (!this._open) {\n      throw (0, error_1.newError)('You cannot run more transactions on a closed session.');\n    }\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  Session.prototype._transactionClosed = function () {\n    this._hasTx = false;\n  };\n  /**\n   * Return the bookmark received following the last completed {@link Transaction}.\n   *\n   * @return {string[]} A reference to a previous transaction.\n   */\n  Session.prototype.lastBookmark = function () {\n    return this._lastBookmark.values();\n  };\n  /**\n   * Execute given unit of work in a {@link READ} transaction.\n   *\n   * Transaction will automatically be committed unless the given function throws or returns a rejected promise.\n   * Some failures of the given function or the commit itself will be retried with exponential backoff with initial\n   * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's\n   * `maxTransactionRetryTime` property in milliseconds.\n   *\n   * @param {function(tx: Transaction): Promise} transactionWork - Callback that executes operations against\n   * a given {@link Transaction}.\n   * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.\n   * @return {Promise} Resolved promise as returned by the given function or rejected promise when given\n   * function or commit fails.\n   */\n  Session.prototype.readTransaction = function (transactionWork, transactionConfig) {\n    var config = new tx_config_1.TxConfig(transactionConfig);\n    return this._runTransaction(constants_1.ACCESS_MODE_READ, config, transactionWork);\n  };\n  /**\n   * Execute given unit of work in a {@link WRITE} transaction.\n   *\n   * Transaction will automatically be committed unless the given function throws or returns a rejected promise.\n   * Some failures of the given function or the commit itself will be retried with exponential backoff with initial\n   * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's\n   * `maxTransactionRetryTime` property in milliseconds.\n   *\n   * @param {function(tx: Transaction): Promise} transactionWork - Callback that executes operations against\n   * a given {@link Transaction}.\n   * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.\n   * @return {Promise} Resolved promise as returned by the given function or rejected promise when given\n   * function or commit fails.\n   */\n  Session.prototype.writeTransaction = function (transactionWork, transactionConfig) {\n    var config = new tx_config_1.TxConfig(transactionConfig);\n    return this._runTransaction(constants_1.ACCESS_MODE_WRITE, config, transactionWork);\n  };\n  Session.prototype._runTransaction = function (accessMode, transactionConfig, transactionWork) {\n    var _this = this;\n    return this._transactionExecutor.execute(function () {\n      return _this._beginTransaction(accessMode, transactionConfig);\n    }, transactionWork);\n  };\n  /**\n   * Sets the resolved database name in the session context.\n   * @private\n   * @param {string|undefined} database The resolved database name\n   * @returns {void}\n   */\n  Session.prototype._onDatabaseNameResolved = function (database) {\n    if (!this._databaseNameResolved) {\n      var normalizedDatabase = database || '';\n      this._database = normalizedDatabase;\n      this._readConnectionHolder.setDatabase(normalizedDatabase);\n      this._writeConnectionHolder.setDatabase(normalizedDatabase);\n      this._databaseNameResolved = true;\n    }\n  };\n  /**\n   * Update value of the last bookmark.\n   * @private\n   * @param {Bookmark} newBookmark - The new bookmark.\n   * @returns {void}\n   */\n  Session.prototype._updateBookmark = function (newBookmark) {\n    if (newBookmark && !newBookmark.isEmpty()) {\n      this._lastBookmark = newBookmark;\n    }\n  };\n  /**\n   * Close this session.\n   * @return {Promise}\n   */\n  Session.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._open) return [3 /*break*/, 3];\n            this._open = false;\n            this._transactionExecutor.close();\n            return [4 /*yield*/, this._readConnectionHolder.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this._writeConnectionHolder.close()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Session.prototype._connectionHolderWithMode = function (mode) {\n    if (mode === constants_1.ACCESS_MODE_READ) {\n      return this._readConnectionHolder;\n    } else if (mode === constants_1.ACCESS_MODE_WRITE) {\n      return this._writeConnectionHolder;\n    } else {\n      throw (0, error_1.newError)('Unknown access mode: ' + mode);\n    }\n  };\n  /**\n   * @private\n   * @param {Object} meta Connection metadatada\n   * @returns {void}\n   */\n  Session.prototype._onCompleteCallback = function (meta) {\n    this._updateBookmark(new bookmark_1.Bookmark(meta.bookmark));\n  };\n  /**\n   * @protected\n   */\n  Session._validateSessionMode = function (rawMode) {\n    var mode = rawMode || constants_1.ACCESS_MODE_WRITE;\n    if (mode !== constants_1.ACCESS_MODE_READ && mode !== constants_1.ACCESS_MODE_WRITE) {\n      throw (0, error_1.newError)('Illegal session mode ' + mode);\n    }\n    return mode;\n  };\n  return Session;\n}();\n/**\n * @private\n * @param {object} config\n * @returns {TransactionExecutor} The transaction executor\n */\nfunction _createTransactionExecutor(config) {\n  var maxRetryTimeMs = config && config.maxTransactionRetryTime ? config.maxTransactionRetryTime : null;\n  return new transaction_executor_1.TransactionExecutor(maxRetryTimeMs);\n}\nexports.default = Session;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__importDefault","mod","__esModule","Object","defineProperty","exports","observers_1","require","util_1","error_1","result_1","transaction_1","connection_holder_1","constants_1","transaction_executor_1","bookmark_1","tx_config_1","Session","_a","mode","connectionProvider","bookmark","database","config","reactive","fetchSize","impersonatedUser","_mode","_database","_reactive","_fetchSize","_onDatabaseNameResolved","bind","_readConnectionHolder","ConnectionHolder","ACCESS_MODE_READ","onDatabaseNameResolved","_writeConnectionHolder","ACCESS_MODE_WRITE","_open","_hasTx","_impersonatedUser","_lastBookmark","Bookmark","empty","_transactionExecutor","_createTransactionExecutor","_onComplete","_onCompleteCallback","_databaseNameResolved","prototype","run","query","parameters","transactionConfig","_this","validateQueryAndParameters","validatedQuery","params","autoCommitTxConfig","TxConfig","_run","connection","_assertSessionIsOpen","protocol","txConfig","afterComplete","customRunner","connectionHolder","_connectionHolderWithMode","observerPromise","FailedObserver","error","newError","initializeConnection","getConnection","catch","default","_acquireConnection","connectionConsumer","promise","releaseConnection","beginTransaction","arg","_beginTransaction","accessMode","_validateSessionMode","tx","onClose","_transactionClosed","onBookmark","_updateBookmark","onConnection","_begin","lastBookmark","values","readTransaction","transactionWork","_runTransaction","writeTransaction","execute","normalizedDatabase","setDatabase","newBookmark","isEmpty","close","meta","rawMode","maxRetryTimeMs","maxTransactionRetryTime","TransactionExecutor"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-core/lib/session.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar observers_1 = require(\"./internal/observers\");\nvar util_1 = require(\"./internal/util\");\nvar error_1 = require(\"./error\");\nvar result_1 = __importDefault(require(\"./result\"));\nvar transaction_1 = __importDefault(require(\"./transaction\"));\nvar connection_holder_1 = require(\"./internal/connection-holder\");\nvar constants_1 = require(\"./internal/constants\");\nvar transaction_executor_1 = require(\"./internal/transaction-executor\");\nvar bookmark_1 = require(\"./internal/bookmark\");\nvar tx_config_1 = require(\"./internal/tx-config\");\n/**\n * A Session instance is used for handling the connection and\n * sending queries through the connection.\n * In a single session, multiple queries will be executed serially.\n * In order to execute parallel queries, multiple sessions are required.\n * @access public\n */\nvar Session = /** @class */ (function () {\n    /**\n     * @constructor\n     * @protected\n     * @param {Object} args\n     * @param {string} args.mode the default access mode for this session.\n     * @param {ConnectionProvider} args.connectionProvider - The connection provider to acquire connections from.\n     * @param {Bookmark} args.bookmark - The initial bookmark for this session.\n     * @param {string} args.database the database name\n     * @param {Object} args.config={} - This driver configuration.\n     * @param {boolean} args.reactive - Whether this session should create reactive streams\n     * @param {number} args.fetchSize - Defines how many records is pulled in each pulling batch\n     * @param {string} args.impersonatedUser - The username which the user wants to impersonate for the duration of the session.\n     */\n    function Session(_a) {\n        var mode = _a.mode, connectionProvider = _a.connectionProvider, bookmark = _a.bookmark, database = _a.database, config = _a.config, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser;\n        this._mode = mode;\n        this._database = database;\n        this._reactive = reactive;\n        this._fetchSize = fetchSize;\n        this._onDatabaseNameResolved = this._onDatabaseNameResolved.bind(this);\n        this._readConnectionHolder = new connection_holder_1.ConnectionHolder({\n            mode: constants_1.ACCESS_MODE_READ,\n            database: database,\n            bookmark: bookmark,\n            connectionProvider: connectionProvider,\n            impersonatedUser: impersonatedUser,\n            onDatabaseNameResolved: this._onDatabaseNameResolved\n        });\n        this._writeConnectionHolder = new connection_holder_1.ConnectionHolder({\n            mode: constants_1.ACCESS_MODE_WRITE,\n            database: database,\n            bookmark: bookmark,\n            connectionProvider: connectionProvider,\n            impersonatedUser: impersonatedUser,\n            onDatabaseNameResolved: this._onDatabaseNameResolved\n        });\n        this._open = true;\n        this._hasTx = false;\n        this._impersonatedUser = impersonatedUser;\n        this._lastBookmark = bookmark || bookmark_1.Bookmark.empty();\n        this._transactionExecutor = _createTransactionExecutor(config);\n        this._onComplete = this._onCompleteCallback.bind(this);\n        this._databaseNameResolved = this._database !== '';\n    }\n    /**\n     * Run Cypher query\n     * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n     * or with the query and parameters as separate arguments.\n     *\n     * @public\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @param {TransactionConfig} [transactionConfig] - Configuration for the new auto-commit transaction.\n     * @return {Result} New Result.\n     */\n    Session.prototype.run = function (query, parameters, transactionConfig) {\n        var _this = this;\n        var _a = (0, util_1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;\n        var autoCommitTxConfig = transactionConfig\n            ? new tx_config_1.TxConfig(transactionConfig)\n            : tx_config_1.TxConfig.empty();\n        return this._run(validatedQuery, params, function (connection) {\n            _this._assertSessionIsOpen();\n            return connection.protocol().run(validatedQuery, params, {\n                bookmark: _this._lastBookmark,\n                txConfig: autoCommitTxConfig,\n                mode: _this._mode,\n                database: _this._database,\n                impersonatedUser: _this._impersonatedUser,\n                afterComplete: _this._onComplete,\n                reactive: _this._reactive,\n                fetchSize: _this._fetchSize\n            });\n        });\n    };\n    Session.prototype._run = function (query, parameters, customRunner) {\n        var connectionHolder = this._connectionHolderWithMode(this._mode);\n        var observerPromise;\n        if (!this._open) {\n            observerPromise = Promise.resolve(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in a closed session.')\n            }));\n        }\n        else if (!this._hasTx && connectionHolder.initializeConnection()) {\n            observerPromise = connectionHolder\n                .getConnection()\n                .then(function (connection) { return customRunner(connection); })\n                .catch(function (error) { return Promise.resolve(new observers_1.FailedObserver({ error: error })); });\n        }\n        else {\n            observerPromise = Promise.resolve(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Queries cannot be run directly on a ' +\n                    'session with an open transaction; either run from within the ' +\n                    'transaction or use a different session.')\n            }));\n        }\n        return new result_1.default(observerPromise, query, parameters, connectionHolder);\n    };\n    Session.prototype._acquireConnection = function (connectionConsumer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var promise, connectionHolder;\n            var _this = this;\n            return __generator(this, function (_a) {\n                connectionHolder = this._connectionHolderWithMode(this._mode);\n                if (!this._open) {\n                    promise = Promise.reject((0, error_1.newError)('Cannot run query in a closed session.'));\n                }\n                else if (!this._hasTx && connectionHolder.initializeConnection()) {\n                    promise = connectionHolder\n                        .getConnection()\n                        .then(function (connection) { return connectionConsumer(connection); })\n                        .then(function (result) { return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, connectionHolder.releaseConnection()];\n                                case 1:\n                                    _a.sent();\n                                    return [2 /*return*/, result];\n                            }\n                        });\n                    }); });\n                }\n                else {\n                    promise = Promise.reject((0, error_1.newError)('Queries cannot be run directly on a ' +\n                        'session with an open transaction; either run from within the ' +\n                        'transaction or use a different session.'));\n                }\n                return [2 /*return*/, promise];\n            });\n        });\n    };\n    /**\n     * Begin a new transaction in this session. A session can have at most one transaction running at a time, if you\n     * want to run multiple concurrent transactions, you should use multiple concurrent sessions.\n     *\n     * While a transaction is open the session cannot be used to run queries outside the transaction.\n     *\n     * @param {TransactionConfig} [transactionConfig] - Configuration for the new auto-commit transaction.\n     * @returns {Transaction} New Transaction.\n     */\n    Session.prototype.beginTransaction = function (transactionConfig) {\n        // this function needs to support bookmarks parameter for backwards compatibility\n        // parameter was of type {string|string[]} and represented either a single or multiple bookmarks\n        // that's why we need to check parameter type and decide how to interpret the value\n        var arg = transactionConfig;\n        var txConfig = tx_config_1.TxConfig.empty();\n        if (arg) {\n            txConfig = new tx_config_1.TxConfig(arg);\n        }\n        return this._beginTransaction(this._mode, txConfig);\n    };\n    Session.prototype._beginTransaction = function (accessMode, txConfig) {\n        if (!this._open) {\n            throw (0, error_1.newError)('Cannot begin a transaction on a closed session.');\n        }\n        if (this._hasTx) {\n            throw (0, error_1.newError)('You cannot begin a transaction on a session with an open transaction; ' +\n                'either run from within the transaction or use a different session.');\n        }\n        var mode = Session._validateSessionMode(accessMode);\n        var connectionHolder = this._connectionHolderWithMode(mode);\n        connectionHolder.initializeConnection();\n        this._hasTx = true;\n        var tx = new transaction_1.default({\n            connectionHolder: connectionHolder,\n            impersonatedUser: this._impersonatedUser,\n            onClose: this._transactionClosed.bind(this),\n            onBookmark: this._updateBookmark.bind(this),\n            onConnection: this._assertSessionIsOpen.bind(this),\n            reactive: this._reactive,\n            fetchSize: this._fetchSize\n        });\n        tx._begin(this._lastBookmark, txConfig);\n        return tx;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Session.prototype._assertSessionIsOpen = function () {\n        if (!this._open) {\n            throw (0, error_1.newError)('You cannot run more transactions on a closed session.');\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Session.prototype._transactionClosed = function () {\n        this._hasTx = false;\n    };\n    /**\n     * Return the bookmark received following the last completed {@link Transaction}.\n     *\n     * @return {string[]} A reference to a previous transaction.\n     */\n    Session.prototype.lastBookmark = function () {\n        return this._lastBookmark.values();\n    };\n    /**\n     * Execute given unit of work in a {@link READ} transaction.\n     *\n     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.\n     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial\n     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's\n     * `maxTransactionRetryTime` property in milliseconds.\n     *\n     * @param {function(tx: Transaction): Promise} transactionWork - Callback that executes operations against\n     * a given {@link Transaction}.\n     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.\n     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given\n     * function or commit fails.\n     */\n    Session.prototype.readTransaction = function (transactionWork, transactionConfig) {\n        var config = new tx_config_1.TxConfig(transactionConfig);\n        return this._runTransaction(constants_1.ACCESS_MODE_READ, config, transactionWork);\n    };\n    /**\n     * Execute given unit of work in a {@link WRITE} transaction.\n     *\n     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.\n     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial\n     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's\n     * `maxTransactionRetryTime` property in milliseconds.\n     *\n     * @param {function(tx: Transaction): Promise} transactionWork - Callback that executes operations against\n     * a given {@link Transaction}.\n     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.\n     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given\n     * function or commit fails.\n     */\n    Session.prototype.writeTransaction = function (transactionWork, transactionConfig) {\n        var config = new tx_config_1.TxConfig(transactionConfig);\n        return this._runTransaction(constants_1.ACCESS_MODE_WRITE, config, transactionWork);\n    };\n    Session.prototype._runTransaction = function (accessMode, transactionConfig, transactionWork) {\n        var _this = this;\n        return this._transactionExecutor.execute(function () { return _this._beginTransaction(accessMode, transactionConfig); }, transactionWork);\n    };\n    /**\n     * Sets the resolved database name in the session context.\n     * @private\n     * @param {string|undefined} database The resolved database name\n     * @returns {void}\n     */\n    Session.prototype._onDatabaseNameResolved = function (database) {\n        if (!this._databaseNameResolved) {\n            var normalizedDatabase = database || '';\n            this._database = normalizedDatabase;\n            this._readConnectionHolder.setDatabase(normalizedDatabase);\n            this._writeConnectionHolder.setDatabase(normalizedDatabase);\n            this._databaseNameResolved = true;\n        }\n    };\n    /**\n     * Update value of the last bookmark.\n     * @private\n     * @param {Bookmark} newBookmark - The new bookmark.\n     * @returns {void}\n     */\n    Session.prototype._updateBookmark = function (newBookmark) {\n        if (newBookmark && !newBookmark.isEmpty()) {\n            this._lastBookmark = newBookmark;\n        }\n    };\n    /**\n     * Close this session.\n     * @return {Promise}\n     */\n    Session.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._open) return [3 /*break*/, 3];\n                        this._open = false;\n                        this._transactionExecutor.close();\n                        return [4 /*yield*/, this._readConnectionHolder.close()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this._writeConnectionHolder.close()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Session.prototype._connectionHolderWithMode = function (mode) {\n        if (mode === constants_1.ACCESS_MODE_READ) {\n            return this._readConnectionHolder;\n        }\n        else if (mode === constants_1.ACCESS_MODE_WRITE) {\n            return this._writeConnectionHolder;\n        }\n        else {\n            throw (0, error_1.newError)('Unknown access mode: ' + mode);\n        }\n    };\n    /**\n     * @private\n     * @param {Object} meta Connection metadatada\n     * @returns {void}\n     */\n    Session.prototype._onCompleteCallback = function (meta) {\n        this._updateBookmark(new bookmark_1.Bookmark(meta.bookmark));\n    };\n    /**\n     * @protected\n     */\n    Session._validateSessionMode = function (rawMode) {\n        var mode = rawMode || constants_1.ACCESS_MODE_WRITE;\n        if (mode !== constants_1.ACCESS_MODE_READ && mode !== constants_1.ACCESS_MODE_WRITE) {\n            throw (0, error_1.newError)('Illegal session mode ' + mode);\n        }\n        return mode;\n    };\n    return Session;\n}());\n/**\n * @private\n * @param {object} config\n * @returns {TransactionExecutor} The transaction executor\n */\nfunction _createTransactionExecutor(config) {\n    var maxRetryTimeMs = config && config.maxTransactionRetryTime\n        ? config.maxTransactionRetryTime\n        : null;\n    return new transaction_executor_1.TransactionExecutor(maxRetryTimeMs);\n}\nexports.default = Session;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}