{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\nvar integer_1 = __importStar(require(\"./integer\"));\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary = /** @class */function () {\n  /**\n   * @constructor\n   * @param {string} query - The query this summary is for\n   * @param {Object} parameters - Parameters for the query\n   * @param {Object} metadata - Query metadata\n   * @param {number|undefined} protocolVersion - Bolt Protocol Version\n   */\n  function ResultSummary(query, parameters, metadata, protocolVersion) {\n    /**\n     * The query and parameters this summary is for.\n     * @type {{text: string, parameters: Object}}\n     * @public\n     */\n    this.query = {\n      text: query,\n      parameters: parameters\n    };\n    /**\n     * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n     * \"w\" for write-only query and \"s\" for schema-write query.\n     * String constants are available in {@link queryType} object.\n     * @type {string}\n     * @public\n     */\n    this.queryType = metadata.type;\n    /**\n     * Counters for operations the query triggered.\n     * @type {QueryStatistics}\n     * @public\n     */\n    this.counters = new QueryStatistics(metadata.stats || {});\n    // for backwards compatibility, remove in future version\n    /**\n     * Use {@link ResultSummary.counters} instead.\n     * @type {QueryStatistics}\n     * @deprecated\n     */\n    this.updateStatistics = this.counters;\n    /**\n     * This describes how the database will execute the query.\n     * Query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"EXPLAIN\".\n     * @type {Plan|false}\n     * @public\n     */\n    this.plan = metadata.plan || metadata.profile ? new Plan(metadata.plan || metadata.profile) : false;\n    /**\n     * This describes how the database did execute your query. This will contain detailed information about what\n     * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"PROFILE\".\n     * @type {ProfiledPlan}\n     * @public\n     */\n    this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n    /**\n     * An array of notifications that might arise when executing the query. Notifications can be warnings about\n     * problematic queries or other valuable information that can be presented in a client. Unlike failures\n     * or errors, notifications do not affect the execution of a query.\n     * @type {Array<Notification>}\n     * @public\n     */\n    this.notifications = this._buildNotifications(metadata.notifications);\n    /**\n     * The basic information of the server where the result is obtained from.\n     * @type {ServerInfo}\n     * @public\n     */\n    this.server = new ServerInfo(metadata.server, protocolVersion);\n    /**\n     * The time it took the server to consume the result.\n     * @type {number}\n     * @public\n     */\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\n     * The time it took the server to make the result available for consumption in milliseconds.\n     * @type {number}\n     * @public\n     */\n    this.resultAvailableAfter = metadata.result_available_after;\n    /**\n     * The database name where this summary is obtained from.\n     * @type {{name: string}}\n     * @public\n     */\n    this.database = {\n      name: metadata.db || null\n    };\n  }\n  ResultSummary.prototype._buildNotifications = function (notifications) {\n    if (!notifications) {\n      return [];\n    }\n    return notifications.map(function (n) {\n      return new Notification(n);\n    });\n  };\n  /**\n   * Check if the result summary has a plan\n   * @return {boolean}\n   */\n  ResultSummary.prototype.hasPlan = function () {\n    return this.plan instanceof Plan;\n  };\n  /**\n   * Check if the result summary has a profile\n   * @return {boolean}\n   */\n  ResultSummary.prototype.hasProfile = function () {\n    return this.profile instanceof ProfiledPlan;\n  };\n  return ResultSummary;\n}();\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\nvar Plan = /** @class */function () {\n  /**\n   * Create a Plan instance\n   * @constructor\n   * @param {Object} plan - Object with plan data\n   */\n  function Plan(plan) {\n    this.operatorType = plan.operatorType;\n    this.identifiers = plan.identifiers;\n    this.arguments = plan.args;\n    this.children = plan.children ? plan.children.map(function (child) {\n      return new Plan(child);\n    }) : [];\n  }\n  return Plan;\n}();\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\nvar ProfiledPlan = /** @class */function () {\n  /**\n   * Create a ProfiledPlan instance\n   * @constructor\n   * @param {Object} profile - Object with profile data\n   */\n  function ProfiledPlan(profile) {\n    this.operatorType = profile.operatorType;\n    this.identifiers = profile.identifiers;\n    this.arguments = profile.args;\n    this.dbHits = valueOrDefault('dbHits', profile);\n    this.rows = valueOrDefault('rows', profile);\n    this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n    this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n    this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n    this.time = valueOrDefault('time', profile);\n    this.children = profile.children ? profile.children.map(function (child) {\n      return new ProfiledPlan(child);\n    }) : [];\n  }\n  ProfiledPlan.prototype.hasPageCacheStats = function () {\n    return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;\n  };\n  return ProfiledPlan;\n}();\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\nvar Stats = /** @class */function () {\n  /**\n   * @constructor\n   * @private\n   */\n  function Stats() {\n    /**\n     * nodes created\n     * @type {number}\n     * @public\n     */\n    this.nodesCreated = 0;\n    /**\n     * nodes deleted\n     * @type {number}\n     * @public\n     */\n    this.nodesDeleted = 0;\n    /**\n     * relationships created\n     * @type {number}\n     * @public\n     */\n    this.relationshipsCreated = 0;\n    /**\n     * relationships deleted\n     * @type {number}\n     * @public\n     */\n    this.relationshipsDeleted = 0;\n    /**\n     * properties set\n     * @type {number}\n     * @public\n     */\n    this.propertiesSet = 0;\n    /**\n     * labels added\n     * @type {number}\n     * @public\n     */\n    this.labelsAdded = 0;\n    /**\n     * labels removed\n     * @type {number}\n     * @public\n     */\n    this.labelsRemoved = 0;\n    /**\n     * indexes added\n     * @type {number}\n     * @public\n     */\n    this.indexesAdded = 0;\n    /**\n     * indexes removed\n     * @type {number}\n     * @public\n     */\n    this.indexesRemoved = 0;\n    /**\n     * constraints added\n     * @type {number}\n     * @public\n     */\n    this.constraintsAdded = 0;\n    /**\n     * constraints removed\n     * @type {number}\n     * @public\n     */\n    this.constraintsRemoved = 0;\n  }\n  return Stats;\n}();\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\nvar QueryStatistics = /** @class */function () {\n  /**\n   * Structurize the statistics\n   * @constructor\n   * @param {Object} statistics - Result statistics\n   */\n  function QueryStatistics(statistics) {\n    var _this = this;\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    this._systemUpdates = 0;\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      var camelCaseIndex = index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n      if (camelCaseIndex in _this._stats) {\n        _this._stats[camelCaseIndex] = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'systemUpdates') {\n        _this._systemUpdates = intValue(statistics[index]);\n      }\n    });\n    this._stats = Object.freeze(this._stats);\n  }\n  /**\n   * Did the database get updated?\n   * @return {boolean}\n   */\n  QueryStatistics.prototype.containsUpdates = function () {\n    var _this = this;\n    return Object.keys(this._stats).reduce(function (last, current) {\n      return last + _this._stats[current];\n    }, 0) > 0;\n  };\n  /**\n   * Returns the query statistics updates in a dictionary.\n   * @returns {Stats}\n   */\n  QueryStatistics.prototype.updates = function () {\n    return this._stats;\n  };\n  /**\n   * Return true if the system database get updated, otherwise false\n   * @returns {boolean} - If the system database get updated or not.\n   */\n  QueryStatistics.prototype.containsSystemUpdates = function () {\n    return this._systemUpdates > 0;\n  };\n  /**\n   * @returns {number} - Number of system updates\n   */\n  QueryStatistics.prototype.systemUpdates = function () {\n    return this._systemUpdates;\n  };\n  return QueryStatistics;\n}();\nexports.QueryStatistics = QueryStatistics;\n/**\n * Class for Cypher notifications\n * @access public\n */\nvar Notification = /** @class */function () {\n  /**\n   * Create a Notification instance\n   * @constructor\n   * @param {Object} notification - Object with notification data\n   */\n  function Notification(notification) {\n    this.code = notification.code;\n    this.title = notification.title;\n    this.description = notification.description;\n    this.severity = notification.severity;\n    this.position = Notification._constructPosition(notification.position);\n  }\n  Notification._constructPosition = function (pos) {\n    if (!pos) {\n      return {};\n    }\n    return {\n      offset: intValue(pos.offset),\n      line: intValue(pos.line),\n      column: intValue(pos.column)\n    };\n  };\n  return Notification;\n}();\nexports.Notification = Notification;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\nvar ServerInfo = /** @class */function () {\n  /**\n   * Create a ServerInfo instance\n   * @constructor\n   * @param {Object} serverMeta - Object with serverMeta data\n   * @param {Object} connectionInfo - Bolt connection info\n   * @param {number} protocolVersion - Bolt Protocol Version\n   */\n  function ServerInfo(serverMeta, protocolVersion) {\n    if (serverMeta) {\n      /**\n       * The server adress\n       * @type {string}\n       * @public\n       */\n      this.address = serverMeta.address;\n      /**\n       * The server version string.\n       *\n       * See {@link ServerInfo#protocolVersion} and {@link ServerInfo#agent}\n       * @type {string}\n       * @deprecated in 4.3, please use ServerInfo#agent, ServerInfo#protocolVersion, or call the <i>dbms.components</i> procedure instead.\n       * <b>Method might be removed in the next major release.</b>\n       \n       * @public\n       */\n      this.version = serverMeta.version;\n      /**\n       * The server user agent string\n       * @type {string}\n       * @public\n       */\n      this.agent = serverMeta.version;\n    }\n    /**\n     * The protocol version used by the connection\n     * @type {number}\n     * @public\n     */\n    this.protocolVersion = protocolVersion;\n  }\n  return ServerInfo;\n}();\nexports.ServerInfo = ServerInfo;\nfunction intValue(value) {\n  if (value instanceof integer_1.default) {\n    return value.toInt();\n  } else if (typeof value == 'bigint') {\n    return (0, integer_1.int)(value).toInt();\n  } else {\n    return value;\n  }\n}\nfunction valueOrDefault(key, values, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = 0;\n  }\n  if (key in values) {\n    var value = values[key];\n    return intValue(value);\n  } else {\n    return defaultValue;\n  }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\nvar queryType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","Stats","QueryStatistics","ProfiledPlan","Plan","Notification","ServerInfo","queryType","integer_1","require","ResultSummary","query","parameters","metadata","protocolVersion","text","type","counters","stats","updateStatistics","plan","profile","notifications","_buildNotifications","server","resultConsumedAfter","result_consumed_after","resultAvailableAfter","result_available_after","database","name","db","map","n","hasPlan","hasProfile","operatorType","identifiers","arguments","args","children","child","dbHits","valueOrDefault","rows","pageCacheMisses","pageCacheHits","pageCacheHitRatio","time","hasPageCacheStats","nodesCreated","nodesDeleted","relationshipsCreated","relationshipsDeleted","propertiesSet","labelsAdded","labelsRemoved","indexesAdded","indexesRemoved","constraintsAdded","constraintsRemoved","statistics","_this","_stats","_systemUpdates","keys","forEach","index","camelCaseIndex","replace","toUpperCase","intValue","freeze","containsUpdates","reduce","last","current","updates","containsSystemUpdates","systemUpdates","notification","code","title","description","severity","position","_constructPosition","pos","offset","line","column","serverMeta","address","version","agent","default","toInt","int","key","values","defaultValue","READ_ONLY","READ_WRITE","WRITE_ONLY","SCHEMA_WRITE"],"sources":["C:/Stanford/DigitalTracesApp3/node_modules/neo4j-driver-core/lib/result-summary.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\nvar integer_1 = __importStar(require(\"./integer\"));\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string} query - The query this summary is for\n     * @param {Object} parameters - Parameters for the query\n     * @param {Object} metadata - Query metadata\n     * @param {number|undefined} protocolVersion - Bolt Protocol Version\n     */\n    function ResultSummary(query, parameters, metadata, protocolVersion) {\n        /**\n         * The query and parameters this summary is for.\n         * @type {{text: string, parameters: Object}}\n         * @public\n         */\n        this.query = { text: query, parameters: parameters };\n        /**\n         * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n         * \"w\" for write-only query and \"s\" for schema-write query.\n         * String constants are available in {@link queryType} object.\n         * @type {string}\n         * @public\n         */\n        this.queryType = metadata.type;\n        /**\n         * Counters for operations the query triggered.\n         * @type {QueryStatistics}\n         * @public\n         */\n        this.counters = new QueryStatistics(metadata.stats || {});\n        // for backwards compatibility, remove in future version\n        /**\n         * Use {@link ResultSummary.counters} instead.\n         * @type {QueryStatistics}\n         * @deprecated\n         */\n        this.updateStatistics = this.counters;\n        /**\n         * This describes how the database will execute the query.\n         * Query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"EXPLAIN\".\n         * @type {Plan|false}\n         * @public\n         */\n        this.plan =\n            metadata.plan || metadata.profile\n                ? new Plan(metadata.plan || metadata.profile)\n                : false;\n        /**\n         * This describes how the database did execute your query. This will contain detailed information about what\n         * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"PROFILE\".\n         * @type {ProfiledPlan}\n         * @public\n         */\n        this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n        /**\n         * An array of notifications that might arise when executing the query. Notifications can be warnings about\n         * problematic queries or other valuable information that can be presented in a client. Unlike failures\n         * or errors, notifications do not affect the execution of a query.\n         * @type {Array<Notification>}\n         * @public\n         */\n        this.notifications = this._buildNotifications(metadata.notifications);\n        /**\n         * The basic information of the server where the result is obtained from.\n         * @type {ServerInfo}\n         * @public\n         */\n        this.server = new ServerInfo(metadata.server, protocolVersion);\n        /**\n         * The time it took the server to consume the result.\n         * @type {number}\n         * @public\n         */\n        this.resultConsumedAfter = metadata.result_consumed_after;\n        /**\n         * The time it took the server to make the result available for consumption in milliseconds.\n         * @type {number}\n         * @public\n         */\n        this.resultAvailableAfter = metadata.result_available_after;\n        /**\n         * The database name where this summary is obtained from.\n         * @type {{name: string}}\n         * @public\n         */\n        this.database = { name: metadata.db || null };\n    }\n    ResultSummary.prototype._buildNotifications = function (notifications) {\n        if (!notifications) {\n            return [];\n        }\n        return notifications.map(function (n) {\n            return new Notification(n);\n        });\n    };\n    /**\n     * Check if the result summary has a plan\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasPlan = function () {\n        return this.plan instanceof Plan;\n    };\n    /**\n     * Check if the result summary has a profile\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasProfile = function () {\n        return this.profile instanceof ProfiledPlan;\n    };\n    return ResultSummary;\n}());\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\nvar Plan = /** @class */ (function () {\n    /**\n     * Create a Plan instance\n     * @constructor\n     * @param {Object} plan - Object with plan data\n     */\n    function Plan(plan) {\n        this.operatorType = plan.operatorType;\n        this.identifiers = plan.identifiers;\n        this.arguments = plan.args;\n        this.children = plan.children\n            ? plan.children.map(function (child) { return new Plan(child); })\n            : [];\n    }\n    return Plan;\n}());\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\nvar ProfiledPlan = /** @class */ (function () {\n    /**\n     * Create a ProfiledPlan instance\n     * @constructor\n     * @param {Object} profile - Object with profile data\n     */\n    function ProfiledPlan(profile) {\n        this.operatorType = profile.operatorType;\n        this.identifiers = profile.identifiers;\n        this.arguments = profile.args;\n        this.dbHits = valueOrDefault('dbHits', profile);\n        this.rows = valueOrDefault('rows', profile);\n        this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n        this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n        this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n        this.time = valueOrDefault('time', profile);\n        this.children = profile.children\n            ? profile.children.map(function (child) { return new ProfiledPlan(child); })\n            : [];\n    }\n    ProfiledPlan.prototype.hasPageCacheStats = function () {\n        return (this.pageCacheMisses > 0 ||\n            this.pageCacheHits > 0 ||\n            this.pageCacheHitRatio > 0);\n    };\n    return ProfiledPlan;\n}());\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\nvar Stats = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function Stats() {\n        /**\n         * nodes created\n         * @type {number}\n         * @public\n         */\n        this.nodesCreated = 0;\n        /**\n         * nodes deleted\n         * @type {number}\n         * @public\n         */\n        this.nodesDeleted = 0;\n        /**\n         * relationships created\n         * @type {number}\n         * @public\n         */\n        this.relationshipsCreated = 0;\n        /**\n         * relationships deleted\n         * @type {number}\n         * @public\n         */\n        this.relationshipsDeleted = 0;\n        /**\n         * properties set\n         * @type {number}\n         * @public\n         */\n        this.propertiesSet = 0;\n        /**\n         * labels added\n         * @type {number}\n         * @public\n         */\n        this.labelsAdded = 0;\n        /**\n         * labels removed\n         * @type {number}\n         * @public\n         */\n        this.labelsRemoved = 0;\n        /**\n         * indexes added\n         * @type {number}\n         * @public\n         */\n        this.indexesAdded = 0;\n        /**\n         * indexes removed\n         * @type {number}\n         * @public\n         */\n        this.indexesRemoved = 0;\n        /**\n         * constraints added\n         * @type {number}\n         * @public\n         */\n        this.constraintsAdded = 0;\n        /**\n         * constraints removed\n         * @type {number}\n         * @public\n         */\n        this.constraintsRemoved = 0;\n    }\n    return Stats;\n}());\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\nvar QueryStatistics = /** @class */ (function () {\n    /**\n     * Structurize the statistics\n     * @constructor\n     * @param {Object} statistics - Result statistics\n     */\n    function QueryStatistics(statistics) {\n        var _this = this;\n        this._stats = {\n            nodesCreated: 0,\n            nodesDeleted: 0,\n            relationshipsCreated: 0,\n            relationshipsDeleted: 0,\n            propertiesSet: 0,\n            labelsAdded: 0,\n            labelsRemoved: 0,\n            indexesAdded: 0,\n            indexesRemoved: 0,\n            constraintsAdded: 0,\n            constraintsRemoved: 0\n        };\n        this._systemUpdates = 0;\n        Object.keys(statistics).forEach(function (index) {\n            // To camelCase\n            var camelCaseIndex = index.replace(/(-\\w)/g, function (m) { return m[1].toUpperCase(); });\n            if (camelCaseIndex in _this._stats) {\n                _this._stats[camelCaseIndex] = intValue(statistics[index]);\n            }\n            else if (camelCaseIndex === 'systemUpdates') {\n                _this._systemUpdates = intValue(statistics[index]);\n            }\n        });\n        this._stats = Object.freeze(this._stats);\n    }\n    /**\n     * Did the database get updated?\n     * @return {boolean}\n     */\n    QueryStatistics.prototype.containsUpdates = function () {\n        var _this = this;\n        return (Object.keys(this._stats).reduce(function (last, current) {\n            return last + _this._stats[current];\n        }, 0) > 0);\n    };\n    /**\n     * Returns the query statistics updates in a dictionary.\n     * @returns {Stats}\n     */\n    QueryStatistics.prototype.updates = function () {\n        return this._stats;\n    };\n    /**\n     * Return true if the system database get updated, otherwise false\n     * @returns {boolean} - If the system database get updated or not.\n     */\n    QueryStatistics.prototype.containsSystemUpdates = function () {\n        return this._systemUpdates > 0;\n    };\n    /**\n     * @returns {number} - Number of system updates\n     */\n    QueryStatistics.prototype.systemUpdates = function () {\n        return this._systemUpdates;\n    };\n    return QueryStatistics;\n}());\nexports.QueryStatistics = QueryStatistics;\n/**\n * Class for Cypher notifications\n * @access public\n */\nvar Notification = /** @class */ (function () {\n    /**\n     * Create a Notification instance\n     * @constructor\n     * @param {Object} notification - Object with notification data\n     */\n    function Notification(notification) {\n        this.code = notification.code;\n        this.title = notification.title;\n        this.description = notification.description;\n        this.severity = notification.severity;\n        this.position = Notification._constructPosition(notification.position);\n    }\n    Notification._constructPosition = function (pos) {\n        if (!pos) {\n            return {};\n        }\n        return {\n            offset: intValue(pos.offset),\n            line: intValue(pos.line),\n            column: intValue(pos.column)\n        };\n    };\n    return Notification;\n}());\nexports.Notification = Notification;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\nvar ServerInfo = /** @class */ (function () {\n    /**\n     * Create a ServerInfo instance\n     * @constructor\n     * @param {Object} serverMeta - Object with serverMeta data\n     * @param {Object} connectionInfo - Bolt connection info\n     * @param {number} protocolVersion - Bolt Protocol Version\n     */\n    function ServerInfo(serverMeta, protocolVersion) {\n        if (serverMeta) {\n            /**\n             * The server adress\n             * @type {string}\n             * @public\n             */\n            this.address = serverMeta.address;\n            /**\n             * The server version string.\n             *\n             * See {@link ServerInfo#protocolVersion} and {@link ServerInfo#agent}\n             * @type {string}\n             * @deprecated in 4.3, please use ServerInfo#agent, ServerInfo#protocolVersion, or call the <i>dbms.components</i> procedure instead.\n             * <b>Method might be removed in the next major release.</b>\n             \n             * @public\n             */\n            this.version = serverMeta.version;\n            /**\n             * The server user agent string\n             * @type {string}\n             * @public\n             */\n            this.agent = serverMeta.version;\n        }\n        /**\n         * The protocol version used by the connection\n         * @type {number}\n         * @public\n         */\n        this.protocolVersion = protocolVersion;\n    }\n    return ServerInfo;\n}());\nexports.ServerInfo = ServerInfo;\nfunction intValue(value) {\n    if (value instanceof integer_1.default) {\n        return value.toInt();\n    }\n    else if (typeof value == 'bigint') {\n        return (0, integer_1.int)(value).toInt();\n    }\n    else {\n        return value;\n    }\n}\nfunction valueOrDefault(key, values, defaultValue) {\n    if (defaultValue === void 0) { defaultValue = 0; }\n    if (key in values) {\n        var value = values[key];\n        return intValue(value);\n    }\n    else {\n        return defaultValue;\n    }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\nvar queryType = {\n    READ_ONLY: 'r',\n    READ_WRITE: 'rw',\n    WRITE_ONLY: 'w',\n    SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}